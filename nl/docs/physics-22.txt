    FISICA CLASICA PARA UN SISTEMA CON DOS CUERPOS EN UN ESPACIO BIDIMENSIONAL.
    ---------------------------------------------------------------------------
    La física está hecha al boleo, la he terminado más acorde con newton
    en el directorio examples de la distribución, módulo physics-22.py,
    y si tienes gnuplot y python-Gnuplot, se dibujan las trayectorias.
    Esto lo dejo meramente como test de regresión.


    
    >>> from nl import kb, Number, Arith, Prop, Rule

    >>> secs = 100

    >>> kb.open()
    
    'cuerpo' es un nombre común
    
    >>> from nl.docs.physics_22 import Cuerpo, TieneMasa, TieneVelocidad, TienePosicion, TieneAceleracion, SufreFuerza, EstaADistancia, Anda
    
    'si un cuerpo tiene_posicion pos1 y otro cuerpo tiene_posicion pos2, el primero está a una distancia de pos1 - pos2 del segundo'
    
    >>> r1 = Rule('r1', [
    ...                Prop(Cuerpo('X1'), TienePosicion(metros='X2'), 'X4'),
    ...                Prop(Cuerpo('X3'), TienePosicion(metros='X5'), 'X4'),
    ...                Arith('(< X4 %s)' % secs),
    ...                Arith('(neq X2 X5)')
    ...                ], [
    ...                Prop(Cuerpo('X1'), EstaADistancia(metros='(- X2 X5)', otro=Cuerpo('X3')), 'X4')
    ...                ])
    
    'si en un segundo un cuerpo tiene pos x y velocidad v, en el siguiente segundo tiene pos x+v.'
    
    
    >>> r2 = Rule('r2', [
    ...            Prop(Cuerpo('X1'), TienePosicion(metros='X2'), 'X4'),
    ...            Prop(Cuerpo('X1'), TieneVelocidad(mps='X3'), 'X4'),
    ...            Arith('(< X4 %s)' % secs)
    ...            ], [
    ...            Prop(Cuerpo('X1'), TienePosicion(metros='(+ X2 X3)'), '(+ X4 1)')
    ...            ])
    
    'si en un segundo un cuerpo tiene velocidad v y aceleracion a, en el siguiente segundo tiene velocidad v+a.'
    
    >>> r3 = Rule('r3', [
    ...            Prop(Cuerpo('X1'), TieneVelocidad(mps='X2'), 'X4'),
    ...            Prop(Cuerpo('X1'), TieneAceleracion(mps2='X3'), 'X4'),
    ...            Arith('(< X4 %s)' % secs)
    ...            ], [
    ...            Prop(Cuerpo('X1'), TieneVelocidad(mps='(+ X2 X3)'), '(+ X4 1)')
    ...            ])
    ...
    
    'si en un segundo un cuerpo tiene aceleracion a y sufre una furerza f, en el siguiente segundo tiene aceleración (f/m)**1/2.'
    
    
    >>> r4 = Rule('r4', [
    ...            Prop(Cuerpo('X1'), SufreFuerza(newton='X2'), 'X4'),
    ...            Prop(Cuerpo('X1'), TieneAceleracion(mps2='X3'), 'X4'),
    ...            Prop(Cuerpo('X1'), TieneMasa(kgs=Number('X5')), Number('X4')),
    ...            Arith('<', Number('X4'), Number(secs))
    ...            ], [
    ...            Prop(Cuerpo('X1'), TieneAceleracion(mps2='(+ X3 (** (/ X2 X5) (/ 1 2)))'), '(+ X4 1)')
    ...            ])
    
    'si un cuerpo está a una distancia de otro, sufre fuerza inversa al cuadrado de esa distancia, y proporcional a sus masas.'
    
    >>> r5 = Rule('r5', [
    ...            Prop(Cuerpo('X1'), EstaADistancia(metros='X2', otro=Cuerpo('X3')), 'X4'),
    ...            Prop(Cuerpo('X1'), TieneMasa(kgs='X5'), 'X4'),
    ...            Prop(Cuerpo('X3'), TieneMasa(kgs='X6'), 'X4'),
    ...            Arith('<', Number('X4'), Number(secs))
    ...           ],
    ...          [                                                                                                  Prop(Cuerpo('X1'), SufreFuerza(newton='(/ (* X5 X6) (** X2 2))'), '(+ X4 1)')])
    
    'si un cuerpo tiene masa m, seguirá teniendo masa m'
    
    >>> r6 = Rule('r6', [
    ...            Prop(Cuerpo('X1'), TieneMasa(kgs='X2'), 'X3'),
    ...            Arith('(< X3 %s)' % secs)
    ...            ],
    ...            [
    ...            Prop(Cuerpo('X1'), TieneMasa(kgs='X2'), '(+ X3 1)')
    ...            ])
    
    c1 es un cuerpo
    
    >>> c1 = Cuerpo('c1')
    
    c2 es un cuerpo
    
    >>> c2 = Cuerpo('c2')
    
    >>> p1 = Prop(c1, TieneMasa(kgs=100), 1)
    
    >>> p2 = Prop(c2, TieneMasa(kgs=50), 1)
    
    >>> p3 = Prop(c1, TienePosicion(metros=5), 1)
    
    >>> p4 = Prop(c2, TienePosicion(metros=10), 1)
    
    >>> p5 = Prop(c1, TieneVelocidad(mps=1), 1)
    
    >>> p6 = Prop(c2, Anda(mps=1, longitud_zancada=2), 1)
    
    >>> p7 = Prop(c1, TieneAceleracion(mps2=0), 1)
    
    >>> p8 = Prop(c2, TieneAceleracion(mps2=0), 1)
    
    >>> p9 = Prop(c1, SufreFuerza(newton=0), 1)
    
    >>> p10 = Prop(c2, SufreFuerza(newton=0), 1)

    >>> kb.tell(r1)

    >>> kb.tell(r2)

    >>> kb.tell(r3)

    >>> kb.tell(r4)

    >>> kb.tell(r5)

    >>> kb.tell(r6)
    
    >>> kb.tell(c1)

    >>> kb.tell(c2)
    
    >>> kb.tell(p1)

    >>> kb.tell(p2)

    >>> kb.tell(p3)

    >>> kb.tell(p4)

    >>> kb.tell(p5)
    
    >>> kb.tell(p6)

    >>> kb.tell(p7)

    >>> kb.tell(p8)

    >>> kb.tell(p9)

    >>> kb.tell(p10)

    >>> kb.extend()
    ...
    
    >>> kb.ask(Prop(c1, TienePosicion(metros=5), 1))
    'c1 tieneposicion metros 5.0 at 1.0'
    
    >>> kb.ask(Prop(c1, TienePosicion(metros='X1'), 2))
    'c1 tieneposicion metros 6.0 at 2.0'
    
    >>> kb.ask(Prop(c1, TieneVelocidad(mps=1), 2))
    'c1 tienevelocidad mps 1.0 at 2.0'
    
    >>> kb.ask(Prop(c2, TieneMasa(kgs=50), 9))
    'c2 tienemasa kgs 50.0 at 9.0'
    
    >>> kb.ask(Prop(c1, EstaADistancia(metros='X1', otro=c2), 19))
    'c1 estaadistancia otro c2 metros -317.169040648 at 19.0'
    
    >>> # kb.ask(Prop(c1, TieneAceleracion(mps2='X1'), 'X2'))
    ...

    >>> kb.close()
    'DB closed'
