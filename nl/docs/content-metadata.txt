TESTS FOR ln
------------



    >>> import ln

En primer lugar definimos una clase de objetos, 'Content', de tipo nombre,
a la que pertenecerán todos los contenidos. El equivalente en castellano
para esta declaración sería:

'''un contenido es una cosa'''

    >>> class Content(ln.Name): pass
    is(s=content,c=name)

Definimos un contenido al que damos el id 'doc1'.  El equivalente en
castellano para esta declaración sería:

'''doc1 es un Content'''

    >>> doc1 = Content('doc1')
    >>> ln.KB.tell(doc1)
    isa(e=doc1,c=content)

Definimos otro contenido. En castellano:

'''doc2 es un Content'''

    >>> doc2 = Content('doc2')
    >>> ln.KB.tell(doc2)
    isa(e=doc2,c=content)

Ahora definimos otra clase, 'WfState', también de tipo nombre. En
castellano:

'''un WfState es una cosa'''

    >>> class WfState(ln.Name): pass
    is(s=wfstate,c=name)

Definimos una serie de 'WfState'. En castellano:

'''public es un WfState'''
'''private es un WfState'''

    >>> private = WfState('private')
    >>> ln.KB.tell(private)
    isa(e=private,c=wfstate)

    >>> public = WfState('public')
    >>> ln.KB.tell(public)
    isa(e=public,c=wfstate)

Ahora definimos una clase de tipo verbo, 'HasState', que puede tener como
sujeto términos de tipo 'Content', y un modificador 'state' de tipo
'WFState'. En castellano:

'''HasState es un verbo, y si dices que algo HasState lo que sea, ese algo
ha de ser un Content y ese lo que sea ha de ser un WFState'''

    >>> class HasState(ln.Verb):
    ...     subject = Content
    ...     advs = {'state': WfState}
    isa(e=prop(s=X1,v=hasstate(state=X3),t=X2),c=fact)
    -->
    isa(e=X1,c=content);
    isa(e=X3,c=wfstate)

Otra clase de tipo verbo, 'ChangeOfState', con sujeto 'Content' y dos modificadores, 'init_state' y 'end_state' ambos de tipo 'WFState'. En
Castellano:

'''ChangeOfState es un verbo, y si dices que algo ChangeOfState de a a b,
algo ha de ser un Content y a y b han de ser WFState'''

    >>> class ChangeOfState(ln.Verb):
    ...     subject = Content
    ...     advs = {'init_state': WfState, 'end_state': WfState}
    isa(e=prop(s=X1,v=changeofstate(end_state=X3,init_state=X4),t=X2),c=fact)
    -->
    isa(e=X1,c=content);
    isa(e=X3,c=wfstate);
    isa(e=X4,c=wfstate)

Una clase 'User' de tipo nombre.

'''un User es una cosa'''

    >>> class User(ln.Name): pass
    is(s=user,c=name)

'''john es un User'''

    >>> john = User('john')
    >>> ln.KB.tell(john)
    isa(e=john,c=user)

'''bob es un User'''

    >>> bob = User('bob')
    >>> ln.KB.tell(bob)
    isa(e=bob,c=user)

Puede parecer raro decir que una 'action' es una cosa (nombre) en vez de
ser una acción/estado (verbo), pero es que, en este esbozo de sistema, no
hemos distinguido entre acción sobre un contenido y permiso para realizar esa
acción, hemos supuesto que cada acción tiene su permiso, simplificando;
de modo que de lo que aquí se dice que es una cosa, es del permiso, y
de la acción en sí, se dice realizar la acción.

'''una Action es una cosa'''

    >>> class Action(ln.Name): pass
    is(s=action,c=name)

'''view es una Action'''

    >>> view = Action('view')
    >>> ln.KB.tell(view)
    isa(e=view,c=action)

'''edit es una Action'''

    >>> edit = Action('edit')
    >>> ln.KB.tell(edit)
    isa(e=edit,c=action)

'''remove es una Action'''

    >>> remove = Action('remove')
    >>> ln.KB.tell(remove)
    isa(e=remove,c=action)

'''change_state es una Action'''

    >>> change_state = Action('change_state')
    >>> ln.KB.tell(change_state)
    isa(e=change_state,c=action)

'''Un usuario puede tener permiso para realizar una acción sobre un
contenido'''

    >>> class HasPermission(ln.Verb):
    ...     subject = User
    ...     advs = {'action': Action, 'content': Content}
    isa(e=prop(s=X1,v=haspermission(action=X3,content=X4),t=X2),c=fact)
    -->
    isa(e=X1,c=user);
    isa(e=X3,c=action);
    isa(e=X4,c=content)

'''Un usuario puede  realizar una acción sobre un contenido'''

    >>> class Do(ln.Verb):
    ...     subject = User
    ...     advs = {'action': Action, 'content': Content}
    isa(e=prop(s=X1,v=do(action=X3,content=X4),t=X2),c=fact)
    -->
    isa(e=X1,c=user);
    isa(e=X3,c=action);
    isa(e=X4,c=content)

'''Un usuario puede pedir realizar una acción sobre un contenido'''

    >>> class Ask(ln.Verb):
    ...     subject = User
    ...     advs = {'action': Action, 'content': Content}
    isa(e=prop(s=X1,v=ask(action=X3,content=X4),t=X2),c=fact)
    -->
    isa(e=X1,c=user);
    isa(e=X3,c=action);
    isa(e=X4,c=content)

'''Un usuario puede ser notificado de algo'''

    >>> class IsNotifed(ln.Verb):
    ...     subject = User
    ...     advs = {'expr': ln.Prop}
    isa(e=prop(s=X1,v=isnotifed(expr=X3),t=X2),c=fact)
    -->
    isa(e=X1,c=user);
    isa(e=X3,c=prop)

'''Una relación es una cosa'''

    >>> class RelationToContent(ln.Name): pass
    is(s=relationtocontent,c=name)

'''propietario es una relación'''

    >>> owner = RelationToContent('owner')
    >>> ln.KB.tell(owner)
    isa(e=owner,c=relationtocontent)

'''un usuario puede tener una cierta relación con un contenido'''

    >>> class HasRelation(ln.Verb):
    ...     subject = User
    ...     advs = {'relation_to_content': RelationToContent,
    ...             'content': Content}
    isa(e=prop(s=X1,v=hasrelation(content=X3,relation_to_content=X4),t=X2),c=fact)
    -->
    isa(e=X1,c=user);
    isa(e=X3,c=content);
    isa(e=X4,c=relationtocontent)

'''el contenido doc1 tiene estado público ahora'''

    >>> ahora = ln.Number('ahora')
    >>> prop1 = ln.Prop(doc1, HasState(state=public), ahora)
    >>> ln.KB.tell(prop1)
    isa(e=prop(s=doc1,v=hasstate(state=public),t=ahora),c=fact)

'''si un contenido tiene estado público, cualquier usuario tiene
permiso para verlo'''

    >>> u1 = User('X1')
    >>> c1 = Content('X2')
    >>> p1 = ln.Prop(c1, HasState(state=public), ln.Number('X3'))
    >>> p2 = ln.Prop(u1, HasPermission(action=view,content=c1),
    ...                                             ln.Number('X3'))
    >>> ln.KB.tell(ln.Rule((u1, c1, p1),(p2,)))
    isa(e=X1,c=user);
    isa(e=X2,c=content);
    isa(e=prop(s=X2,v=hasstate(state=public),t=X3),c=fact)
    -->
    isa(e=prop(s=X1,v=haspermission(action=view,content=X2),t=X3),c=fact)

'''si un usuario es propietario de un contenido, tiene permiso para
editarlo, para borrarlo, y para cambiar su estado'''

    >>> u1 = User('X1')
    >>> c1 = Content('X2')
    >>> p1 = ln.Prop(u1, HasRelation(relation_to_content=owner, content=c1),
    ...                 ln.Number('X3'))
    >>> p2 = ln.Prop(u1, HasPermission(action=edit,content=c1),
    ...                                             ln.Number('X3'))
    >>> p3 = ln.Prop(u1, HasPermission(action=remove,content=c1),
    ...                                             ln.Number('X3'))
    >>> p4 = ln.Prop(u1, HasPermission(action=change_state,content=c1),
    ...                                             ln.Number('X3'))
    >>> ln.KB.tell(ln.Rule((u1, c1, p1),(p2, p3, p4)))
    isa(e=X1,c=user);
    isa(e=X2,c=content);
    isa(e=prop(s=X1,v=hasrelation(content=X2,relation_to_content=owner),t=X3),c=fact)
    -->
    isa(e=prop(s=X1,v=haspermission(action=edit,content=X2),t=X3),c=fact);
    isa(e=prop(s=X1,v=haspermission(action=remove,content=X2),t=X3),c=fact);
    isa(e=prop(s=X1,v=haspermission(action=change_state,content=X2),t=X3),c=fact)

'''si un usuario pide realizar una acción, y tiene permiso para ello,
la realiza'''

    >>> u1 = User('X1')
    >>> c1 = Content('X2')
    >>> a1 = Action('X3')
    >>> p1 = ln.Prop(u1, Ask(action=a1,content=c1), ln.Number('X4'))
    >>> p2 = ln.Prop(u1, HasPermission(action=a1,content=c1),
    ...                                             ln.Number('X4'))
    >>> p3 = ln.Prop(u1, Do(action=a1,content=c1), ln.Number('X4'))
    >>> ln.KB.tell(ln.Rule((u1, c1, a1, p1, p2),(p3,)))
    isa(e=X1,c=user);
    isa(e=X2,c=content);
    isa(e=X3,c=action);
    isa(e=prop(s=X1,v=ask(action=X3,content=X2),t=X4),c=fact);
    isa(e=prop(s=X1,v=haspermission(action=X3,content=X2),t=X4),c=fact)
    -->
    isa(e=prop(s=X1,v=do(action=X3,content=X2),t=X4),c=fact)

'''john es propietario del doc1'''

    >>> prop1 = ln.Prop(john,
    ...          HasRelation(relation_to_content=owner,content=doc1), ahora)
    >>> ln.KB.tell(prop1)
    isa(e=prop(s=john,v=hasrelation(content=doc1,relation_to_content=owner),t=ahora),c=fact)

'''john pide editar el doc1'''

    >>> prop1 = ln.Prop(john, Ask(action=edit,content=doc1), ahora)
    >>> ln.KB.tell(prop1)
    isa(e=prop(s=john,v=ask(action=edit,content=doc1),t=ahora),c=fact)

'''bob pide editar el doc1'''

    >>> prop1 = ln.Prop(bob, Ask(action=edit,content=doc1), ahora)
    >>> ln.KB.tell(prop1)
    isa(e=prop(s=bob,v=ask(action=edit,content=doc1),t=ahora),c=fact)

Compilamos la base de datos.

    >>> ln.KB.extend()
    True

'''¿es cierto que remove es una action?'''

    >>> ln.KB.ask(remove)
    isa(c=action, e=remove)

'''¿es cierto que delete es una action?'''

    >>> remove.name = 'delete'
    >>> ln.KB.ask(remove)
    False

'''¿tiene bob permiso para ver doc1?'''

    >>> q1 = ln.Prop(s=bob,
    ...              v=HasPermission(action=view,content=doc1),
    ...              t=ahora)
    >>> ln.KB.ask(q1)
    isa(c=fact, e=prop(s=bob, t=ahora, v=haspermission(action=view, content=doc1)))

'''¿tiene bob permiso para editar doc1?'''

    >>> q1 = ln.Prop(s=bob,
    ...              v=HasPermission(action=edit,content=doc1),
    ...              t=ahora)
    >>> ln.KB.ask(q1)
    False

'''¿edita john doc1 ahora?'''

    >>> q1 = ln.Prop(s=john,
    ...              v=Do(action=edit,content=doc1),
    ...              t=ahora)
    >>> ln.KB.ask(q1)
    isa(c=fact, e=prop(s=john, t=ahora, v=do(action=edit, content=doc1)))

'''¿edita bob doc1 ahora?'''

    >>> q1 = ln.Prop(s=bob,
    ...              v=Do(action=edit,content=doc1),
    ...              t=ahora)
    >>> ln.KB.ask(q1)
    False













