    TESTS FOR nl
    ------------


    >>> from nl import kb

    un contenido es una cosa

    >>> class Content(kb.Thing): pass

    doc1 es un Content

    >>> doc1 = Content('doc1')
    >>> kb.tell(doc1)

    doc2 es un Content

    >>> doc2 = Content('doc2')
    >>> kb.tell(doc2)

    un WfState es una cosa

    >>> class WfState(kb.Thing): pass

    public es un WfState
    private es un WfState

    >>> private = WfState('private')
    >>> kb.tell(private)

    >>> public = WfState('public')
    >>> kb.tell(public)

    HasState es un verbo, y si dices que algo HasState lo que sea, ese algo
    ha de ser un Content y ese lo que sea ha de ser un WFState

    >>> class HasState(kb.State):
    ...     mods = {'state': WfState}

    ChangeOfState es un verbo, y si dices que algo ChangeOfState de a a b,
    algo ha de ser un Content y a y b han de ser WFState

    >>> class ChangeOfState(kb.State):
    ...     mods = {'init_state': WfState, 'end_state': WfState}

    un User es una cosa

    >>> class User(kb.Thing): pass

    john es un User

    >>> john = User('john')
    >>> kb.tell(john)

    bob es un User

    >>> bob = User('bob')
    >>> kb.tell(bob)

    una Action es una cosa

    >>> class Action(kb.Thing): pass

    view es una Action

    >>> view = Action('view')
    >>> kb.tell(view)

    edit es una Action

    >>> edit = Action('edit')
    >>> kb.tell(edit)

    remove es una Action

    >>> remove = Action('remove')
    >>> kb.tell(remove)

    change_state es una Action

    >>> change_state = Action('change_state')
    >>> kb.tell(change_state)

    Un usuario puede tener permiso para realizar una acción sobre un
    contenido

    >>> class HasPermission(kb.State):
    ...     mods = {'action': Action, 'content': Content}

    Un usuario puede  realizar una acción sobre un contenido

    >>> class Do(kb.State):
    ...     mods = {'action': Action, 'content': Content}

    Un usuario puede pedir realizar una acción sobre un contenido

    >>> class Ask(kb.State):
    ...     mods = {'action': Action, 'content': Content}

    Una relación es una cosa

    >>> class RelationToContent(kb.Thing): pass

    propietario es una relación

    >>> owner = RelationToContent('owner')
    >>> kb.tell(owner)

    un usuario puede tener una cierta relación con un contenido

    >>> class HasRelation(kb.State):
    ...     mods = {'relation_to_content': RelationToContent,
    ...             'content': Content}

    el contenido doc1 tiene estado público ahora

    >>> ahora = kb.Number(0)
    >>> prop1 = kb.Prop(doc1, HasState(state=public), ahora)
    >>> kb.tell(prop1)

    si un contenido tiene estado público, cualquier usuario tiene
    permiso para verlo

    >>> u1 = User('X1')
    >>> c1 = Content('X2')
    >>> p1 = kb.Prop(c1, HasState(state=public), kb.Number('X3'))
    >>> p2 = kb.Prop(u1, HasPermission(action=view,content=c1),
    ...                                             kb.Number('X3'))
    >>> kb.tell(kb.Rule('r1', (u1, p1,),(p2,)))

    si un usuario es propietario de un contenido, tiene permiso para
    editarlo, para borrarlo, y para cambiar su estado

    >>> u1 = User('X1')
    >>> c1 = Content('X2')
    >>> p1 = kb.Prop(u1, HasRelation(relation_to_content=owner, content=c1),
    ...                 kb.Number('X3'))
    >>> p2 = kb.Prop(u1, HasPermission(action=edit,content=c1),
    ...                                             kb.Number('X3'))
    >>> p3 = kb.Prop(u1, HasPermission(action=remove,content=c1),
    ...                                             kb.Number('X3'))
    >>> p4 = kb.Prop(u1, HasPermission(action=change_state,content=c1),
    ...                                             kb.Number('X3'))
    >>> r2 = kb.Rule('r2', (p1,),(p2, p3, p4))
    >>> kb.tell(r2)

    si un usuario pide realizar una acción, y tiene permiso para ello,
    la realiza

    >>> u1 = User('X1')
    >>> c1 = Content('X2')
    >>> a1 = Action('X3')
    >>> p1 = kb.Prop(u1, Ask(action=a1,content=c1), kb.Number('X4'))
    >>> p2 = kb.Prop(u1, HasPermission(action=a1,content=c1),
    ...                                             kb.Number('X4'))
    >>> p3 = kb.Prop(u1, Do(action=a1,content=c1), kb.Number('X4'))
    >>> kb.tell(kb.Rule('r3', (p1, p2),(p3,)))

    john es propietario del doc1

    >>> prop1 = kb.Prop(john,
    ...          HasRelation(relation_to_content=owner,content=doc1), ahora)
    >>> kb.tell(prop1)

    john pide editar el doc1

    >>> prop1 = kb.Prop(john, Ask(action=edit,content=doc1), ahora)
    >>> kb.tell(prop1)

    bob pide editar el doc1

    >>> prop1 = kb.Prop(bob, Ask(action=edit,content=doc1), ahora)
    >>> kb.tell(prop1)

    Compilamos la base de datos.

    >>> kb.extend()
    4

    ¿es cierto que remove es una action?

    >>> kb.ask(remove)
    'remove is a Action'

    ¿es cierto que delete es una action?

    >>> remove.value = 'delete'
    >>> kb.ask(remove)
    'no'

    ¿tiene bob permiso para ver doc1?

    >>> q1 = kb.Prop(bob,
    ...              HasPermission(action=view,content=doc1),
    ...              ahora)
    >>> kb.ask(q1)
    "bob HasPermission ['action=view', 'content=doc1'] at 0"

    ¿tiene bob permiso para editar doc1?

    >>> q1 = kb.Prop(bob,
    ...              HasPermission(action=edit,content=doc1),
    ...              ahora)
    >>> kb.ask(q1)
    'no'

    ¿edita john doc1 ahora?

    >>> q1 = kb.Prop(john,
    ...              Do(action=edit,content=doc1),
    ...              ahora)
    >>> kb.ask(q1)
    "john Do ['action=edit', 'content=doc1'] at 0"

    ¿edita bob doc1 ahora?

    >>> q1 = kb.Prop(bob,
    ...              Do(action=edit,content=doc1),
    ...              ahora)
    >>> kb.ask(q1)
    'no'













