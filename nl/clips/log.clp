(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot metros (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot metros (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot mps (type ?VARIABLE)))
(defclass Anda (is-a TieneVelocidad) (slot longitud_zancada (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot mps2 (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot newton (type ?VARIABLE)))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq (class ?X3) Cuerpo)|:(subclassp (class ?X3) Cuerpo)) (predicate ?Y2&:(eq (class ?Y2) TienePosicion)|:(subclassp (class ?Y2) TienePosicion)) (time ?X4))) (test (< ?X4 100)) (test (neq (send ?Y1 get-metros) (send ?Y2 get-metros))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of EstaADistancia (otro ?X3) (metros (- (send ?Y1 get-metros) (send ?Y2 get-metros))))) (time ?X4)))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TienePosicion)|:(subclassp (class ?Y3) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneVelocidad)|:(subclassp (class ?Y4) TieneVelocidad)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (metros (+ (send ?Y3 get-metros) (send ?Y4 get-mps))))) (time (+ ?X4 1))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) TieneVelocidad)|:(subclassp (class ?Y5) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneAceleracion)|:(subclassp (class ?Y6) TieneAceleracion)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (mps (+ (send ?Y5 get-mps) (send ?Y6 get-mps2))))) (time (+ ?X4 1))))
(defrule r4 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y7&:(eq (class ?Y7) SufreFuerza)|:(subclassp (class ?Y7) SufreFuerza)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y8&:(eq (class ?Y8) TieneAceleracion)|:(subclassp (class ?Y8) TieneAceleracion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y9&:(eq (class ?Y9) TieneMasa)|:(subclassp (class ?Y9) TieneMasa)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneAceleracion (mps2 (+ (send ?Y8 get-mps2) (** (/ (send ?Y7 get-newton) (send ?Y9 get-kgs)) (/ 1 2)))))) (time (+ ?X4 1))))
(defrule r5 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y10&:(eq (class ?Y10) EstaADistancia)|:(subclassp (class ?Y10) EstaADistancia)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y11&:(eq (class ?Y11) TieneMasa)|:(subclassp (class ?Y11) TieneMasa)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq ?X3 (send ?Y10 get-otro))) (predicate ?Y12&:(eq (class ?Y12) TieneMasa)|:(subclassp (class ?Y12) TieneMasa)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of SufreFuerza (newton (/ (* (send ?Y11 get-kgs) (send ?Y12 get-kgs)) (** (send ?Y10 get-metros) 2))))) (time (+ ?X4 1))))
(defrule r6 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y13&:(eq (class ?Y13) TieneMasa)|:(subclassp (class ?Y13) TieneMasa)) (time ?X3))) (test (< ?X3 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y13 get-kgs)))) (time (+ ?X3 1))))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs 100))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs 50))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (metros 5))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (metros 10))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (mps 1))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneVelocidad (mps 1))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (mps2 0))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (mps2 0))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (newton 0))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (newton 0))) (time 1))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(find-all-instances ((?prop Proposition) (?Y14 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y14:metros 5) (eq ?prop:predicate ?Y14) (eq ?prop:time 1)))
(find-all-instances ((?prop Proposition) (?Y15 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y15) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y16 TienePosicion)) (and (eq ?prop:subject [c2]) (eq ?prop:predicate ?Y16) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y17 TieneVelocidad)) (and (eq ?prop:subject [c1]) (eq ?Y17:mps 1) (eq ?prop:predicate ?Y17) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y18 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y18:metros 7) (eq ?prop:predicate ?Y18) (eq ?prop:time 3)))
(find-all-instances ((?prop Proposition) (?Y19 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y19:kgs 50) (eq ?prop:predicate ?Y19) (eq ?prop:time 9)))
(find-all-instances ((?prop Proposition) (?Y20 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y20:kgs 50) (eq ?prop:predicate ?Y20) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y21 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y21) (eq ?prop:time 1)))
(find-all-instances ((?prop Proposition) (?Y22 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y22:otro [c2]) (eq ?prop:predicate ?Y22) (eq ?prop:time 19)))
(find-all-instances ((?prop Proposition) (?Y23 EstaADistancia)) (and (eq ?prop:subject [c2]) (eq ?Y23:otro [c1]) (eq ?prop:predicate ?Y23) (eq ?prop:time 19)))
(find-all-instances ((?prop Proposition) (?Y24 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y24:otro [c2]) (eq ?prop:predicate ?Y24) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y25 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y25) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y26 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y26) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y27 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y27)))
(find-all-instances ((?prop Proposition) (?Y28 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y28:otro [c2]) (eq ?prop:predicate ?Y28)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot metros (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot metros (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot mps (type ?VARIABLE)))
(defclass Anda (is-a TieneVelocidad) (slot longitud_zancada (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot mps2 (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot newton (type ?VARIABLE)))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq (class ?X3) Cuerpo)|:(subclassp (class ?X3) Cuerpo)) (predicate ?Y2&:(eq (class ?Y2) TienePosicion)|:(subclassp (class ?Y2) TienePosicion)) (time ?X4))) (test (< ?X4 100)) (test (neq (send ?Y1 get-metros) (send ?Y2 get-metros))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of EstaADistancia (otro ?X3) (metros (- (send ?Y1 get-metros) (send ?Y2 get-metros))))) (time ?X4)))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TienePosicion)|:(subclassp (class ?Y3) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneVelocidad)|:(subclassp (class ?Y4) TieneVelocidad)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (metros (+ (send ?Y3 get-metros) (send ?Y4 get-mps))))) (time (+ ?X4 1))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) TieneVelocidad)|:(subclassp (class ?Y5) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneAceleracion)|:(subclassp (class ?Y6) TieneAceleracion)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (mps (+ (send ?Y5 get-mps) (send ?Y6 get-mps2))))) (time (+ ?X4 1))))
(defrule r4 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y7&:(eq (class ?Y7) SufreFuerza)|:(subclassp (class ?Y7) SufreFuerza)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y8&:(eq (class ?Y8) TieneAceleracion)|:(subclassp (class ?Y8) TieneAceleracion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y9&:(eq (class ?Y9) TieneMasa)|:(subclassp (class ?Y9) TieneMasa)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneAceleracion (mps2 (+ (send ?Y8 get-mps2) (** (/ (send ?Y7 get-newton) (send ?Y9 get-kgs)) (/ 1 2)))))) (time (+ ?X4 1))))
(defrule r5 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y10&:(eq (class ?Y10) EstaADistancia)|:(subclassp (class ?Y10) EstaADistancia)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y11&:(eq (class ?Y11) TieneMasa)|:(subclassp (class ?Y11) TieneMasa)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq ?X3 (send ?Y10 get-otro))) (predicate ?Y12&:(eq (class ?Y12) TieneMasa)|:(subclassp (class ?Y12) TieneMasa)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of SufreFuerza (newton (/ (* (send ?Y11 get-kgs) (send ?Y12 get-kgs)) (** (send ?Y10 get-metros) 2))))) (time (+ ?X4 1))))
(defrule r6 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y13&:(eq (class ?Y13) TieneMasa)|:(subclassp (class ?Y13) TieneMasa)) (time ?X3))) (test (< ?X3 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y13 get-kgs)))) (time (+ ?X3 1))))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs 100))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs 50))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (metros 5))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (metros 10))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (mps 1))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneVelocidad (mps 1))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (mps2 0))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (mps2 0))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (newton 0))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (newton 0))) (time 1))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(find-all-instances ((?prop Proposition) (?Y14 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y14:metros 5) (eq ?prop:predicate ?Y14) (eq ?prop:time 1)))
(find-all-instances ((?prop Proposition) (?Y15 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y15) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y16 TienePosicion)) (and (eq ?prop:subject [c2]) (eq ?prop:predicate ?Y16) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y17 TieneVelocidad)) (and (eq ?prop:subject [c1]) (eq ?Y17:mps 1) (eq ?prop:predicate ?Y17) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y18 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y18:metros 7) (eq ?prop:predicate ?Y18) (eq ?prop:time 3)))
(find-all-instances ((?prop Proposition) (?Y19 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y19:kgs 50) (eq ?prop:predicate ?Y19) (eq ?prop:time 9)))
(find-all-instances ((?prop Proposition) (?Y20 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y20:kgs 50) (eq ?prop:predicate ?Y20) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y21 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y21) (eq ?prop:time 1)))
(find-all-instances ((?prop Proposition) (?Y22 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y22:otro [c2]) (eq ?prop:predicate ?Y22) (eq ?prop:time 19)))
(find-all-instances ((?prop Proposition) (?Y23 EstaADistancia)) (and (eq ?prop:subject [c2]) (eq ?Y23:otro [c1]) (eq ?prop:predicate ?Y23) (eq ?prop:time 19)))
(find-all-instances ((?prop Proposition) (?Y24 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y24:otro [c2]) (eq ?prop:predicate ?Y24) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y25 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y25) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y26 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y26) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y27 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y27)))
(find-all-instances ((?prop Proposition) (?Y28 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y28:otro [c2]) (eq ?prop:predicate ?Y28)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot metros (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot metros (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot mps (type ?VARIABLE)))
(defclass Anda (is-a TieneVelocidad) (slot longitud_zancada (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot mps2 (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot newton (type ?VARIABLE)))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq (class ?X3) Cuerpo)|:(subclassp (class ?X3) Cuerpo)) (predicate ?Y2&:(eq (class ?Y2) TienePosicion)|:(subclassp (class ?Y2) TienePosicion)) (time ?X4))) (test (< ?X4 100)) (test (neq (send ?Y1 get-metros) (send ?Y2 get-metros))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of EstaADistancia (otro ?X3) (metros (- (send ?Y1 get-metros) (send ?Y2 get-metros))))) (time ?X4)))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TienePosicion)|:(subclassp (class ?Y3) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneVelocidad)|:(subclassp (class ?Y4) TieneVelocidad)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (metros (+ (send ?Y3 get-metros) (send ?Y4 get-mps))))) (time (+ ?X4 1))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) TieneVelocidad)|:(subclassp (class ?Y5) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneAceleracion)|:(subclassp (class ?Y6) TieneAceleracion)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (mps (+ (send ?Y5 get-mps) (send ?Y6 get-mps2))))) (time (+ ?X4 1))))
(defrule r4 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y7&:(eq (class ?Y7) SufreFuerza)|:(subclassp (class ?Y7) SufreFuerza)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y8&:(eq (class ?Y8) TieneAceleracion)|:(subclassp (class ?Y8) TieneAceleracion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y9&:(eq (class ?Y9) TieneMasa)|:(subclassp (class ?Y9) TieneMasa)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneAceleracion (mps2 (+ (send ?Y8 get-mps2) (** (/ (send ?Y7 get-newton) (send ?Y9 get-kgs)) (/ 1 2)))))) (time (+ ?X4 1))))
(defrule r5 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y10&:(eq (class ?Y10) EstaADistancia)|:(subclassp (class ?Y10) EstaADistancia)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y11&:(eq (class ?Y11) TieneMasa)|:(subclassp (class ?Y11) TieneMasa)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq ?X3 (send ?Y10 get-otro))) (predicate ?Y12&:(eq (class ?Y12) TieneMasa)|:(subclassp (class ?Y12) TieneMasa)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of SufreFuerza (newton (/ (* (send ?Y11 get-kgs) (send ?Y12 get-kgs)) (** (send ?Y10 get-metros) 2))))) (time (+ ?X4 1))))
(defrule r6 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y13&:(eq (class ?Y13) TieneMasa)|:(subclassp (class ?Y13) TieneMasa)) (time ?X3))) (test (< ?X3 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y13 get-kgs)))) (time (+ ?X3 1))))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs 100))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs 50))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (metros 5))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (metros 10))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (mps 1))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneVelocidad (mps 1))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (mps2 0))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (mps2 0))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (newton 0))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (newton 0))) (time 1))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(find-all-instances ((?prop Proposition) (?Y14 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y14:metros 5) (eq ?prop:predicate ?Y14) (eq ?prop:time 1)))
(find-all-instances ((?prop Proposition) (?Y15 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y15) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y16 TienePosicion)) (and (eq ?prop:subject [c2]) (eq ?prop:predicate ?Y16) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y17 TieneVelocidad)) (and (eq ?prop:subject [c1]) (eq ?Y17:mps 1) (eq ?prop:predicate ?Y17) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y18 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y18:metros 7) (eq ?prop:predicate ?Y18) (eq ?prop:time 3)))
(find-all-instances ((?prop Proposition) (?Y19 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y19:kgs 50) (eq ?prop:predicate ?Y19) (eq ?prop:time 9)))
(find-all-instances ((?prop Proposition) (?Y20 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y20:kgs 50) (eq ?prop:predicate ?Y20) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y21 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y21) (eq ?prop:time 1)))
(find-all-instances ((?prop Proposition) (?Y22 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y22:otro [c2]) (eq ?prop:predicate ?Y22) (eq ?prop:time 19)))
(find-all-instances ((?prop Proposition) (?Y23 EstaADistancia)) (and (eq ?prop:subject [c2]) (eq ?Y23:otro [c1]) (eq ?prop:predicate ?Y23) (eq ?prop:time 19)))
(find-all-instances ((?prop Proposition) (?Y24 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y24:otro [c2]) (eq ?prop:predicate ?Y24) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y25 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y25) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y26 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y26) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y27 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y27)))
(find-all-instances ((?prop Proposition) (?Y28 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y28:otro [c2]) (eq ?prop:predicate ?Y28)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot metros (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot metros (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot mps (type ?VARIABLE)))
(defclass Anda (is-a TieneVelocidad) (slot longitud_zancada (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot mps2 (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot newton (type ?VARIABLE)))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq (class ?X3) Cuerpo)|:(subclassp (class ?X3) Cuerpo)) (predicate ?Y2&:(eq (class ?Y2) TienePosicion)|:(subclassp (class ?Y2) TienePosicion)) (time ?X4))) (test (< ?X4 100)) (test (neq (send ?Y1 get-metros) (send ?Y2 get-metros))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of EstaADistancia (otro ?X3) (metros (- (send ?Y1 get-metros) (send ?Y2 get-metros))))) (time ?X4)))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TienePosicion)|:(subclassp (class ?Y3) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneVelocidad)|:(subclassp (class ?Y4) TieneVelocidad)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (metros (+ (send ?Y3 get-metros) (send ?Y4 get-mps))))) (time (+ ?X4 1))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) TieneVelocidad)|:(subclassp (class ?Y5) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneAceleracion)|:(subclassp (class ?Y6) TieneAceleracion)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (mps (+ (send ?Y5 get-mps) (send ?Y6 get-mps2))))) (time (+ ?X4 1))))
(defrule r4 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y7&:(eq (class ?Y7) SufreFuerza)|:(subclassp (class ?Y7) SufreFuerza)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y8&:(eq (class ?Y8) TieneAceleracion)|:(subclassp (class ?Y8) TieneAceleracion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y9&:(eq (class ?Y9) TieneMasa)|:(subclassp (class ?Y9) TieneMasa)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneAceleracion (mps2 (+ (send ?Y8 get-mps2) (** (/ (send ?Y7 get-newton) (send ?Y9 get-kgs)) (/ 1 2)))))) (time (+ ?X4 1))))
(defrule r5 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y10&:(eq (class ?Y10) EstaADistancia)|:(subclassp (class ?Y10) EstaADistancia)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y11&:(eq (class ?Y11) TieneMasa)|:(subclassp (class ?Y11) TieneMasa)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq ?X3 (send ?Y10 get-otro))) (predicate ?Y12&:(eq (class ?Y12) TieneMasa)|:(subclassp (class ?Y12) TieneMasa)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of SufreFuerza (newton (/ (* (send ?Y11 get-kgs) (send ?Y12 get-kgs)) (** (send ?Y10 get-metros) 2))))) (time (+ ?X4 1))))
(defrule r6 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y13&:(eq (class ?Y13) TieneMasa)|:(subclassp (class ?Y13) TieneMasa)) (time ?X3))) (test (< ?X3 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y13 get-kgs)))) (time (+ ?X3 1))))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs 100))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs 50))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (metros 5))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (metros 10))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (mps 1))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneVelocidad (mps 1))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (mps2 0))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (mps2 0))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (newton 0))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (newton 0))) (time 1))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(find-all-instances ((?prop Proposition) (?Y14 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y14:metros 5) (eq ?prop:predicate ?Y14) (eq ?prop:time 1)))
(find-all-instances ((?prop Proposition) (?Y15 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y15) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y16 TienePosicion)) (and (eq ?prop:subject [c2]) (eq ?prop:predicate ?Y16) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y17 TieneVelocidad)) (and (eq ?prop:subject [c1]) (eq ?Y17:mps 1) (eq ?prop:predicate ?Y17) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y18 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y18:metros 7) (eq ?prop:predicate ?Y18) (eq ?prop:time 3)))
(find-all-instances ((?prop Proposition) (?Y19 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y19:kgs 50) (eq ?prop:predicate ?Y19) (eq ?prop:time 9)))
(find-all-instances ((?prop Proposition) (?Y20 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y20:kgs 50) (eq ?prop:predicate ?Y20) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y21 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y21) (eq ?prop:time 1)))
(find-all-instances ((?prop Proposition) (?Y22 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y22:otro [c2]) (eq ?prop:predicate ?Y22) (eq ?prop:time 19)))
(find-all-instances ((?prop Proposition) (?Y23 EstaADistancia)) (and (eq ?prop:subject [c2]) (eq ?Y23:otro [c1]) (eq ?prop:predicate ?Y23) (eq ?prop:time 19)))
(find-all-instances ((?prop Proposition) (?Y24 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y24:otro [c2]) (eq ?prop:predicate ?Y24) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y25 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y25) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y26 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y26) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y27 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y27)))
(find-all-instances ((?prop Proposition) (?Y28 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y28:otro [c2]) (eq ?prop:predicate ?Y28)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot metros (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot metros (type ?VARIABLE)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot metros (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot metros (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot mps (type ?VARIABLE)))
(defclass Anda (is-a TieneVelocidad) (slot longitud_zancada (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot mps2 (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot newton (type ?VARIABLE)))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs 100))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs 50))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (metros 5))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (metros 10))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (mps 1))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneVelocidad (mps 1))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (mps2 0))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (mps2 0))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (newton 0))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (newton 0))) (time 1))
(find-all-instances ((?prop Proposition) (?Y1 TienePosicion)) (and (eq ?prop:subject [c2]) (eq ?Y1:metros 10) (eq ?prop:predicate ?Y1) (eq ?prop:time 1)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot metros (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot metros (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot mps (type ?VARIABLE)))
(defclass Anda (is-a TieneVelocidad) (slot longitud_zancada (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot mps2 (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot newton (type ?VARIABLE)))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq (class ?X3) Cuerpo)|:(subclassp (class ?X3) Cuerpo)) (predicate ?Y2&:(eq (class ?Y2) TienePosicion)|:(subclassp (class ?Y2) TienePosicion)) (time ?X4))) (test (< ?X4 100)) (test (neq (send ?Y1 get-metros) (send ?Y2 get-metros))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of EstaADistancia (otro ?X3) (metros (- (send ?Y1 get-metros) (send ?Y2 get-metros))))) (time ?X4)))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TienePosicion)|:(subclassp (class ?Y3) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneVelocidad)|:(subclassp (class ?Y4) TieneVelocidad)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (metros (+ (send ?Y3 get-metros) (send ?Y4 get-mps))))) (time (+ ?X4 1))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) TieneVelocidad)|:(subclassp (class ?Y5) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneAceleracion)|:(subclassp (class ?Y6) TieneAceleracion)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (mps (+ (send ?Y5 get-mps) (send ?Y6 get-mps2))))) (time (+ ?X4 1))))
(defrule r4 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y7&:(eq (class ?Y7) SufreFuerza)|:(subclassp (class ?Y7) SufreFuerza)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y8&:(eq (class ?Y8) TieneAceleracion)|:(subclassp (class ?Y8) TieneAceleracion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y9&:(eq (class ?Y9) TieneMasa)|:(subclassp (class ?Y9) TieneMasa)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneAceleracion (mps2 (+ (send ?Y8 get-mps2) (** (/ (send ?Y7 get-newton) (send ?Y9 get-kgs)) (/ 1 2)))))) (time (+ ?X4 1))))
(defrule r5 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y10&:(eq (class ?Y10) EstaADistancia)|:(subclassp (class ?Y10) EstaADistancia)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y11&:(eq (class ?Y11) TieneMasa)|:(subclassp (class ?Y11) TieneMasa)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq ?X3 (send ?Y10 get-otro))) (predicate ?Y12&:(eq (class ?Y12) TieneMasa)|:(subclassp (class ?Y12) TieneMasa)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of SufreFuerza (newton (/ (* (send ?Y11 get-kgs) (send ?Y12 get-kgs)) (** (send ?Y10 get-metros) 2))))) (time (+ ?X4 1))))
(defrule r6 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y13&:(eq (class ?Y13) TieneMasa)|:(subclassp (class ?Y13) TieneMasa)) (time ?X3))) (test (< ?X3 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y13 get-kgs)))) (time (+ ?X3 1))))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs 100))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs 50))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (metros 5))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (metros 10))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (mps 1))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneVelocidad (mps 1))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (mps2 0))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (mps2 0))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (newton 0))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (newton 0))) (time 1))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(find-all-instances ((?prop Proposition) (?Y14 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y14:metros 5) (eq ?prop:predicate ?Y14) (eq ?prop:time 1)))
(find-all-instances ((?prop Proposition) (?Y15 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y15) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y16 TienePosicion)) (and (eq ?prop:subject [c2]) (eq ?prop:predicate ?Y16) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y17 TieneVelocidad)) (and (eq ?prop:subject [c1]) (eq ?Y17:mps 1) (eq ?prop:predicate ?Y17) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y18 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y18:metros 7) (eq ?prop:predicate ?Y18) (eq ?prop:time 3)))
(find-all-instances ((?prop Proposition) (?Y19 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y19:kgs 50) (eq ?prop:predicate ?Y19) (eq ?prop:time 9)))
(find-all-instances ((?prop Proposition) (?Y20 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y20:kgs 50) (eq ?prop:predicate ?Y20) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y21 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y21) (eq ?prop:time 1)))
(find-all-instances ((?prop Proposition) (?Y22 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y22:otro [c2]) (eq ?prop:predicate ?Y22) (eq ?prop:time 19)))
(find-all-instances ((?prop Proposition) (?Y23 EstaADistancia)) (and (eq ?prop:subject [c2]) (eq ?Y23:otro [c1]) (eq ?prop:predicate ?Y23) (eq ?prop:time 19)))
(find-all-instances ((?prop Proposition) (?Y24 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y24:otro [c2]) (eq ?prop:predicate ?Y24) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y25 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y25) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y26 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y26) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y27 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y27)))
(find-all-instances ((?prop Proposition) (?Y28 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y28:otro [c2]) (eq ?prop:predicate ?Y28)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot metros (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot metros (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot mps (type ?VARIABLE)))
(defclass Anda (is-a TieneVelocidad) (slot longitud_zancada (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot mps2 (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot newton (type ?VARIABLE)))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq (class ?X3) Cuerpo)|:(subclassp (class ?X3) Cuerpo)) (predicate ?Y2&:(eq (class ?Y2) TienePosicion)|:(subclassp (class ?Y2) TienePosicion)) (time ?X4))) (test (< ?X4 100)) (test (neq (send ?Y1 get-metros) (send ?Y2 get-metros))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of EstaADistancia (otro ?X3) (metros (- (send ?Y1 get-metros) (send ?Y2 get-metros))))) (time ?X4)))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TienePosicion)|:(subclassp (class ?Y3) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneVelocidad)|:(subclassp (class ?Y4) TieneVelocidad)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (metros (+ (send ?Y3 get-metros) (send ?Y4 get-mps))))) (time (+ ?X4 1))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) TieneVelocidad)|:(subclassp (class ?Y5) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneAceleracion)|:(subclassp (class ?Y6) TieneAceleracion)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (mps (+ (send ?Y5 get-mps) (send ?Y6 get-mps2))))) (time (+ ?X4 1))))
(defrule r4 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y7&:(eq (class ?Y7) SufreFuerza)|:(subclassp (class ?Y7) SufreFuerza)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y8&:(eq (class ?Y8) TieneAceleracion)|:(subclassp (class ?Y8) TieneAceleracion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y9&:(eq (class ?Y9) TieneMasa)|:(subclassp (class ?Y9) TieneMasa)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneAceleracion (mps2 (+ (send ?Y8 get-mps2) (** (/ (send ?Y7 get-newton) (send ?Y9 get-kgs)) (/ 1 2)))))) (time (+ ?X4 1))))
(defrule r5 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y10&:(eq (class ?Y10) EstaADistancia)|:(subclassp (class ?Y10) EstaADistancia)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y11&:(eq (class ?Y11) TieneMasa)|:(subclassp (class ?Y11) TieneMasa)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq ?X3 (send ?Y10 get-otro))) (predicate ?Y12&:(eq (class ?Y12) TieneMasa)|:(subclassp (class ?Y12) TieneMasa)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of SufreFuerza (newton (/ (* (send ?Y11 get-kgs) (send ?Y12 get-kgs)) (** (send ?Y10 get-metros) 2))))) (time (+ ?X4 1))))
(defrule r6 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y13&:(eq (class ?Y13) TieneMasa)|:(subclassp (class ?Y13) TieneMasa)) (time ?X3))) (test (< ?X3 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y13 get-kgs)))) (time (+ ?X3 1))))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs 100))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs 50))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (metros 5))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (metros 10))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (mps 1))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneVelocidad (mps 1))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (mps2 0))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (mps2 0))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (newton 0))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (newton 0))) (time 1))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(find-all-instances ((?prop Proposition) (?Y14 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y14:metros 5) (eq ?prop:predicate ?Y14) (eq ?prop:time 1)))
(find-all-instances ((?prop Proposition) (?Y15 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y15) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y16 TienePosicion)) (and (eq ?prop:subject [c2]) (eq ?prop:predicate ?Y16) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y17 TieneVelocidad)) (and (eq ?prop:subject [c1]) (eq ?Y17:mps 1) (eq ?prop:predicate ?Y17) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y18 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y18:metros 7) (eq ?prop:predicate ?Y18) (eq ?prop:time 3)))
(find-all-instances ((?prop Proposition) (?Y19 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y19:kgs 50) (eq ?prop:predicate ?Y19) (eq ?prop:time 9)))
(find-all-instances ((?prop Proposition) (?Y20 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y20:kgs 50) (eq ?prop:predicate ?Y20) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y21 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y21) (eq ?prop:time 1)))
(find-all-instances ((?prop Proposition) (?Y22 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y22:otro [c2]) (eq ?prop:predicate ?Y22) (eq ?prop:time 19)))
(find-all-instances ((?prop Proposition) (?Y23 EstaADistancia)) (and (eq ?prop:subject [c2]) (eq ?Y23:otro [c1]) (eq ?prop:predicate ?Y23) (eq ?prop:time 19)))
(find-all-instances ((?prop Proposition) (?Y24 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y24:otro [c2]) (eq ?prop:predicate ?Y24) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y25 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y25) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y26 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y26) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y27 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y27)))
(find-all-instances ((?prop Proposition) (?Y28 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y28:otro [c2]) (eq ?prop:predicate ?Y28)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot metros (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot metros (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot mps (type ?VARIABLE)))
(defclass Anda (is-a TieneVelocidad) (slot longitud_zancada (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot mps2 (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot newton (type ?VARIABLE)))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq (class ?X3) Cuerpo)|:(subclassp (class ?X3) Cuerpo)) (predicate ?Y2&:(eq (class ?Y2) TienePosicion)|:(subclassp (class ?Y2) TienePosicion)) (time ?X4))) (test (< ?X4 100)) (test (neq (send ?Y1 get-metros) (send ?Y2 get-metros))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of EstaADistancia (otro ?X3) (metros (- (send ?Y1 get-metros) (send ?Y2 get-metros))))) (time ?X4)))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TienePosicion)|:(subclassp (class ?Y3) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneVelocidad)|:(subclassp (class ?Y4) TieneVelocidad)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (metros (+ (send ?Y3 get-metros) (send ?Y4 get-mps))))) (time (+ ?X4 1))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) TieneVelocidad)|:(subclassp (class ?Y5) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneAceleracion)|:(subclassp (class ?Y6) TieneAceleracion)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (mps (+ (send ?Y5 get-mps) (send ?Y6 get-mps2))))) (time (+ ?X4 1))))
(defrule r4 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y7&:(eq (class ?Y7) SufreFuerza)|:(subclassp (class ?Y7) SufreFuerza)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y8&:(eq (class ?Y8) TieneAceleracion)|:(subclassp (class ?Y8) TieneAceleracion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y9&:(eq (class ?Y9) TieneMasa)|:(subclassp (class ?Y9) TieneMasa)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneAceleracion (mps2 (+ (send ?Y8 get-mps2) (** (/ (send ?Y7 get-newton) (send ?Y9 get-kgs)) (/ 1 2)))))) (time (+ ?X4 1))))
(defrule r5 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y10&:(eq (class ?Y10) EstaADistancia)|:(subclassp (class ?Y10) EstaADistancia)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y11&:(eq (class ?Y11) TieneMasa)|:(subclassp (class ?Y11) TieneMasa)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq ?X3 (send ?Y10 get-otro))) (predicate ?Y12&:(eq (class ?Y12) TieneMasa)|:(subclassp (class ?Y12) TieneMasa)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of SufreFuerza (newton (/ (* (send ?Y11 get-kgs) (send ?Y12 get-kgs)) (** (send ?Y10 get-metros) 2))))) (time (+ ?X4 1))))
(defrule r6 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y13&:(eq (class ?Y13) TieneMasa)|:(subclassp (class ?Y13) TieneMasa)) (time ?X3))) (test (< ?X3 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y13 get-kgs)))) (time (+ ?X3 1))))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs 100))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs 50))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (metros 5))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (metros 10))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (mps 1))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneVelocidad (mps 1))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (mps2 0))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (mps2 0))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (newton 0))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (newton 0))) (time 1))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(find-all-instances ((?prop Proposition) (?Y14 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y14:metros 5) (eq ?prop:predicate ?Y14) (eq ?prop:time 1)))
(find-all-instances ((?prop Proposition) (?Y15 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y15) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y16 TienePosicion)) (and (eq ?prop:subject [c2]) (eq ?prop:predicate ?Y16) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y17 TieneVelocidad)) (and (eq ?prop:subject [c1]) (eq ?Y17:mps 1) (eq ?prop:predicate ?Y17) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y18 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y18:metros 7) (eq ?prop:predicate ?Y18) (eq ?prop:time 3)))
(find-all-instances ((?prop Proposition) (?Y19 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y19:kgs 50) (eq ?prop:predicate ?Y19) (eq ?prop:time 9)))
(find-all-instances ((?prop Proposition) (?Y20 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y20:kgs 50) (eq ?prop:predicate ?Y20) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y21 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y21) (eq ?prop:time 1)))
(find-all-instances ((?prop Proposition) (?Y22 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y22:otro [c2]) (eq ?prop:predicate ?Y22) (eq ?prop:time 19)))
(find-all-instances ((?prop Proposition) (?Y23 EstaADistancia)) (and (eq ?prop:subject [c2]) (eq ?Y23:otro [c1]) (eq ?prop:predicate ?Y23) (eq ?prop:time 19)))
(find-all-instances ((?prop Proposition) (?Y24 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y24:otro [c2]) (eq ?prop:predicate ?Y24) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y25 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y25) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y26 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y26) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y27 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y27)))
(find-all-instances ((?prop Proposition) (?Y28 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y28:otro [c2]) (eq ?prop:predicate ?Y28)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot metros (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot metros (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot mps (type ?VARIABLE)))
(defclass Anda (is-a TieneVelocidad) (slot longitud_zancada (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot mps2 (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot newton (type ?VARIABLE)))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq (class ?X3) Cuerpo)|:(subclassp (class ?X3) Cuerpo)) (predicate ?Y2&:(eq (class ?Y2) TienePosicion)|:(subclassp (class ?Y2) TienePosicion)) (time ?X4))) (test (< ?X4 100)) (test (neq (send ?Y1 get-metros) (send ?Y2 get-metros))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of EstaADistancia (otro ?X3) (metros (- (send ?Y1 get-metros) (send ?Y2 get-metros))))) (time ?X4)))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TienePosicion)|:(subclassp (class ?Y3) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneVelocidad)|:(subclassp (class ?Y4) TieneVelocidad)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (metros (+ (send ?Y3 get-metros) (send ?Y4 get-mps))))) (time (+ ?X4 1))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) TieneVelocidad)|:(subclassp (class ?Y5) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneAceleracion)|:(subclassp (class ?Y6) TieneAceleracion)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (mps (+ (send ?Y5 get-mps) (send ?Y6 get-mps2))))) (time (+ ?X4 1))))
(defrule r4 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y7&:(eq (class ?Y7) SufreFuerza)|:(subclassp (class ?Y7) SufreFuerza)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y8&:(eq (class ?Y8) TieneAceleracion)|:(subclassp (class ?Y8) TieneAceleracion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y9&:(eq (class ?Y9) TieneMasa)|:(subclassp (class ?Y9) TieneMasa)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneAceleracion (mps2 (+ (send ?Y8 get-mps2) (** (/ (send ?Y7 get-newton) (send ?Y9 get-kgs)) (/ 1 2)))))) (time (+ ?X4 1))))
(defrule r5 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y10&:(eq (class ?Y10) EstaADistancia)|:(subclassp (class ?Y10) EstaADistancia)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y11&:(eq (class ?Y11) TieneMasa)|:(subclassp (class ?Y11) TieneMasa)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq ?X3 (send ?Y10 get-otro))) (predicate ?Y12&:(eq (class ?Y12) TieneMasa)|:(subclassp (class ?Y12) TieneMasa)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of SufreFuerza (newton (/ (* (send ?Y11 get-kgs) (send ?Y12 get-kgs)) (** (send ?Y10 get-metros) 2))))) (time (+ ?X4 1))))
(defrule r6 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y13&:(eq (class ?Y13) TieneMasa)|:(subclassp (class ?Y13) TieneMasa)) (time ?X3))) (test (< ?X3 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y13 get-kgs)))) (time (+ ?X3 1))))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs 100))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs 50))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (metros 5))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (metros 10))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (mps 1))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneVelocidad (mps 1))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (mps2 0))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (mps2 0))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (newton 0))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (newton 0))) (time 1))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(find-all-instances ((?prop Proposition) (?Y14 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y14:metros 5) (eq ?prop:predicate ?Y14) (eq ?prop:time 1)))
(find-all-instances ((?prop Proposition) (?Y15 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y15) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y16 TienePosicion)) (and (eq ?prop:subject [c2]) (eq ?prop:predicate ?Y16) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y17 TieneVelocidad)) (and (eq ?prop:subject [c1]) (eq ?Y17:mps 1) (eq ?prop:predicate ?Y17) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y18 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y18:metros 7) (eq ?prop:predicate ?Y18) (eq ?prop:time 3)))
(find-all-instances ((?prop Proposition) (?Y19 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y19:kgs 50) (eq ?prop:predicate ?Y19) (eq ?prop:time 9)))
(find-all-instances ((?prop Proposition) (?Y20 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y20:kgs 50) (eq ?prop:predicate ?Y20) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y21 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y21) (eq ?prop:time 1)))
(find-all-instances ((?prop Proposition) (?Y22 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y22:otro [c2]) (eq ?prop:predicate ?Y22) (eq ?prop:time 19)))
(find-all-instances ((?prop Proposition) (?Y23 EstaADistancia)) (and (eq ?prop:subject [c2]) (eq ?Y23:otro [c1]) (eq ?prop:predicate ?Y23) (eq ?prop:time 19)))
(find-all-instances ((?prop Proposition) (?Y24 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y24:otro [c2]) (eq ?prop:predicate ?Y24) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y25 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y25) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y26 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y26) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y27 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y27)))
(find-all-instances ((?prop Proposition) (?Y28 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y28:otro [c2]) (eq ?prop:predicate ?Y28)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot metros (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot metros (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot mps (type ?VARIABLE)))
(defclass Anda (is-a TieneVelocidad) (slot longitud_zancada (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot mps2 (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot newton (type ?VARIABLE)))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq (class ?X3) Cuerpo)|:(subclassp (class ?X3) Cuerpo)) (predicate ?Y2&:(eq (class ?Y2) TienePosicion)|:(subclassp (class ?Y2) TienePosicion)) (time ?X4))) (test (< ?X4 100)) (test (neq (send ?Y1 get-metros) (send ?Y2 get-metros))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of EstaADistancia (otro ?X3) (metros (- (send ?Y1 get-metros) (send ?Y2 get-metros))))) (time ?X4)))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TienePosicion)|:(subclassp (class ?Y3) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneVelocidad)|:(subclassp (class ?Y4) TieneVelocidad)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (metros (+ (send ?Y3 get-metros) (send ?Y4 get-mps))))) (time (+ ?X4 1))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) TieneVelocidad)|:(subclassp (class ?Y5) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneAceleracion)|:(subclassp (class ?Y6) TieneAceleracion)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (mps (+ (send ?Y5 get-mps) (send ?Y6 get-mps2))))) (time (+ ?X4 1))))
(defrule r4 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y7&:(eq (class ?Y7) SufreFuerza)|:(subclassp (class ?Y7) SufreFuerza)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y8&:(eq (class ?Y8) TieneAceleracion)|:(subclassp (class ?Y8) TieneAceleracion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y9&:(eq (class ?Y9) TieneMasa)|:(subclassp (class ?Y9) TieneMasa)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneAceleracion (mps2 (+ (send ?Y8 get-mps2) (** (/ (send ?Y7 get-newton) (send ?Y9 get-kgs)) (/ 1 2)))))) (time (+ ?X4 1))))
(defrule r5 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y10&:(eq (class ?Y10) EstaADistancia)|:(subclassp (class ?Y10) EstaADistancia)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y11&:(eq (class ?Y11) TieneMasa)|:(subclassp (class ?Y11) TieneMasa)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq ?X3 (send ?Y10 get-otro))) (predicate ?Y12&:(eq (class ?Y12) TieneMasa)|:(subclassp (class ?Y12) TieneMasa)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of SufreFuerza (newton (/ (* (send ?Y11 get-kgs) (send ?Y12 get-kgs)) (** (send ?Y10 get-metros) 2))))) (time (+ ?X4 1))))
(defrule r6 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y13&:(eq (class ?Y13) TieneMasa)|:(subclassp (class ?Y13) TieneMasa)) (time ?X3))) (test (< ?X3 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y13 get-kgs)))) (time (+ ?X3 1))))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs 100))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs 50))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (metros 5))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (metros 10))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (mps 1))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneVelocidad (mps 1))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (mps2 0))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (mps2 0))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (newton 0))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (newton 0))) (time 1))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(find-all-instances ((?prop Proposition) (?Y14 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y14:metros 5) (eq ?prop:predicate ?Y14) (eq ?prop:time 1)))
(find-all-instances ((?prop Proposition) (?Y15 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y15) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y16 TienePosicion)) (and (eq ?prop:subject [c2]) (eq ?prop:predicate ?Y16) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y17 TieneVelocidad)) (and (eq ?prop:subject [c1]) (eq ?Y17:mps 1) (eq ?prop:predicate ?Y17) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y18 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y18:metros 7) (eq ?prop:predicate ?Y18) (eq ?prop:time 3)))
(find-all-instances ((?prop Proposition) (?Y19 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y19:kgs 50) (eq ?prop:predicate ?Y19) (eq ?prop:time 9)))
(find-all-instances ((?prop Proposition) (?Y20 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y20:kgs 50) (eq ?prop:predicate ?Y20) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y21 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y21) (eq ?prop:time 1)))
(find-all-instances ((?prop Proposition) (?Y22 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y22:otro [c2]) (eq ?prop:predicate ?Y22) (eq ?prop:time 19)))
(find-all-instances ((?prop Proposition) (?Y23 EstaADistancia)) (and (eq ?prop:subject [c2]) (eq ?Y23:otro [c1]) (eq ?prop:predicate ?Y23) (eq ?prop:time 19)))
(find-all-instances ((?prop Proposition) (?Y24 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y24:otro [c2]) (eq ?prop:predicate ?Y24) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y25 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y25) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y26 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y26) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y27 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y27)))
(find-all-instances ((?prop Proposition) (?Y28 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y28:otro [c2]) (eq ?prop:predicate ?Y28)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot metros (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot metros (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot mps (type ?VARIABLE)))
(defclass Anda (is-a TieneVelocidad) (slot longitud_zancada (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot mps2 (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot newton (type ?VARIABLE)))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq (class ?X3) Cuerpo)|:(subclassp (class ?X3) Cuerpo)) (predicate ?Y2&:(eq (class ?Y2) TienePosicion)|:(subclassp (class ?Y2) TienePosicion)) (time ?X4))) (test (< ?X4 100)) (test (neq (send ?Y1 get-metros) (send ?Y2 get-metros))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of EstaADistancia (otro ?X3) (metros (- (send ?Y1 get-metros) (send ?Y2 get-metros))))) (time ?X4)))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TienePosicion)|:(subclassp (class ?Y3) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneVelocidad)|:(subclassp (class ?Y4) TieneVelocidad)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (metros (+ (send ?Y3 get-metros) (send ?Y4 get-mps))))) (time (+ ?X4 1))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) TieneVelocidad)|:(subclassp (class ?Y5) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneAceleracion)|:(subclassp (class ?Y6) TieneAceleracion)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (mps (+ (send ?Y5 get-mps) (send ?Y6 get-mps2))))) (time (+ ?X4 1))))
(defrule r4 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y7&:(eq (class ?Y7) SufreFuerza)|:(subclassp (class ?Y7) SufreFuerza)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y8&:(eq (class ?Y8) TieneAceleracion)|:(subclassp (class ?Y8) TieneAceleracion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y9&:(eq (class ?Y9) TieneMasa)|:(subclassp (class ?Y9) TieneMasa)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneAceleracion (mps2 (+ (send ?Y8 get-mps2) (** (/ (send ?Y7 get-newton) (send ?Y9 get-kgs)) (/ 1 2)))))) (time (+ ?X4 1))))
(defrule r5 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y10&:(eq (class ?Y10) EstaADistancia)|:(subclassp (class ?Y10) EstaADistancia)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y11&:(eq (class ?Y11) TieneMasa)|:(subclassp (class ?Y11) TieneMasa)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq ?X3 (send ?Y10 get-otro))) (predicate ?Y12&:(eq (class ?Y12) TieneMasa)|:(subclassp (class ?Y12) TieneMasa)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of SufreFuerza (newton (/ (* (send ?Y11 get-kgs) (send ?Y12 get-kgs)) (** (send ?Y10 get-metros) 2))))) (time (+ ?X4 1))))
(defrule r6 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y13&:(eq (class ?Y13) TieneMasa)|:(subclassp (class ?Y13) TieneMasa)) (time ?X3))) (test (< ?X3 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y13 get-kgs)))) (time (+ ?X3 1))))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs 100))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs 50))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (metros 5))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (metros 10))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (mps 1))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneVelocidad (mps 1))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (mps2 0))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (mps2 0))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (newton 0))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (newton 0))) (time 1))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(find-all-instances ((?prop Proposition) (?Y14 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y14:metros 5) (eq ?prop:predicate ?Y14) (eq ?prop:time 1)))
(find-all-instances ((?prop Proposition) (?Y15 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y15) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y16 TienePosicion)) (and (eq ?prop:subject [c2]) (eq ?prop:predicate ?Y16) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y17 TieneVelocidad)) (and (eq ?prop:subject [c1]) (eq ?Y17:mps 1) (eq ?prop:predicate ?Y17) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y18 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y18:metros 7) (eq ?prop:predicate ?Y18) (eq ?prop:time 3)))
(find-all-instances ((?prop Proposition) (?Y19 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y19:kgs 50) (eq ?prop:predicate ?Y19) (eq ?prop:time 9)))
(find-all-instances ((?prop Proposition) (?Y20 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y20:kgs 50) (eq ?prop:predicate ?Y20) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y21 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y21) (eq ?prop:time 1)))
(find-all-instances ((?prop Proposition) (?Y22 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y22:otro [c2]) (eq ?prop:predicate ?Y22) (eq ?prop:time 19)))
(find-all-instances ((?prop Proposition) (?Y23 EstaADistancia)) (and (eq ?prop:subject [c2]) (eq ?Y23:otro [c1]) (eq ?prop:predicate ?Y23) (eq ?prop:time 19)))
(find-all-instances ((?prop Proposition) (?Y24 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y24:otro [c2]) (eq ?prop:predicate ?Y24) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y25 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y25) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y26 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y26) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y27 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y27)))
(find-all-instances ((?prop Proposition) (?Y28 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y28:otro [c2]) (eq ?prop:predicate ?Y28)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot metros (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot metros (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot mps (type ?VARIABLE)))
(defclass Anda (is-a TieneVelocidad) (slot longitud_zancada (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot mps2 (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot newton (type ?VARIABLE)))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq (class ?X3) Cuerpo)|:(subclassp (class ?X3) Cuerpo)) (predicate ?Y2&:(eq (class ?Y2) TienePosicion)|:(subclassp (class ?Y2) TienePosicion)) (time ?X4))) (test (< ?X4 100)) (test (neq (send ?Y1 get-metros) (send ?Y2 get-metros))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of EstaADistancia (otro ?X3) (metros (- (send ?Y1 get-metros) (send ?Y2 get-metros))))) (time ?X4)))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TienePosicion)|:(subclassp (class ?Y3) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneVelocidad)|:(subclassp (class ?Y4) TieneVelocidad)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (metros (+ (send ?Y3 get-metros) (send ?Y4 get-mps))))) (time (+ ?X4 1))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) TieneVelocidad)|:(subclassp (class ?Y5) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneAceleracion)|:(subclassp (class ?Y6) TieneAceleracion)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (mps (+ (send ?Y5 get-mps) (send ?Y6 get-mps2))))) (time (+ ?X4 1))))
(defrule r4 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y7&:(eq (class ?Y7) SufreFuerza)|:(subclassp (class ?Y7) SufreFuerza)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y8&:(eq (class ?Y8) TieneAceleracion)|:(subclassp (class ?Y8) TieneAceleracion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y9&:(eq (class ?Y9) TieneMasa)|:(subclassp (class ?Y9) TieneMasa)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneAceleracion (mps2 (+ (send ?Y8 get-mps2) (** (/ (send ?Y7 get-newton) (send ?Y9 get-kgs)) (/ 1 2)))))) (time (+ ?X4 1))))
(defrule r5 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y10&:(eq (class ?Y10) EstaADistancia)|:(subclassp (class ?Y10) EstaADistancia)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y11&:(eq (class ?Y11) TieneMasa)|:(subclassp (class ?Y11) TieneMasa)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq ?X3 (send ?Y10 get-otro))) (predicate ?Y12&:(eq (class ?Y12) TieneMasa)|:(subclassp (class ?Y12) TieneMasa)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of SufreFuerza (newton (/ (* (send ?Y11 get-kgs) (send ?Y12 get-kgs)) (** (send ?Y10 get-metros) 2))))) (time (+ ?X4 1))))
(defrule r6 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y13&:(eq (class ?Y13) TieneMasa)|:(subclassp (class ?Y13) TieneMasa)) (time ?X3))) (test (< ?X3 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y13 get-kgs)))) (time (+ ?X3 1))))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs 100))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs 50))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (metros 5))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (metros 10))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (mps 1))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneVelocidad (mps 1))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (mps2 0))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (mps2 0))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (newton 0))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (newton 0))) (time 1))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(find-all-instances ((?prop Proposition) (?Y14 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y14:metros 5) (eq ?prop:predicate ?Y14) (eq ?prop:time 1)))
(find-all-instances ((?prop Proposition) (?Y15 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y15) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y16 TienePosicion)) (and (eq ?prop:subject [c2]) (eq ?prop:predicate ?Y16) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y17 TieneVelocidad)) (and (eq ?prop:subject [c1]) (eq ?Y17:mps 1) (eq ?prop:predicate ?Y17) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y18 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y18:metros 7) (eq ?prop:predicate ?Y18) (eq ?prop:time 3)))
(find-all-instances ((?prop Proposition) (?Y19 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y19:kgs 50) (eq ?prop:predicate ?Y19) (eq ?prop:time 9)))
(find-all-instances ((?prop Proposition) (?Y20 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y20:kgs 50) (eq ?prop:predicate ?Y20) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y21 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y21) (eq ?prop:time 1)))
(find-all-instances ((?prop Proposition) (?Y22 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y22:otro [c2]) (eq ?prop:predicate ?Y22) (eq ?prop:time 19)))
(find-all-instances ((?prop Proposition) (?Y23 EstaADistancia)) (and (eq ?prop:subject [c2]) (eq ?Y23:otro [c1]) (eq ?prop:predicate ?Y23) (eq ?prop:time 19)))
(find-all-instances ((?prop Proposition) (?Y24 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y24:otro [c2]) (eq ?prop:predicate ?Y24) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y25 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y25) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y26 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y26) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y27 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y27)))
(find-all-instances ((?prop Proposition) (?Y28 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y28:otro [c2]) (eq ?prop:predicate ?Y28)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot metros (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot metros (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot mps (type ?VARIABLE)))
(defclass Anda (is-a TieneVelocidad) (slot longitud_zancada (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot mps2 (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot newton (type ?VARIABLE)))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq (class ?X3) Cuerpo)|:(subclassp (class ?X3) Cuerpo)) (predicate ?Y2&:(eq (class ?Y2) TienePosicion)|:(subclassp (class ?Y2) TienePosicion)) (time ?X4))) (test (< ?X4 100)) (test (neq (send ?Y1 get-metros) (send ?Y2 get-metros))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of EstaADistancia (otro ?X3) (metros (- (send ?Y1 get-metros) (send ?Y2 get-metros))))) (time ?X4)))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TienePosicion)|:(subclassp (class ?Y3) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneVelocidad)|:(subclassp (class ?Y4) TieneVelocidad)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (metros (+ (send ?Y3 get-metros) (send ?Y4 get-mps))))) (time (+ ?X4 1))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) TieneVelocidad)|:(subclassp (class ?Y5) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneAceleracion)|:(subclassp (class ?Y6) TieneAceleracion)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (mps (+ (send ?Y5 get-mps) (send ?Y6 get-mps2))))) (time (+ ?X4 1))))
(defrule r6 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y13&:(eq (class ?Y13) TieneMasa)|:(subclassp (class ?Y13) TieneMasa)) (time ?X3))) (test (< ?X3 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y13 get-kgs)))) (time (+ ?X3 1))))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(find-all-instances ((?prop Proposition) (?Y27 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y27)))
(find-all-instances ((?prop Proposition) (?Y28 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y28:otro [c2]) (eq ?prop:predicate ?Y28)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot metros (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot metros (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot mps (type ?VARIABLE)))
(defclass Anda (is-a TieneVelocidad) (slot longitud_zancada (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot mps2 (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot newton (type ?VARIABLE)))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq (class ?X3) Cuerpo)|:(subclassp (class ?X3) Cuerpo)) (predicate ?Y2&:(eq (class ?Y2) TienePosicion)|:(subclassp (class ?Y2) TienePosicion)) (time ?X4))) (test (< ?X4 100)) (test (neq (send ?Y1 get-metros) (send ?Y2 get-metros))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of EstaADistancia (otro ?X3) (metros (- (send ?Y1 get-metros) (send ?Y2 get-metros))))) (time ?X4)))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TienePosicion)|:(subclassp (class ?Y3) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneVelocidad)|:(subclassp (class ?Y4) TieneVelocidad)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (metros (+ (send ?Y3 get-metros) (send ?Y4 get-mps))))) (time (+ ?X4 1))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) TieneVelocidad)|:(subclassp (class ?Y5) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneAceleracion)|:(subclassp (class ?Y6) TieneAceleracion)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (mps (+ (send ?Y5 get-mps) (send ?Y6 get-mps2))))) (time (+ ?X4 1))))
(defrule r4 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y7&:(eq (class ?Y7) SufreFuerza)|:(subclassp (class ?Y7) SufreFuerza)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y8&:(eq (class ?Y8) TieneAceleracion)|:(subclassp (class ?Y8) TieneAceleracion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y9&:(eq (class ?Y9) TieneMasa)|:(subclassp (class ?Y9) TieneMasa)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneAceleracion (mps2 (+ (send ?Y8 get-mps2) (** (/ (send ?Y7 get-newton) (send ?Y9 get-kgs)) (/ 1 2)))))) (time (+ ?X4 1))))
(defrule r5 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y10&:(eq (class ?Y10) EstaADistancia)|:(subclassp (class ?Y10) EstaADistancia)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y11&:(eq (class ?Y11) TieneMasa)|:(subclassp (class ?Y11) TieneMasa)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq ?X3 (send ?Y10 get-otro))) (predicate ?Y12&:(eq (class ?Y12) TieneMasa)|:(subclassp (class ?Y12) TieneMasa)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of SufreFuerza (newton (/ (* (send ?Y11 get-kgs) (send ?Y12 get-kgs)) (** (send ?Y10 get-metros) 2))))) (time (+ ?X4 1))))
(defrule r6 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y13&:(eq (class ?Y13) TieneMasa)|:(subclassp (class ?Y13) TieneMasa)) (time ?X3))) (test (< ?X3 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y13 get-kgs)))) (time (+ ?X3 1))))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs 100))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs 50))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (metros 5))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (metros 10))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (mps 1))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneVelocidad (mps 1))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (mps2 0))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (mps2 0))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (newton 0))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (newton 0))) (time 1))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(find-all-instances ((?prop Proposition) (?Y14 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y14:metros 5) (eq ?prop:predicate ?Y14) (eq ?prop:time 1)))
(find-all-instances ((?prop Proposition) (?Y15 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y15) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y16 TienePosicion)) (and (eq ?prop:subject [c2]) (eq ?prop:predicate ?Y16) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y17 TieneVelocidad)) (and (eq ?prop:subject [c1]) (eq ?Y17:mps 1) (eq ?prop:predicate ?Y17) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y18 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y18:metros 7) (eq ?prop:predicate ?Y18) (eq ?prop:time 3)))
(find-all-instances ((?prop Proposition) (?Y19 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y19:kgs 50) (eq ?prop:predicate ?Y19) (eq ?prop:time 9)))
(find-all-instances ((?prop Proposition) (?Y20 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y20:kgs 50) (eq ?prop:predicate ?Y20) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y21 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y21) (eq ?prop:time 1)))
(find-all-instances ((?prop Proposition) (?Y22 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y22:otro [c2]) (eq ?prop:predicate ?Y22) (eq ?prop:time 19)))
(find-all-instances ((?prop Proposition) (?Y23 EstaADistancia)) (and (eq ?prop:subject [c2]) (eq ?Y23:otro [c1]) (eq ?prop:predicate ?Y23) (eq ?prop:time 19)))
(find-all-instances ((?prop Proposition) (?Y24 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y24:otro [c2]) (eq ?prop:predicate ?Y24) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y25 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y25) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y26 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y26) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y27 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y27)))
(find-all-instances ((?prop Proposition) (?Y28 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y28:otro [c2]) (eq ?prop:predicate ?Y28)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot metros (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot metros (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot mps (type ?VARIABLE)))
(defclass Anda (is-a TieneVelocidad) (slot longitud_zancada (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot mps2 (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot newton (type ?VARIABLE)))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq (class ?X3) Cuerpo)|:(subclassp (class ?X3) Cuerpo)) (predicate ?Y2&:(eq (class ?Y2) TienePosicion)|:(subclassp (class ?Y2) TienePosicion)) (time ?X4))) (test (< ?X4 (100.0  ))) (test (neq (send ?Y1 get-metros) (send ?Y2 get-metros))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of EstaADistancia (otro ?X3) (metros (- (send ?Y1 get-metros) (send ?Y2 get-metros))))) (time ?X4)))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TienePosicion)|:(subclassp (class ?Y3) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneVelocidad)|:(subclassp (class ?Y4) TieneVelocidad)) (time ?X4))) (test (< ?X4 (100.0  ))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (metros (+ (send ?Y3 get-metros) (send ?Y4 get-mps))))) (time (+ ?X4 (1.0  )))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) TieneVelocidad)|:(subclassp (class ?Y5) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneAceleracion)|:(subclassp (class ?Y6) TieneAceleracion)) (time ?X4))) (test (< ?X4 (100.0  ))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (mps (+ (send ?Y5 get-mps) (send ?Y6 get-mps2))))) (time (+ ?X4 (1.0  )))))
(defrule r4 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y7&:(eq (class ?Y7) SufreFuerza)|:(subclassp (class ?Y7) SufreFuerza)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y8&:(eq (class ?Y8) TieneAceleracion)|:(subclassp (class ?Y8) TieneAceleracion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y9&:(eq (class ?Y9) TieneMasa)|:(subclassp (class ?Y9) TieneMasa)) (time ?X4))) (test (< ?X4 (100.0  ))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneAceleracion (mps2 (+ (send ?Y8 get-mps2) (** (/ (send ?Y7 get-newton) (send ?Y9 get-kgs)) (/ (1.0  ) (2.0  ))))))) (time (+ ?X4 (1.0  )))))
(defrule r5 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y10&:(eq (class ?Y10) EstaADistancia)|:(subclassp (class ?Y10) EstaADistancia)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y11&:(eq (class ?Y11) TieneMasa)|:(subclassp (class ?Y11) TieneMasa)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq ?X3 (send ?Y10 get-otro))) (predicate ?Y12&:(eq (class ?Y12) TieneMasa)|:(subclassp (class ?Y12) TieneMasa)) (time ?X4))) (test (< ?X4 (100.0  ))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of SufreFuerza (newton (/ (* (send ?Y11 get-kgs) (send ?Y12 get-kgs)) (** (send ?Y10 get-metros) (2.0  )))))) (time (+ ?X4 (1.0  )))))
(defrule r6 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y13&:(eq (class ?Y13) TieneMasa)|:(subclassp (class ?Y13) TieneMasa)) (time ?X3))) (test (< ?X3 (100.0  ))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y13 get-kgs)))) (time (+ ?X3 (1.0  )))))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs (100.0  )))) (time (1.0  )))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs (50.0  )))) (time (1.0  )))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (metros (5.0  )))) (time (1.0  )))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (metros (10.0  )))) (time (1.0  )))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (mps (1.0  )))) (time (1.0  )))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneVelocidad (mps (1.0  )))) (time (1.0  )))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (mps2 (0.0  )))) (time (1.0  )))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (mps2 (0.0  )))) (time (1.0  )))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (newton (0.0  )))) (time (1.0  )))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (newton (0.0  )))) (time (1.0  )))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(find-all-instances ((?prop Proposition) (?Y14 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y14:metros (5.0  )) (eq ?prop:predicate ?Y14) (eq ?prop:time (1.0  ))))
(find-all-instances ((?prop Proposition) (?Y15 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y15) (eq ?prop:time (2.0  ))))
(find-all-instances ((?prop Proposition) (?Y16 TienePosicion)) (and (eq ?prop:subject [c2]) (eq ?prop:predicate ?Y16) (eq ?prop:time (2.0  ))))
(find-all-instances ((?prop Proposition) (?Y17 TieneVelocidad)) (and (eq ?prop:subject [c1]) (eq ?Y17:mps (1.0  )) (eq ?prop:predicate ?Y17) (eq ?prop:time (2.0  ))))
(find-all-instances ((?prop Proposition) (?Y18 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y18:metros (7.0  )) (eq ?prop:predicate ?Y18) (eq ?prop:time (3.0  ))))
(find-all-instances ((?prop Proposition) (?Y19 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y19:kgs (50.0  )) (eq ?prop:predicate ?Y19) (eq ?prop:time (9.0  ))))
(find-all-instances ((?prop Proposition) (?Y20 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y20:kgs (50.0  )) (eq ?prop:predicate ?Y20) (eq ?prop:time (99.0  ))))
(find-all-instances ((?prop Proposition) (?Y21 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y21) (eq ?prop:time (1.0  ))))
(find-all-instances ((?prop Proposition) (?Y22 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y22:otro [c2]) (eq ?prop:predicate ?Y22) (eq ?prop:time (19.0  ))))
(find-all-instances ((?prop Proposition) (?Y23 EstaADistancia)) (and (eq ?prop:subject [c2]) (eq ?Y23:otro [c1]) (eq ?prop:predicate ?Y23) (eq ?prop:time (19.0  ))))
(find-all-instances ((?prop Proposition) (?Y24 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y24:otro [c2]) (eq ?prop:predicate ?Y24) (eq ?prop:time (99.0  ))))
(find-all-instances ((?prop Proposition) (?Y25 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y25) (eq ?prop:time (99.0  ))))
(find-all-instances ((?prop Proposition) (?Y26 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y26) (eq ?prop:time (99.0  ))))
(find-all-instances ((?prop Proposition) (?Y27 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y27)))
(find-all-instances ((?prop Proposition) (?Y28 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y28:otro [c2]) (eq ?prop:predicate ?Y28)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot metros (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot metros (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot mps (type ?VARIABLE)))
(defclass Anda (is-a TieneVelocidad) (slot longitud_zancada (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot mps2 (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot newton (type ?VARIABLE)))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq (class ?X3) Cuerpo)|:(subclassp (class ?X3) Cuerpo)) (predicate ?Y2&:(eq (class ?Y2) TienePosicion)|:(subclassp (class ?Y2) TienePosicion)) (time ?X4))) (test (< ?X4 100)) (test (neq (send ?Y1 get-metros) (send ?Y2 get-metros))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of EstaADistancia (otro ?X3) (metros (- (send ?Y1 get-metros) (send ?Y2 get-metros))))) (time ?X4)))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TienePosicion)|:(subclassp (class ?Y3) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneVelocidad)|:(subclassp (class ?Y4) TieneVelocidad)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (metros (+ (send ?Y3 get-metros) (send ?Y4 get-mps))))) (time (+ ?X4 1))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) TieneVelocidad)|:(subclassp (class ?Y5) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneAceleracion)|:(subclassp (class ?Y6) TieneAceleracion)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (mps (+ (send ?Y5 get-mps) (send ?Y6 get-mps2))))) (time (+ ?X4 1))))
(defrule r4 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y7&:(eq (class ?Y7) SufreFuerza)|:(subclassp (class ?Y7) SufreFuerza)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y8&:(eq (class ?Y8) TieneAceleracion)|:(subclassp (class ?Y8) TieneAceleracion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y9&:(eq (class ?Y9) TieneMasa)|:(subclassp (class ?Y9) TieneMasa)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneAceleracion (mps2 (+ (send ?Y8 get-mps2) (** (/ (send ?Y7 get-newton) (send ?Y9 get-kgs)) (/ 1 2)))))) (time (+ ?X4 1))))
(defrule r5 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y10&:(eq (class ?Y10) EstaADistancia)|:(subclassp (class ?Y10) EstaADistancia)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y11&:(eq (class ?Y11) TieneMasa)|:(subclassp (class ?Y11) TieneMasa)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq ?X3 (send ?Y10 get-otro))) (predicate ?Y12&:(eq (class ?Y12) TieneMasa)|:(subclassp (class ?Y12) TieneMasa)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of SufreFuerza (newton (/ (* (send ?Y11 get-kgs) (send ?Y12 get-kgs)) (** (send ?Y10 get-metros) 2))))) (time (+ ?X4 1))))
(defrule r6 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y13&:(eq (class ?Y13) TieneMasa)|:(subclassp (class ?Y13) TieneMasa)) (time ?X3))) (test (< ?X3 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y13 get-kgs)))) (time (+ ?X3 1))))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs 100))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs 50))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (metros 5))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (metros 10))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (mps 1))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneVelocidad (mps 1))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (mps2 0))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (mps2 0))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (newton 0))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (newton 0))) (time 1))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(find-all-instances ((?prop Proposition) (?Y14 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y14:metros 5) (eq ?prop:predicate ?Y14) (eq ?prop:time 1)))
(find-all-instances ((?prop Proposition) (?Y15 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y15) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y16 TienePosicion)) (and (eq ?prop:subject [c2]) (eq ?prop:predicate ?Y16) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y17 TieneVelocidad)) (and (eq ?prop:subject [c1]) (eq ?Y17:mps 1) (eq ?prop:predicate ?Y17) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y18 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y18:metros 7) (eq ?prop:predicate ?Y18) (eq ?prop:time 3)))
(find-all-instances ((?prop Proposition) (?Y19 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y19:kgs 50) (eq ?prop:predicate ?Y19) (eq ?prop:time 9)))
(find-all-instances ((?prop Proposition) (?Y20 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y20:kgs 50) (eq ?prop:predicate ?Y20) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y21 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y21) (eq ?prop:time 1)))
(find-all-instances ((?prop Proposition) (?Y22 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y22:otro [c2]) (eq ?prop:predicate ?Y22) (eq ?prop:time 19)))
(find-all-instances ((?prop Proposition) (?Y23 EstaADistancia)) (and (eq ?prop:subject [c2]) (eq ?Y23:otro [c1]) (eq ?prop:predicate ?Y23) (eq ?prop:time 19)))
(find-all-instances ((?prop Proposition) (?Y24 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y24:otro [c2]) (eq ?prop:predicate ?Y24) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y25 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y25) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y26 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y26) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y27 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y27)))
(find-all-instances ((?prop Proposition) (?Y28 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y28:otro [c2]) (eq ?prop:predicate ?Y28)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot metros (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot metros (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot mps (type ?VARIABLE)))
(defclass Anda (is-a TieneVelocidad) (slot longitud_zancada (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot mps2 (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot newton (type ?VARIABLE)))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq (class ?X3) Cuerpo)|:(subclassp (class ?X3) Cuerpo)) (predicate ?Y2&:(eq (class ?Y2) TienePosicion)|:(subclassp (class ?Y2) TienePosicion)) (time ?X4))) (test (< ?X4 100)) (test (neq (send ?Y1 get-metros) (send ?Y2 get-metros))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of EstaADistancia (otro ?X3) (metros (- (send ?Y1 get-metros) (send ?Y2 get-metros))))) (time ?X4)))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TienePosicion)|:(subclassp (class ?Y3) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneVelocidad)|:(subclassp (class ?Y4) TieneVelocidad)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (metros (+ (send ?Y3 get-metros) (send ?Y4 get-mps))))) (time (+ ?X4 1))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) TieneVelocidad)|:(subclassp (class ?Y5) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneAceleracion)|:(subclassp (class ?Y6) TieneAceleracion)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (mps (+ (send ?Y5 get-mps) (send ?Y6 get-mps2))))) (time (+ ?X4 1))))
(defrule r4 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y7&:(eq (class ?Y7) SufreFuerza)|:(subclassp (class ?Y7) SufreFuerza)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y8&:(eq (class ?Y8) TieneAceleracion)|:(subclassp (class ?Y8) TieneAceleracion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y9&:(eq (class ?Y9) TieneMasa)|:(subclassp (class ?Y9) TieneMasa)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneAceleracion (mps2 (+ (send ?Y8 get-mps2) (** (/ (send ?Y7 get-newton) (send ?Y9 get-kgs)) (/ 1 2)))))) (time (+ ?X4 1))))
(defrule r5 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y10&:(eq (class ?Y10) EstaADistancia)|:(subclassp (class ?Y10) EstaADistancia)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y11&:(eq (class ?Y11) TieneMasa)|:(subclassp (class ?Y11) TieneMasa)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq ?X3 (send ?Y10 get-otro))) (predicate ?Y12&:(eq (class ?Y12) TieneMasa)|:(subclassp (class ?Y12) TieneMasa)) (time ?X4))) (test (< ?X4 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of SufreFuerza (newton (/ (* (send ?Y11 get-kgs) (send ?Y12 get-kgs)) (** (send ?Y10 get-metros) 2))))) (time (+ ?X4 1))))
(defrule r6 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y13&:(eq (class ?Y13) TieneMasa)|:(subclassp (class ?Y13) TieneMasa)) (time ?X3))) (test (< ?X3 100)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y13 get-kgs)))) (time (+ ?X3 1))))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs 100))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs 50))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (metros 5))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (metros 10))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (mps 1))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneVelocidad (mps 1))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (mps2 0))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (mps2 0))) (time 1))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (newton 0))) (time 1))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (newton 0))) (time 1))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(find-all-instances ((?prop Proposition) (?Y14 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y14:metros 5) (eq ?prop:predicate ?Y14) (eq ?prop:time 1)))
(find-all-instances ((?prop Proposition) (?Y15 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y15) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y16 TienePosicion)) (and (eq ?prop:subject [c2]) (eq ?prop:predicate ?Y16) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y17 TieneVelocidad)) (and (eq ?prop:subject [c1]) (eq ?Y17:mps 1) (eq ?prop:predicate ?Y17) (eq ?prop:time 2)))
(find-all-instances ((?prop Proposition) (?Y18 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y18:metros 7) (eq ?prop:predicate ?Y18) (eq ?prop:time 3)))
(find-all-instances ((?prop Proposition) (?Y19 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y19:kgs 50) (eq ?prop:predicate ?Y19) (eq ?prop:time 9)))
(find-all-instances ((?prop Proposition) (?Y20 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y20:kgs 50) (eq ?prop:predicate ?Y20) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y21 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y21) (eq ?prop:time 1)))
(find-all-instances ((?prop Proposition) (?Y22 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y22:otro [c2]) (eq ?prop:predicate ?Y22) (eq ?prop:time 19)))
(find-all-instances ((?prop Proposition) (?Y23 EstaADistancia)) (and (eq ?prop:subject [c2]) (eq ?Y23:otro [c1]) (eq ?prop:predicate ?Y23) (eq ?prop:time 19)))
(find-all-instances ((?prop Proposition) (?Y24 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y24:otro [c2]) (eq ?prop:predicate ?Y24) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y25 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y25) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y26 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y26) (eq ?prop:time 99)))
(find-all-instances ((?prop Proposition) (?Y27 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y27)))
(find-all-instances ((?prop Proposition) (?Y28 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y28:otro [c2]) (eq ?prop:predicate ?Y28)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot metros (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot metros (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot mps (type ?VARIABLE)))
(defclass Anda (is-a TieneVelocidad) (slot longitud_zancada (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot mps2 (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot newton (type ?VARIABLE)))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq (class ?X3) Cuerpo)|:(subclassp (class ?X3) Cuerpo)) (predicate ?Y2&:(eq (class ?Y2) TienePosicion)|:(subclassp (class ?Y2) TienePosicion)) (time ?X4))) (test (< ?X4 100.0)) (test (neq (send ?Y1 get-metros) (send ?Y2 get-metros))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of EstaADistancia (otro ?X3) (metros (- (send ?Y1 get-metros) (send ?Y2 get-metros))))) (time ?X4)))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TienePosicion)|:(subclassp (class ?Y3) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneVelocidad)|:(subclassp (class ?Y4) TieneVelocidad)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (metros (+ (send ?Y3 get-metros) (send ?Y4 get-mps))))) (time (+ ?X4 1.0))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) TieneVelocidad)|:(subclassp (class ?Y5) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneAceleracion)|:(subclassp (class ?Y6) TieneAceleracion)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (mps (+ (send ?Y5 get-mps) (send ?Y6 get-mps2))))) (time (+ ?X4 1.0))))
(defrule r4 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y7&:(eq (class ?Y7) SufreFuerza)|:(subclassp (class ?Y7) SufreFuerza)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y8&:(eq (class ?Y8) TieneAceleracion)|:(subclassp (class ?Y8) TieneAceleracion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y9&:(eq (class ?Y9) TieneMasa)|:(subclassp (class ?Y9) TieneMasa)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneAceleracion (mps2 (+ (send ?Y8 get-mps2) (** (/ (send ?Y7 get-newton) (send ?Y9 get-kgs)) (/ 1.0 2.0)))))) (time (+ ?X4 1.0))))
(defrule r5 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y10&:(eq (class ?Y10) EstaADistancia)|:(subclassp (class ?Y10) EstaADistancia)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y11&:(eq (class ?Y11) TieneMasa)|:(subclassp (class ?Y11) TieneMasa)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq ?X3 (send ?Y10 get-otro))) (predicate ?Y12&:(eq (class ?Y12) TieneMasa)|:(subclassp (class ?Y12) TieneMasa)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of SufreFuerza (newton (/ (* (send ?Y11 get-kgs) (send ?Y12 get-kgs)) (** (send ?Y10 get-metros) 2.0))))) (time (+ ?X4 1.0))))
(defrule r6 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y13&:(eq (class ?Y13) TieneMasa)|:(subclassp (class ?Y13) TieneMasa)) (time ?X3))) (test (< ?X3 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y13 get-kgs)))) (time (+ ?X3 1.0))))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs 100.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs 50.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (metros 5.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (metros 10.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (mps 1.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneVelocidad (mps 1.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (mps2 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (mps2 0.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (newton 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (newton 0.0))) (time 1.0))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(find-all-instances ((?prop Proposition) (?Y14 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y14:metros 5.0) (eq ?prop:predicate ?Y14) (eq ?prop:time 1.0)))
(find-all-instances ((?prop Proposition) (?Y15 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y15) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y16 TienePosicion)) (and (eq ?prop:subject [c2]) (eq ?prop:predicate ?Y16) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y17 TieneVelocidad)) (and (eq ?prop:subject [c1]) (eq ?Y17:mps 1.0) (eq ?prop:predicate ?Y17) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y18 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y18:metros 7.0) (eq ?prop:predicate ?Y18) (eq ?prop:time 3.0)))
(find-all-instances ((?prop Proposition) (?Y19 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y19:kgs 50.0) (eq ?prop:predicate ?Y19) (eq ?prop:time 9.0)))
(find-all-instances ((?prop Proposition) (?Y20 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y20:kgs 50.0) (eq ?prop:predicate ?Y20) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y21 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y21) (eq ?prop:time 1.0)))
(find-all-instances ((?prop Proposition) (?Y22 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y22:otro [c2]) (eq ?prop:predicate ?Y22) (eq ?prop:time 19.0)))
(find-all-instances ((?prop Proposition) (?Y23 EstaADistancia)) (and (eq ?prop:subject [c2]) (eq ?Y23:otro [c1]) (eq ?prop:predicate ?Y23) (eq ?prop:time 19.0)))
(find-all-instances ((?prop Proposition) (?Y24 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y24:otro [c2]) (eq ?prop:predicate ?Y24) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y25 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y25) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y26 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y26) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y27 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y27)))
(find-all-instances ((?prop Proposition) (?Y28 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y28:otro [c2]) (eq ?prop:predicate ?Y28)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot metros (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot metros (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot mps (type ?VARIABLE)))
(defclass Anda (is-a TieneVelocidad) (slot longitud_zancada (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot mps2 (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot newton (type ?VARIABLE)))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq (class ?X3) Cuerpo)|:(subclassp (class ?X3) Cuerpo)) (predicate ?Y2&:(eq (class ?Y2) TienePosicion)|:(subclassp (class ?Y2) TienePosicion)) (time ?X4))) (test (< ?X4 100.0)) (test (neq (send ?Y1 get-metros) (send ?Y2 get-metros))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of EstaADistancia (otro ?X3) (metros (- (send ?Y1 get-metros) (send ?Y2 get-metros))))) (time ?X4)))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TienePosicion)|:(subclassp (class ?Y3) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneVelocidad)|:(subclassp (class ?Y4) TieneVelocidad)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (metros (+ (send ?Y3 get-metros) (send ?Y4 get-mps))))) (time (+ ?X4 1.0))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) TieneVelocidad)|:(subclassp (class ?Y5) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneAceleracion)|:(subclassp (class ?Y6) TieneAceleracion)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (mps (+ (send ?Y5 get-mps) (send ?Y6 get-mps2))))) (time (+ ?X4 1.0))))
(defrule r4 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y7&:(eq (class ?Y7) SufreFuerza)|:(subclassp (class ?Y7) SufreFuerza)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y8&:(eq (class ?Y8) TieneAceleracion)|:(subclassp (class ?Y8) TieneAceleracion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y9&:(eq (class ?Y9) TieneMasa)|:(subclassp (class ?Y9) TieneMasa)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneAceleracion (mps2 (+ (send ?Y8 get-mps2) (** (/ (send ?Y7 get-newton) (send ?Y9 get-kgs)) (/ 1.0 2.0)))))) (time (+ ?X4 1.0))))
(defrule r5 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y10&:(eq (class ?Y10) EstaADistancia)|:(subclassp (class ?Y10) EstaADistancia)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y11&:(eq (class ?Y11) TieneMasa)|:(subclassp (class ?Y11) TieneMasa)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq ?X3 (send ?Y10 get-otro))) (predicate ?Y12&:(eq (class ?Y12) TieneMasa)|:(subclassp (class ?Y12) TieneMasa)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of SufreFuerza (newton (/ (* (send ?Y11 get-kgs) (send ?Y12 get-kgs)) (** (send ?Y10 get-metros) 2.0))))) (time (+ ?X4 1.0))))
(defrule r6 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y13&:(eq (class ?Y13) TieneMasa)|:(subclassp (class ?Y13) TieneMasa)) (time ?X3))) (test (< ?X3 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y13 get-kgs)))) (time (+ ?X3 1.0))))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs 100.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs 50.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (metros 5.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (metros 10.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (mps 1.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneVelocidad (mps 1.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (mps2 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (mps2 0.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (newton 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (newton 0.0))) (time 1.0))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(find-all-instances ((?prop Proposition) (?Y14 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y14:metros 5.0) (eq ?prop:predicate ?Y14) (eq ?prop:time 1.0)))
(find-all-instances ((?prop Proposition) (?Y15 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y15) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y16 TienePosicion)) (and (eq ?prop:subject [c2]) (eq ?prop:predicate ?Y16) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y17 TieneVelocidad)) (and (eq ?prop:subject [c1]) (eq ?Y17:mps 1.0) (eq ?prop:predicate ?Y17) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y18 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y18:metros 7.0) (eq ?prop:predicate ?Y18) (eq ?prop:time 3.0)))
(find-all-instances ((?prop Proposition) (?Y19 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y19:kgs 50.0) (eq ?prop:predicate ?Y19) (eq ?prop:time 9.0)))
(find-all-instances ((?prop Proposition) (?Y20 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y20:kgs 50.0) (eq ?prop:predicate ?Y20) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y21 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y21) (eq ?prop:time 1.0)))
(find-all-instances ((?prop Proposition) (?Y22 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y22:otro [c2]) (eq ?prop:predicate ?Y22) (eq ?prop:time 19.0)))
(find-all-instances ((?prop Proposition) (?Y23 EstaADistancia)) (and (eq ?prop:subject [c2]) (eq ?Y23:otro [c1]) (eq ?prop:predicate ?Y23) (eq ?prop:time 19.0)))
(find-all-instances ((?prop Proposition) (?Y24 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y24:otro [c2]) (eq ?prop:predicate ?Y24) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y25 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y25) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y26 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y26) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y27 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y27)))
(find-all-instances ((?prop Proposition) (?Y28 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y28:otro [c2]) (eq ?prop:predicate ?Y28)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot metros (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot metros (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot mps (type ?VARIABLE)))
(defclass Anda (is-a TieneVelocidad) (slot longitud_zancada (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot mps2 (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot newton (type ?VARIABLE)))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq (class ?X3) Cuerpo)|:(subclassp (class ?X3) Cuerpo)) (predicate ?Y2&:(eq (class ?Y2) TienePosicion)|:(subclassp (class ?Y2) TienePosicion)) (time ?X4))) (test (< ?X4 100.0)) (test (neq (send ?Y1 get-metros) (send ?Y2 get-metros))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of EstaADistancia (otro ?X3) (metros (- (send ?Y1 get-metros) (send ?Y2 get-metros))))) (time ?X4)))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TienePosicion)|:(subclassp (class ?Y3) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneVelocidad)|:(subclassp (class ?Y4) TieneVelocidad)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (metros (+ (send ?Y3 get-metros) (send ?Y4 get-mps))))) (time (+ ?X4 1.0))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) TieneVelocidad)|:(subclassp (class ?Y5) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneAceleracion)|:(subclassp (class ?Y6) TieneAceleracion)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (mps (+ (send ?Y5 get-mps) (send ?Y6 get-mps2))))) (time (+ ?X4 1.0))))
(defrule r4 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y7&:(eq (class ?Y7) SufreFuerza)|:(subclassp (class ?Y7) SufreFuerza)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y8&:(eq (class ?Y8) TieneAceleracion)|:(subclassp (class ?Y8) TieneAceleracion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y9&:(eq (class ?Y9) TieneMasa)|:(subclassp (class ?Y9) TieneMasa)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneAceleracion (mps2 (+ (send ?Y8 get-mps2) (** (/ (send ?Y7 get-newton) (send ?Y9 get-kgs)) (/ 1.0 2.0)))))) (time (+ ?X4 1.0))))
(defrule r5 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y10&:(eq (class ?Y10) EstaADistancia)|:(subclassp (class ?Y10) EstaADistancia)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y11&:(eq (class ?Y11) TieneMasa)|:(subclassp (class ?Y11) TieneMasa)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq ?X3 (send ?Y10 get-otro))) (predicate ?Y12&:(eq (class ?Y12) TieneMasa)|:(subclassp (class ?Y12) TieneMasa)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of SufreFuerza (newton (/ (* (send ?Y11 get-kgs) (send ?Y12 get-kgs)) (** (send ?Y10 get-metros) 2.0))))) (time (+ ?X4 1.0))))
(defrule r6 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y13&:(eq (class ?Y13) TieneMasa)|:(subclassp (class ?Y13) TieneMasa)) (time ?X3))) (test (< ?X3 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y13 get-kgs)))) (time (+ ?X3 1.0))))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs 100.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs 50.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (metros 5.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (metros 10.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (mps 1.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneVelocidad (mps 1.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (mps2 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (mps2 0.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (newton 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (newton 0.0))) (time 1.0))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(find-all-instances ((?prop Proposition) (?Y14 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y14:metros 5.0) (eq ?prop:predicate ?Y14) (eq ?prop:time 1.0)))
(find-all-instances ((?prop Proposition) (?Y15 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y15) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y16 TienePosicion)) (and (eq ?prop:subject [c2]) (eq ?prop:predicate ?Y16) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y17 TieneVelocidad)) (and (eq ?prop:subject [c1]) (eq ?Y17:mps 1.0) (eq ?prop:predicate ?Y17) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y18 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y18:metros 7.0) (eq ?prop:predicate ?Y18) (eq ?prop:time 3.0)))
(find-all-instances ((?prop Proposition) (?Y19 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y19:kgs 50.0) (eq ?prop:predicate ?Y19) (eq ?prop:time 9.0)))
(find-all-instances ((?prop Proposition) (?Y20 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y20:kgs 50.0) (eq ?prop:predicate ?Y20) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y21 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y21) (eq ?prop:time 1.0)))
(find-all-instances ((?prop Proposition) (?Y22 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y22:otro [c2]) (eq ?prop:predicate ?Y22) (eq ?prop:time 19.0)))
(find-all-instances ((?prop Proposition) (?Y23 EstaADistancia)) (and (eq ?prop:subject [c2]) (eq ?Y23:otro [c1]) (eq ?prop:predicate ?Y23) (eq ?prop:time 19.0)))
(find-all-instances ((?prop Proposition) (?Y24 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y24:otro [c2]) (eq ?prop:predicate ?Y24) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y25 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y25) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y26 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y26) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y27 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y27)))
(find-all-instances ((?prop Proposition) (?Y28 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y28:otro [c2]) (eq ?prop:predicate ?Y28)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot metros (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot metros (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot mps (type ?VARIABLE)))
(defclass Anda (is-a TieneVelocidad) (slot longitud_zancada (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot mps2 (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot newton (type ?VARIABLE)))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq (class ?X3) Cuerpo)|:(subclassp (class ?X3) Cuerpo)) (predicate ?Y2&:(eq (class ?Y2) TienePosicion)|:(subclassp (class ?Y2) TienePosicion)) (time ?X4))) (test (< ?X4 100.0)) (test (neq (send ?Y1 get-metros) (send ?Y2 get-metros))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of EstaADistancia (otro ?X3) (metros (- (send ?Y1 get-metros) (send ?Y2 get-metros))))) (time ?X4)))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TienePosicion)|:(subclassp (class ?Y3) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneVelocidad)|:(subclassp (class ?Y4) TieneVelocidad)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (metros (+ (send ?Y3 get-metros) (send ?Y4 get-mps))))) (time (+ ?X4 1.0))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) TieneVelocidad)|:(subclassp (class ?Y5) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneAceleracion)|:(subclassp (class ?Y6) TieneAceleracion)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (mps (+ (send ?Y5 get-mps) (send ?Y6 get-mps2))))) (time (+ ?X4 1.0))))
(defrule r4 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y7&:(eq (class ?Y7) SufreFuerza)|:(subclassp (class ?Y7) SufreFuerza)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y8&:(eq (class ?Y8) TieneAceleracion)|:(subclassp (class ?Y8) TieneAceleracion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y9&:(eq (class ?Y9) TieneMasa)|:(subclassp (class ?Y9) TieneMasa)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneAceleracion (mps2 (+ (send ?Y8 get-mps2) (** (/ (send ?Y7 get-newton) (send ?Y9 get-kgs)) (/ 1.0 2.0)))))) (time (+ ?X4 1.0))))
(defrule r5 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y10&:(eq (class ?Y10) EstaADistancia)|:(subclassp (class ?Y10) EstaADistancia)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y11&:(eq (class ?Y11) TieneMasa)|:(subclassp (class ?Y11) TieneMasa)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq ?X3 (send ?Y10 get-otro))) (predicate ?Y12&:(eq (class ?Y12) TieneMasa)|:(subclassp (class ?Y12) TieneMasa)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of SufreFuerza (newton (/ (* (send ?Y11 get-kgs) (send ?Y12 get-kgs)) (** (send ?Y10 get-metros) 2.0))))) (time (+ ?X4 1.0))))
(defrule r6 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y13&:(eq (class ?Y13) TieneMasa)|:(subclassp (class ?Y13) TieneMasa)) (time ?X3))) (test (< ?X3 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y13 get-kgs)))) (time (+ ?X3 1.0))))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs 100.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs 50.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (metros 5.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (metros 10.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (mps 1.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneVelocidad (mps 1.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (mps2 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (mps2 0.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (newton 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (newton 0.0))) (time 1.0))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(find-all-instances ((?prop Proposition) (?Y14 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y14:metros 5.0) (eq ?prop:predicate ?Y14) (eq ?prop:time 1.0)))
(find-all-instances ((?prop Proposition) (?Y15 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y15) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y16 TienePosicion)) (and (eq ?prop:subject [c2]) (eq ?prop:predicate ?Y16) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y17 TieneVelocidad)) (and (eq ?prop:subject [c1]) (eq ?Y17:mps 1.0) (eq ?prop:predicate ?Y17) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y18 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y18:metros 7.0) (eq ?prop:predicate ?Y18) (eq ?prop:time 3.0)))
(find-all-instances ((?prop Proposition) (?Y19 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y19:kgs 50.0) (eq ?prop:predicate ?Y19) (eq ?prop:time 9.0)))
(find-all-instances ((?prop Proposition) (?Y20 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y20:kgs 50.0) (eq ?prop:predicate ?Y20) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y21 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y21) (eq ?prop:time 1.0)))
(find-all-instances ((?prop Proposition) (?Y22 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y22:otro [c2]) (eq ?prop:predicate ?Y22) (eq ?prop:time 19.0)))
(find-all-instances ((?prop Proposition) (?Y23 EstaADistancia)) (and (eq ?prop:subject [c2]) (eq ?Y23:otro [c1]) (eq ?prop:predicate ?Y23) (eq ?prop:time 19.0)))
(find-all-instances ((?prop Proposition) (?Y24 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y24:otro [c2]) (eq ?prop:predicate ?Y24) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y25 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y25) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y26 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y26) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y27 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y27)))
(find-all-instances ((?prop Proposition) (?Y28 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y28:otro [c2]) (eq ?prop:predicate ?Y28)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot metros (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot metros (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot mps (type ?VARIABLE)))
(defclass Anda (is-a TieneVelocidad) (slot longitud_zancada (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot mps2 (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot newton (type ?VARIABLE)))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq (class ?X3) Cuerpo)|:(subclassp (class ?X3) Cuerpo)) (predicate ?Y2&:(eq (class ?Y2) TienePosicion)|:(subclassp (class ?Y2) TienePosicion)) (time ?X4))) (test (< ?X4 100.0)) (test (neq (send ?Y1 get-metros) (send ?Y2 get-metros))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of EstaADistancia (otro ?X3) (metros (- (send ?Y1 get-metros) (send ?Y2 get-metros))))) (time ?X4)))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TienePosicion)|:(subclassp (class ?Y3) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneVelocidad)|:(subclassp (class ?Y4) TieneVelocidad)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (metros (+ (send ?Y3 get-metros) (send ?Y4 get-mps))))) (time (+ ?X4 1.0))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) TieneVelocidad)|:(subclassp (class ?Y5) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneAceleracion)|:(subclassp (class ?Y6) TieneAceleracion)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (mps (+ (send ?Y5 get-mps) (send ?Y6 get-mps2))))) (time (+ ?X4 1.0))))
(defrule r4 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y7&:(eq (class ?Y7) SufreFuerza)|:(subclassp (class ?Y7) SufreFuerza)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y8&:(eq (class ?Y8) TieneAceleracion)|:(subclassp (class ?Y8) TieneAceleracion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y9&:(eq (class ?Y9) TieneMasa)|:(subclassp (class ?Y9) TieneMasa)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneAceleracion (mps2 (+ (send ?Y8 get-mps2) (** (/ (send ?Y7 get-newton) (send ?Y9 get-kgs)) (/ 1.0 2.0)))))) (time (+ ?X4 1.0))))
(defrule r5 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y10&:(eq (class ?Y10) EstaADistancia)|:(subclassp (class ?Y10) EstaADistancia)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y11&:(eq (class ?Y11) TieneMasa)|:(subclassp (class ?Y11) TieneMasa)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq ?X3 (send ?Y10 get-otro))) (predicate ?Y12&:(eq (class ?Y12) TieneMasa)|:(subclassp (class ?Y12) TieneMasa)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of SufreFuerza (newton (/ (* (send ?Y11 get-kgs) (send ?Y12 get-kgs)) (** (send ?Y10 get-metros) 2.0))))) (time (+ ?X4 1.0))))
(defrule r6 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y13&:(eq (class ?Y13) TieneMasa)|:(subclassp (class ?Y13) TieneMasa)) (time ?X3))) (test (< ?X3 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y13 get-kgs)))) (time (+ ?X3 1.0))))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs 100.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs 50.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (metros 5.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (metros 10.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (mps 1.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneVelocidad (mps 1.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (mps2 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (mps2 0.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (newton 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (newton 0.0))) (time 1.0))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(find-all-instances ((?prop Proposition) (?Y14 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y14:metros 5.0) (eq ?prop:predicate ?Y14) (eq ?prop:time 1.0)))
(find-all-instances ((?prop Proposition) (?Y15 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y15) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y16 TienePosicion)) (and (eq ?prop:subject [c2]) (eq ?prop:predicate ?Y16) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y17 TieneVelocidad)) (and (eq ?prop:subject [c1]) (eq ?Y17:mps 1.0) (eq ?prop:predicate ?Y17) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y18 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y18:metros 7.0) (eq ?prop:predicate ?Y18) (eq ?prop:time 3.0)))
(find-all-instances ((?prop Proposition) (?Y19 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y19:kgs 50.0) (eq ?prop:predicate ?Y19) (eq ?prop:time 9.0)))
(find-all-instances ((?prop Proposition) (?Y20 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y20:kgs 50.0) (eq ?prop:predicate ?Y20) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y21 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y21) (eq ?prop:time 1.0)))
(find-all-instances ((?prop Proposition) (?Y22 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y22:otro [c2]) (eq ?prop:predicate ?Y22) (eq ?prop:time 19.0)))
(find-all-instances ((?prop Proposition) (?Y23 EstaADistancia)) (and (eq ?prop:subject [c2]) (eq ?Y23:otro [c1]) (eq ?prop:predicate ?Y23) (eq ?prop:time 19.0)))
(find-all-instances ((?prop Proposition) (?Y24 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y24:otro [c2]) (eq ?prop:predicate ?Y24) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y25 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y25) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y26 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y26) (eq ?prop:time 99.0)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot metros (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot metros (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot mps (type ?VARIABLE)))
(defclass Anda (is-a TieneVelocidad) (slot longitud_zancada (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot mps2 (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot newton (type ?VARIABLE)))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq (class ?X3) Cuerpo)|:(subclassp (class ?X3) Cuerpo)) (predicate ?Y2&:(eq (class ?Y2) TienePosicion)|:(subclassp (class ?Y2) TienePosicion)) (time ?X4))) (test (< ?X4 100.0)) (test (neq (send ?Y1 get-metros) (send ?Y2 get-metros))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of EstaADistancia (otro ?X3) (metros (- (send ?Y1 get-metros) (send ?Y2 get-metros))))) (time ?X4)))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TienePosicion)|:(subclassp (class ?Y3) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneVelocidad)|:(subclassp (class ?Y4) TieneVelocidad)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (metros (+ (send ?Y3 get-metros) (send ?Y4 get-mps))))) (time (+ ?X4 1.0))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) TieneVelocidad)|:(subclassp (class ?Y5) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneAceleracion)|:(subclassp (class ?Y6) TieneAceleracion)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (mps (+ (send ?Y5 get-mps) (send ?Y6 get-mps2))))) (time (+ ?X4 1.0))))
(defrule r4 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y7&:(eq (class ?Y7) SufreFuerza)|:(subclassp (class ?Y7) SufreFuerza)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y8&:(eq (class ?Y8) TieneAceleracion)|:(subclassp (class ?Y8) TieneAceleracion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y9&:(eq (class ?Y9) TieneMasa)|:(subclassp (class ?Y9) TieneMasa)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneAceleracion (mps2 (+ (send ?Y8 get-mps2) (** (/ (send ?Y7 get-newton) (send ?Y9 get-kgs)) (/ 1.0 2.0)))))) (time (+ ?X4 1.0))))
(defrule r5 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y10&:(eq (class ?Y10) EstaADistancia)|:(subclassp (class ?Y10) EstaADistancia)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y11&:(eq (class ?Y11) TieneMasa)|:(subclassp (class ?Y11) TieneMasa)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq ?X3 (send ?Y10 get-otro))) (predicate ?Y12&:(eq (class ?Y12) TieneMasa)|:(subclassp (class ?Y12) TieneMasa)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of SufreFuerza (newton (/ (* (send ?Y11 get-kgs) (send ?Y12 get-kgs)) (** (send ?Y10 get-metros) 2.0))))) (time (+ ?X4 1.0))))
(defrule r6 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y13&:(eq (class ?Y13) TieneMasa)|:(subclassp (class ?Y13) TieneMasa)) (time ?X3))) (test (< ?X3 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y13 get-kgs)))) (time (+ ?X3 1.0))))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs 100.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs 50.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (metros 5.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (metros 10.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (mps 1.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneVelocidad (mps 1.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (mps2 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (mps2 0.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (newton 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (newton 0.0))) (time 1.0))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(find-all-instances ((?prop Proposition) (?Y14 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y14:metros 5.0) (eq ?prop:predicate ?Y14) (eq ?prop:time 1.0)))
(find-all-instances ((?prop Proposition) (?Y15 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y15) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y16 TienePosicion)) (and (eq ?prop:subject [c2]) (eq ?prop:predicate ?Y16) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y17 TieneVelocidad)) (and (eq ?prop:subject [c1]) (eq ?Y17:mps 1.0) (eq ?prop:predicate ?Y17) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y18 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y18:metros 7.0) (eq ?prop:predicate ?Y18) (eq ?prop:time 3.0)))
(find-all-instances ((?prop Proposition) (?Y19 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y19:kgs 50.0) (eq ?prop:predicate ?Y19) (eq ?prop:time 9.0)))
(find-all-instances ((?prop Proposition) (?Y20 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y20:kgs 50.0) (eq ?prop:predicate ?Y20) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y21 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y21) (eq ?prop:time 1.0)))
(find-all-instances ((?prop Proposition) (?Y22 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y22:otro [c2]) (eq ?prop:predicate ?Y22) (eq ?prop:time 19.0)))
(find-all-instances ((?prop Proposition) (?Y23 EstaADistancia)) (and (eq ?prop:subject [c2]) (eq ?Y23:otro [c1]) (eq ?prop:predicate ?Y23) (eq ?prop:time 19.0)))
(find-all-instances ((?prop Proposition) (?Y24 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y24:otro [c2]) (eq ?prop:predicate ?Y24) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y25 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y25) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y26 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y26) (eq ?prop:time 99.0)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot metros (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot metros (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot mps (type ?VARIABLE)))
(defclass Anda (is-a TieneVelocidad) (slot longitud_zancada (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot mps2 (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot newton (type ?VARIABLE)))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq (class ?X3) Cuerpo)|:(subclassp (class ?X3) Cuerpo)) (predicate ?Y2&:(eq (class ?Y2) TienePosicion)|:(subclassp (class ?Y2) TienePosicion)) (time ?X4))) (test (< ?X4 100.0)) (test (neq (send ?Y1 get-metros) (send ?Y2 get-metros))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of EstaADistancia (otro ?X3) (metros (- (send ?Y1 get-metros) (send ?Y2 get-metros))))) (time ?X4)))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TienePosicion)|:(subclassp (class ?Y3) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneVelocidad)|:(subclassp (class ?Y4) TieneVelocidad)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (metros (+ (send ?Y3 get-metros) (send ?Y4 get-mps))))) (time (+ ?X4 1.0))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) TieneVelocidad)|:(subclassp (class ?Y5) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneAceleracion)|:(subclassp (class ?Y6) TieneAceleracion)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (mps (+ (send ?Y5 get-mps) (send ?Y6 get-mps2))))) (time (+ ?X4 1.0))))
(defrule r4 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y7&:(eq (class ?Y7) SufreFuerza)|:(subclassp (class ?Y7) SufreFuerza)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y8&:(eq (class ?Y8) TieneAceleracion)|:(subclassp (class ?Y8) TieneAceleracion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y9&:(eq (class ?Y9) TieneMasa)|:(subclassp (class ?Y9) TieneMasa)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneAceleracion (mps2 (+ (send ?Y8 get-mps2) (** (/ (send ?Y7 get-newton) (send ?Y9 get-kgs)) (/ 1.0 2.0)))))) (time (+ ?X4 1.0))))
(defrule r5 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y10&:(eq (class ?Y10) EstaADistancia)|:(subclassp (class ?Y10) EstaADistancia)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y11&:(eq (class ?Y11) TieneMasa)|:(subclassp (class ?Y11) TieneMasa)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq ?X3 (send ?Y10 get-otro))) (predicate ?Y12&:(eq (class ?Y12) TieneMasa)|:(subclassp (class ?Y12) TieneMasa)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of SufreFuerza (newton (/ (* (send ?Y11 get-kgs) (send ?Y12 get-kgs)) (** (send ?Y10 get-metros) 2.0))))) (time (+ ?X4 1.0))))
(defrule r6 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y13&:(eq (class ?Y13) TieneMasa)|:(subclassp (class ?Y13) TieneMasa)) (time ?X3))) (test (< ?X3 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y13 get-kgs)))) (time (+ ?X3 1.0))))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs 100.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs 50.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (metros 5.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (metros 10.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (mps 1.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneVelocidad (mps 1.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (mps2 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (mps2 0.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (newton 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (newton 0.0))) (time 1.0))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(find-all-instances ((?prop Proposition) (?Y14 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y14:metros 5.0) (eq ?prop:predicate ?Y14) (eq ?prop:time 1.0)))
(find-all-instances ((?prop Proposition) (?Y15 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y15) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y16 TienePosicion)) (and (eq ?prop:subject [c2]) (eq ?prop:predicate ?Y16) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y17 TieneVelocidad)) (and (eq ?prop:subject [c1]) (eq ?Y17:mps 1.0) (eq ?prop:predicate ?Y17) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y18 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y18:metros 7.0) (eq ?prop:predicate ?Y18) (eq ?prop:time 3.0)))
(find-all-instances ((?prop Proposition) (?Y19 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y19:kgs 50.0) (eq ?prop:predicate ?Y19) (eq ?prop:time 9.0)))
(find-all-instances ((?prop Proposition) (?Y20 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y20:kgs 50.0) (eq ?prop:predicate ?Y20) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y21 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y21) (eq ?prop:time 1.0)))
(find-all-instances ((?prop Proposition) (?Y22 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y22:otro [c2]) (eq ?prop:predicate ?Y22) (eq ?prop:time 19.0)))
(find-all-instances ((?prop Proposition) (?Y23 EstaADistancia)) (and (eq ?prop:subject [c2]) (eq ?Y23:otro [c1]) (eq ?prop:predicate ?Y23) (eq ?prop:time 19.0)))
(find-all-instances ((?prop Proposition) (?Y24 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y24:otro [c2]) (eq ?prop:predicate ?Y24) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y25 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y25) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y26 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y26) (eq ?prop:time 99.0)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot metros (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot metros (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot mps (type ?VARIABLE)))
(defclass Anda (is-a TieneVelocidad) (slot longitud_zancada (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot mps2 (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot newton (type ?VARIABLE)))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq (class ?X3) Cuerpo)|:(subclassp (class ?X3) Cuerpo)) (predicate ?Y2&:(eq (class ?Y2) TienePosicion)|:(subclassp (class ?Y2) TienePosicion)) (time ?X4))) (test (< ?X4 100.0)) (test (neq (send ?Y1 get-metros) (send ?Y2 get-metros))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of EstaADistancia (otro ?X3) (metros (- (send ?Y1 get-metros) (send ?Y2 get-metros))))) (time ?X4)))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TienePosicion)|:(subclassp (class ?Y3) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneVelocidad)|:(subclassp (class ?Y4) TieneVelocidad)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (metros (+ (send ?Y3 get-metros) (send ?Y4 get-mps))))) (time (+ ?X4 1.0))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) TieneVelocidad)|:(subclassp (class ?Y5) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneAceleracion)|:(subclassp (class ?Y6) TieneAceleracion)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (mps (+ (send ?Y5 get-mps) (send ?Y6 get-mps2))))) (time (+ ?X4 1.0))))
(defrule r4 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y7&:(eq (class ?Y7) SufreFuerza)|:(subclassp (class ?Y7) SufreFuerza)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y8&:(eq (class ?Y8) TieneAceleracion)|:(subclassp (class ?Y8) TieneAceleracion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y9&:(eq (class ?Y9) TieneMasa)|:(subclassp (class ?Y9) TieneMasa)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneAceleracion (mps2 (+ (send ?Y8 get-mps2) (** (/ (send ?Y7 get-newton) (send ?Y9 get-kgs)) (/ 1.0 2.0)))))) (time (+ ?X4 1.0))))
(defrule r5 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y10&:(eq (class ?Y10) EstaADistancia)|:(subclassp (class ?Y10) EstaADistancia)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y11&:(eq (class ?Y11) TieneMasa)|:(subclassp (class ?Y11) TieneMasa)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq ?X3 (send ?Y10 get-otro))) (predicate ?Y12&:(eq (class ?Y12) TieneMasa)|:(subclassp (class ?Y12) TieneMasa)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of SufreFuerza (newton (/ (* (send ?Y11 get-kgs) (send ?Y12 get-kgs)) (** (send ?Y10 get-metros) 2.0))))) (time (+ ?X4 1.0))))
(defrule r6 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y13&:(eq (class ?Y13) TieneMasa)|:(subclassp (class ?Y13) TieneMasa)) (time ?X3))) (test (< ?X3 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y13 get-kgs)))) (time (+ ?X3 1.0))))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs 100.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs 50.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (metros 5.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (metros 10.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (mps 1.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneVelocidad (mps 1.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (mps2 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (mps2 0.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (newton 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (newton 0.0))) (time 1.0))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(find-all-instances ((?prop Proposition) (?Y14 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y14:metros 5.0) (eq ?prop:predicate ?Y14) (eq ?prop:time 1.0)))
(find-all-instances ((?prop Proposition) (?Y15 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y15) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y16 TienePosicion)) (and (eq ?prop:subject [c2]) (eq ?prop:predicate ?Y16) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y17 TieneVelocidad)) (and (eq ?prop:subject [c1]) (eq ?Y17:mps 1.0) (eq ?prop:predicate ?Y17) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y18 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y18:metros 7.0) (eq ?prop:predicate ?Y18) (eq ?prop:time 3.0)))
(find-all-instances ((?prop Proposition) (?Y19 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y19:kgs 50.0) (eq ?prop:predicate ?Y19) (eq ?prop:time 9.0)))
(find-all-instances ((?prop Proposition) (?Y20 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y20:kgs 50.0) (eq ?prop:predicate ?Y20) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y21 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y21) (eq ?prop:time 1.0)))
(find-all-instances ((?prop Proposition) (?Y22 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y22:otro [c2]) (eq ?prop:predicate ?Y22) (eq ?prop:time 19.0)))
(find-all-instances ((?prop Proposition) (?Y23 EstaADistancia)) (and (eq ?prop:subject [c2]) (eq ?Y23:otro [c1]) (eq ?prop:predicate ?Y23) (eq ?prop:time 19.0)))
(find-all-instances ((?prop Proposition) (?Y24 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y24:otro [c2]) (eq ?prop:predicate ?Y24) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y25 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y25) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y26 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y26) (eq ?prop:time 99.0)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot metros (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot metros (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot mps (type ?VARIABLE)))
(defclass Anda (is-a TieneVelocidad) (slot longitud_zancada (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot mps2 (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot newton (type ?VARIABLE)))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq (class ?X3) Cuerpo)|:(subclassp (class ?X3) Cuerpo)) (predicate ?Y2&:(eq (class ?Y2) TienePosicion)|:(subclassp (class ?Y2) TienePosicion)) (time ?X4))) (test (< ?X4 100.0)) (test (neq (send ?Y1 get-metros) (send ?Y2 get-metros))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of EstaADistancia (otro ?X3) (metros (- (send ?Y1 get-metros) (send ?Y2 get-metros))))) (time ?X4)))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TienePosicion)|:(subclassp (class ?Y3) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneVelocidad)|:(subclassp (class ?Y4) TieneVelocidad)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (metros (+ (send ?Y3 get-metros) (send ?Y4 get-mps))))) (time (+ ?X4 1.0))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) TieneVelocidad)|:(subclassp (class ?Y5) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneAceleracion)|:(subclassp (class ?Y6) TieneAceleracion)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (mps (+ (send ?Y5 get-mps) (send ?Y6 get-mps2))))) (time (+ ?X4 1.0))))
(defrule r4 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y7&:(eq (class ?Y7) SufreFuerza)|:(subclassp (class ?Y7) SufreFuerza)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y8&:(eq (class ?Y8) TieneAceleracion)|:(subclassp (class ?Y8) TieneAceleracion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y9&:(eq (class ?Y9) TieneMasa)|:(subclassp (class ?Y9) TieneMasa)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneAceleracion (mps2 (+ (send ?Y8 get-mps2) (** (/ (send ?Y7 get-newton) (send ?Y9 get-kgs)) (/ 1.0 2.0)))))) (time (+ ?X4 1.0))))
(defrule r5 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y10&:(eq (class ?Y10) EstaADistancia)|:(subclassp (class ?Y10) EstaADistancia)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y11&:(eq (class ?Y11) TieneMasa)|:(subclassp (class ?Y11) TieneMasa)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq ?X3 (send ?Y10 get-otro))) (predicate ?Y12&:(eq (class ?Y12) TieneMasa)|:(subclassp (class ?Y12) TieneMasa)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of SufreFuerza (newton (/ (* (send ?Y11 get-kgs) (send ?Y12 get-kgs)) (** (send ?Y10 get-metros) 2.0))))) (time (+ ?X4 1.0))))
(defrule r6 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y13&:(eq (class ?Y13) TieneMasa)|:(subclassp (class ?Y13) TieneMasa)) (time ?X3))) (test (< ?X3 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y13 get-kgs)))) (time (+ ?X3 1.0))))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs 100.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs 50.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (metros 5.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (metros 10.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (mps 1.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneVelocidad (mps 1.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (mps2 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (mps2 0.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (newton 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (newton 0.0))) (time 1.0))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(find-all-instances ((?prop Proposition) (?Y14 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y14:metros 5.0) (eq ?prop:predicate ?Y14) (eq ?prop:time 1.0)))
(find-all-instances ((?prop Proposition) (?Y15 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y15) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y16 TienePosicion)) (and (eq ?prop:subject [c2]) (eq ?prop:predicate ?Y16) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y17 TieneVelocidad)) (and (eq ?prop:subject [c1]) (eq ?Y17:mps 1.0) (eq ?prop:predicate ?Y17) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y18 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y18:metros 7.0) (eq ?prop:predicate ?Y18) (eq ?prop:time 3.0)))
(find-all-instances ((?prop Proposition) (?Y19 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y19:kgs 50.0) (eq ?prop:predicate ?Y19) (eq ?prop:time 9.0)))
(find-all-instances ((?prop Proposition) (?Y20 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y20:kgs 50.0) (eq ?prop:predicate ?Y20) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y21 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y21) (eq ?prop:time 1.0)))
(find-all-instances ((?prop Proposition) (?Y22 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y22:otro [c2]) (eq ?prop:predicate ?Y22) (eq ?prop:time 19.0)))
(find-all-instances ((?prop Proposition) (?Y23 EstaADistancia)) (and (eq ?prop:subject [c2]) (eq ?Y23:otro [c1]) (eq ?prop:predicate ?Y23) (eq ?prop:time 19.0)))
(find-all-instances ((?prop Proposition) (?Y24 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y24:otro [c2]) (eq ?prop:predicate ?Y24) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y25 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y25) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y26 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y26) (eq ?prop:time 99.0)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot metros (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot metros (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot mps (type ?VARIABLE)))
(defclass Anda (is-a TieneVelocidad) (slot longitud_zancada (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot mps2 (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot newton (type ?VARIABLE)))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq (class ?X3) Cuerpo)|:(subclassp (class ?X3) Cuerpo)) (predicate ?Y2&:(eq (class ?Y2) TienePosicion)|:(subclassp (class ?Y2) TienePosicion)) (time ?X4))) (test (< ?X4 100.0)) (test (neq (send ?Y1 get-metros) (send ?Y2 get-metros))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of EstaADistancia (otro ?X3) (metros (- (send ?Y1 get-metros) (send ?Y2 get-metros))))) (time ?X4)))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TienePosicion)|:(subclassp (class ?Y3) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneVelocidad)|:(subclassp (class ?Y4) TieneVelocidad)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (metros (+ (send ?Y3 get-metros) (send ?Y4 get-mps))))) (time (+ ?X4 1.0))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) TieneVelocidad)|:(subclassp (class ?Y5) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneAceleracion)|:(subclassp (class ?Y6) TieneAceleracion)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (mps (+ (send ?Y5 get-mps) (send ?Y6 get-mps2))))) (time (+ ?X4 1.0))))
(defrule r4 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y7&:(eq (class ?Y7) SufreFuerza)|:(subclassp (class ?Y7) SufreFuerza)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y8&:(eq (class ?Y8) TieneAceleracion)|:(subclassp (class ?Y8) TieneAceleracion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y9&:(eq (class ?Y9) TieneMasa)|:(subclassp (class ?Y9) TieneMasa)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneAceleracion (mps2 (+ (send ?Y8 get-mps2) (** (/ (send ?Y7 get-newton) (send ?Y9 get-kgs)) (/ 1.0 2.0)))))) (time (+ ?X4 1.0))))
(defrule r5 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y10&:(eq (class ?Y10) EstaADistancia)|:(subclassp (class ?Y10) EstaADistancia)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y11&:(eq (class ?Y11) TieneMasa)|:(subclassp (class ?Y11) TieneMasa)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq ?X3 (send ?Y10 get-otro))) (predicate ?Y12&:(eq (class ?Y12) TieneMasa)|:(subclassp (class ?Y12) TieneMasa)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of SufreFuerza (newton (/ (* (send ?Y11 get-kgs) (send ?Y12 get-kgs)) (** (send ?Y10 get-metros) 2.0))))) (time (+ ?X4 1.0))))
(defrule r6 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y13&:(eq (class ?Y13) TieneMasa)|:(subclassp (class ?Y13) TieneMasa)) (time ?X3))) (test (< ?X3 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y13 get-kgs)))) (time (+ ?X3 1.0))))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs 100.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs 50.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (metros 5.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (metros 10.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (mps 1.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneVelocidad (mps 1.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (mps2 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (mps2 0.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (newton 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (newton 0.0))) (time 1.0))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(find-all-instances ((?prop Proposition) (?Y14 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y14:metros 5.0) (eq ?prop:predicate ?Y14) (eq ?prop:time 1.0)))
(find-all-instances ((?prop Proposition) (?Y15 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y15) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y16 TienePosicion)) (and (eq ?prop:subject [c2]) (eq ?prop:predicate ?Y16) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y17 TieneVelocidad)) (and (eq ?prop:subject [c1]) (eq ?Y17:mps 1.0) (eq ?prop:predicate ?Y17) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y18 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y18:metros 7.0) (eq ?prop:predicate ?Y18) (eq ?prop:time 3.0)))
(find-all-instances ((?prop Proposition) (?Y19 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y19:kgs 50.0) (eq ?prop:predicate ?Y19) (eq ?prop:time 9.0)))
(find-all-instances ((?prop Proposition) (?Y20 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y20:kgs 50.0) (eq ?prop:predicate ?Y20) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y21 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y21) (eq ?prop:time 1.0)))
(find-all-instances ((?prop Proposition) (?Y22 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y22:otro [c2]) (eq ?prop:predicate ?Y22) (eq ?prop:time 19.0)))
(find-all-instances ((?prop Proposition) (?Y23 EstaADistancia)) (and (eq ?prop:subject [c2]) (eq ?Y23:otro [c1]) (eq ?prop:predicate ?Y23) (eq ?prop:time 19.0)))
(find-all-instances ((?prop Proposition) (?Y24 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y24:otro [c2]) (eq ?prop:predicate ?Y24) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y25 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y25) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y26 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y26) (eq ?prop:time 99.0)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot metros (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot metros (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot mps (type ?VARIABLE)))
(defclass Anda (is-a TieneVelocidad) (slot longitud_zancada (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot mps2 (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot newton (type ?VARIABLE)))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq (class ?X3) Cuerpo)|:(subclassp (class ?X3) Cuerpo)) (predicate ?Y2&:(eq (class ?Y2) TienePosicion)|:(subclassp (class ?Y2) TienePosicion)) (time ?X4))) (test (< ?X4 100.0)) (test (neq (send ?Y1 get-metros) (send ?Y2 get-metros))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of EstaADistancia (otro ?X3) (metros (- (send ?Y1 get-metros) (send ?Y2 get-metros))))) (time ?X4)))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TienePosicion)|:(subclassp (class ?Y3) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneVelocidad)|:(subclassp (class ?Y4) TieneVelocidad)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (metros (+ (send ?Y3 get-metros) (send ?Y4 get-mps))))) (time (+ ?X4 1.0))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) TieneVelocidad)|:(subclassp (class ?Y5) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneAceleracion)|:(subclassp (class ?Y6) TieneAceleracion)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (mps (+ (send ?Y5 get-mps) (send ?Y6 get-mps2))))) (time (+ ?X4 1.0))))
(defrule r4 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y7&:(eq (class ?Y7) SufreFuerza)|:(subclassp (class ?Y7) SufreFuerza)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y8&:(eq (class ?Y8) TieneAceleracion)|:(subclassp (class ?Y8) TieneAceleracion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y9&:(eq (class ?Y9) TieneMasa)|:(subclassp (class ?Y9) TieneMasa)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneAceleracion (mps2 (+ (send ?Y8 get-mps2) (** (/ (send ?Y7 get-newton) (send ?Y9 get-kgs)) (/ 1.0 2.0)))))) (time (+ ?X4 1.0))))
(defrule r5 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y10&:(eq (class ?Y10) EstaADistancia)|:(subclassp (class ?Y10) EstaADistancia)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y11&:(eq (class ?Y11) TieneMasa)|:(subclassp (class ?Y11) TieneMasa)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq ?X3 (send ?Y10 get-otro))) (predicate ?Y12&:(eq (class ?Y12) TieneMasa)|:(subclassp (class ?Y12) TieneMasa)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of SufreFuerza (newton (/ (* (send ?Y11 get-kgs) (send ?Y12 get-kgs)) (** (send ?Y10 get-metros) 2.0))))) (time (+ ?X4 1.0))))
(defrule r6 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y13&:(eq (class ?Y13) TieneMasa)|:(subclassp (class ?Y13) TieneMasa)) (time ?X3))) (test (< ?X3 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y13 get-kgs)))) (time (+ ?X3 1.0))))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs 100.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs 50.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (metros 5.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (metros 10.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (mps 1.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneVelocidad (mps 1.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (mps2 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (mps2 0.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (newton 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (newton 0.0))) (time 1.0))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(find-all-instances ((?prop Proposition) (?Y14 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y14:metros 5.0) (eq ?prop:predicate ?Y14) (eq ?prop:time 1.0)))
(find-all-instances ((?prop Proposition) (?Y15 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y15) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y16 TienePosicion)) (and (eq ?prop:subject [c2]) (eq ?prop:predicate ?Y16) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y17 TieneVelocidad)) (and (eq ?prop:subject [c1]) (eq ?Y17:mps 1.0) (eq ?prop:predicate ?Y17) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y18 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y18:metros 7.0) (eq ?prop:predicate ?Y18) (eq ?prop:time 3.0)))
(find-all-instances ((?prop Proposition) (?Y19 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y19:kgs 50.0) (eq ?prop:predicate ?Y19) (eq ?prop:time 9.0)))
(find-all-instances ((?prop Proposition) (?Y20 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y20:kgs 50.0) (eq ?prop:predicate ?Y20) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y21 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y21) (eq ?prop:time 1.0)))
(find-all-instances ((?prop Proposition) (?Y22 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y22:otro [c2]) (eq ?prop:predicate ?Y22) (eq ?prop:time 19.0)))
(find-all-instances ((?prop Proposition) (?Y23 EstaADistancia)) (and (eq ?prop:subject [c2]) (eq ?Y23:otro [c1]) (eq ?prop:predicate ?Y23) (eq ?prop:time 19.0)))
(find-all-instances ((?prop Proposition) (?Y24 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y24:otro [c2]) (eq ?prop:predicate ?Y24) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y25 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y25) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y26 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y26) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y27 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y27)))
(find-all-instances ((?prop Proposition) (?Y28 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y28:otro [c2]) (eq ?prop:predicate ?Y28)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot metros (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot metros (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot mps (type ?VARIABLE)))
(defclass Anda (is-a TieneVelocidad) (slot longitud_zancada (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot mps2 (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot newton (type ?VARIABLE)))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq (class ?X3) Cuerpo)|:(subclassp (class ?X3) Cuerpo)) (predicate ?Y2&:(eq (class ?Y2) TienePosicion)|:(subclassp (class ?Y2) TienePosicion)) (time ?X4))) (test (< ?X4 100.0)) (test (neq (send ?Y1 get-metros) (send ?Y2 get-metros))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of EstaADistancia (otro ?X3) (metros (- (send ?Y1 get-metros) (send ?Y2 get-metros))))) (time ?X4)))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TienePosicion)|:(subclassp (class ?Y3) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneVelocidad)|:(subclassp (class ?Y4) TieneVelocidad)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (metros (+ (send ?Y3 get-metros) (send ?Y4 get-mps))))) (time (+ ?X4 1.0))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) TieneVelocidad)|:(subclassp (class ?Y5) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneAceleracion)|:(subclassp (class ?Y6) TieneAceleracion)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (mps (+ (send ?Y5 get-mps) (send ?Y6 get-mps2))))) (time (+ ?X4 1.0))))
(defrule r4 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y7&:(eq (class ?Y7) SufreFuerza)|:(subclassp (class ?Y7) SufreFuerza)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y8&:(eq (class ?Y8) TieneAceleracion)|:(subclassp (class ?Y8) TieneAceleracion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y9&:(eq (class ?Y9) TieneMasa)|:(subclassp (class ?Y9) TieneMasa)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneAceleracion (mps2 (+ (send ?Y8 get-mps2) (** (/ (send ?Y7 get-newton) (send ?Y9 get-kgs)) (/ 1.0 2.0)))))) (time (+ ?X4 1.0))))
(defrule r5 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y10&:(eq (class ?Y10) EstaADistancia)|:(subclassp (class ?Y10) EstaADistancia)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y11&:(eq (class ?Y11) TieneMasa)|:(subclassp (class ?Y11) TieneMasa)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq ?X3 (send ?Y10 get-otro))) (predicate ?Y12&:(eq (class ?Y12) TieneMasa)|:(subclassp (class ?Y12) TieneMasa)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of SufreFuerza (newton (/ (* (send ?Y11 get-kgs) (send ?Y12 get-kgs)) (** (send ?Y10 get-metros) 2.0))))) (time (+ ?X4 1.0))))
(defrule r6 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y13&:(eq (class ?Y13) TieneMasa)|:(subclassp (class ?Y13) TieneMasa)) (time ?X3))) (test (< ?X3 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y13 get-kgs)))) (time (+ ?X3 1.0))))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs 100.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs 50.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (metros 5.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (metros 10.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (mps 1.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneVelocidad (mps 1.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (mps2 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (mps2 0.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (newton 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (newton 0.0))) (time 1.0))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(find-all-instances ((?prop Proposition) (?Y14 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y14:metros 5.0) (eq ?prop:predicate ?Y14) (eq ?prop:time 1.0)))
(find-all-instances ((?prop Proposition) (?Y15 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y15) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y16 TienePosicion)) (and (eq ?prop:subject [c2]) (eq ?prop:predicate ?Y16) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y17 TieneVelocidad)) (and (eq ?prop:subject [c1]) (eq ?Y17:mps 1.0) (eq ?prop:predicate ?Y17) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y18 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y18:metros 7.0) (eq ?prop:predicate ?Y18) (eq ?prop:time 3.0)))
(find-all-instances ((?prop Proposition) (?Y19 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y19:kgs 50.0) (eq ?prop:predicate ?Y19) (eq ?prop:time 9.0)))
(find-all-instances ((?prop Proposition) (?Y20 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y20:kgs 50.0) (eq ?prop:predicate ?Y20) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y21 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y21) (eq ?prop:time 1.0)))
(find-all-instances ((?prop Proposition) (?Y22 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y22:otro [c2]) (eq ?prop:predicate ?Y22) (eq ?prop:time 19.0)))
(find-all-instances ((?prop Proposition) (?Y23 EstaADistancia)) (and (eq ?prop:subject [c2]) (eq ?Y23:otro [c1]) (eq ?prop:predicate ?Y23) (eq ?prop:time 19.0)))
(find-all-instances ((?prop Proposition) (?Y24 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y24:otro [c2]) (eq ?prop:predicate ?Y24) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y25 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y25) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y26 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y26) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y27 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y27)))
(find-all-instances ((?prop Proposition) (?Y28 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y28:otro [c2]) (eq ?prop:predicate ?Y28)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot y (type ?VARIABLE)) (slot x (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot mts (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot y (type ?VARIABLE)) (slot x (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot y (type ?VARIABLE)) (slot x (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot y (type ?VARIABLE)) (slot x (type ?VARIABLE)))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs 750.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs 750.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (y 0.0) (x 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (y 100.0) (x 0.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (y 0.0) (x -2.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneVelocidad (y 0.0) (x 2.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (y 0.0) (x 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (y 0.0) (x 0.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (y 0.0) (x 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (y 0.0) (x 0.0))) (time 1.0))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(eq (class ?Y2) TieneVelocidad)|:(subclassp (class ?Y2) TieneVelocidad)) (time ?X4))) (test (< ?X4 10000.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (y (+ (send ?Y1 get-y) (send ?Y2 get-y))) (x (+ (send ?Y1 get-x) (send ?Y2 get-x))))) (time (+ ?X4 1.0))))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TieneVelocidad)|:(subclassp (class ?Y3) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneAceleracion)|:(subclassp (class ?Y4) TieneAceleracion)) (time ?X4))) (test (< ?X4 10000.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (y (+ (send ?Y3 get-y) (send ?Y4 get-y))) (x (+ (send ?Y3 get-x) (send ?Y4 get-x))))) (time (+ ?X4 1.0))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) SufreFuerza)|:(subclassp (class ?Y5) SufreFuerza)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneMasa)|:(subclassp (class ?Y6) TieneMasa)) (time ?X4))) (test (< ?X4 10000.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneAceleracion (y (/ (send ?Y5 get-y) (send ?Y6 get-kgs))) (x (/ (send ?Y5 get-x) (send ?Y6 get-kgs))))) (time (+ ?X4 1.0))))
(defrule r4 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y7&:(eq (class ?Y7) TienePosicion)|:(subclassp (class ?Y7) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y8&:(eq (class ?Y8) TieneMasa)|:(subclassp (class ?Y8) TieneMasa)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X6&:(eq (class ?X6) Cuerpo)|:(subclassp (class ?X6) Cuerpo)) (predicate ?Y9&:(eq (class ?Y9) TienePosicion)|:(subclassp (class ?Y9) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X6) (predicate ?Y10&:(eq (class ?Y10) TieneMasa)|:(subclassp (class ?Y10) TieneMasa)) (time ?X4))) (test (< ?X4 10000.0)) (test (neq ?X1 ?X6)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of SufreFuerza (y (- 0.0 (/ (* (* (send ?Y8 get-kgs) (send ?Y10 get-kgs)) (- (send ?Y7 get-y) (send ?Y9 get-y))) (** (+ (** (- (send ?Y7 get-x) (send ?Y9 get-x)) 2.0) (** (- (send ?Y7 get-y) (send ?Y9 get-y)) 2.0)) (/ 3.0 2.0))))) (x (- 0.0 (/ (* (* (send ?Y8 get-kgs) (send ?Y10 get-kgs)) (- (send ?Y7 get-x) (send ?Y9 get-x))) (** (+ (** (- (send ?Y7 get-x) (send ?Y9 get-x)) 2.0) (** (- (send ?Y7 get-y) (send ?Y9 get-y)) 2.0)) (/ 3.0 2.0))))))) (time (+ ?X4 1.0))))
(defrule r5 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y11&:(eq (class ?Y11) TieneMasa)|:(subclassp (class ?Y11) TieneMasa)) (time ?X3))) (test (< ?X3 10000.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y11 get-kgs)))) (time (+ ?X3 1.0))))
(find-all-instances ((?prop Proposition) (?Y12 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y12)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot y (type ?VARIABLE)) (slot x (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot mts (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot y (type ?VARIABLE)) (slot x (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot y (type ?VARIABLE)) (slot x (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot y (type ?VARIABLE)) (slot x (type ?VARIABLE)))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs 750.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs 750.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (y 0.0) (x 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (y 100.0) (x 0.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (y 0.0) (x -2.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneVelocidad (y 0.0) (x 2.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (y 0.0) (x 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (y 0.0) (x 0.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (y 0.0) (x 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (y 0.0) (x 0.0))) (time 1.0))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(eq (class ?Y2) TieneVelocidad)|:(subclassp (class ?Y2) TieneVelocidad)) (time ?X4))) (test (< ?X4 1000.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (y (+ (send ?Y1 get-y) (send ?Y2 get-y))) (x (+ (send ?Y1 get-x) (send ?Y2 get-x))))) (time (+ ?X4 1.0))))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TieneVelocidad)|:(subclassp (class ?Y3) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneAceleracion)|:(subclassp (class ?Y4) TieneAceleracion)) (time ?X4))) (test (< ?X4 1000.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (y (+ (send ?Y3 get-y) (send ?Y4 get-y))) (x (+ (send ?Y3 get-x) (send ?Y4 get-x))))) (time (+ ?X4 1.0))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) SufreFuerza)|:(subclassp (class ?Y5) SufreFuerza)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneMasa)|:(subclassp (class ?Y6) TieneMasa)) (time ?X4))) (test (< ?X4 1000.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneAceleracion (y (/ (send ?Y5 get-y) (send ?Y6 get-kgs))) (x (/ (send ?Y5 get-x) (send ?Y6 get-kgs))))) (time (+ ?X4 1.0))))
(defrule r4 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y7&:(eq (class ?Y7) TienePosicion)|:(subclassp (class ?Y7) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y8&:(eq (class ?Y8) TieneMasa)|:(subclassp (class ?Y8) TieneMasa)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X6&:(eq (class ?X6) Cuerpo)|:(subclassp (class ?X6) Cuerpo)) (predicate ?Y9&:(eq (class ?Y9) TienePosicion)|:(subclassp (class ?Y9) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X6) (predicate ?Y10&:(eq (class ?Y10) TieneMasa)|:(subclassp (class ?Y10) TieneMasa)) (time ?X4))) (test (< ?X4 1000.0)) (test (neq ?X1 ?X6)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of SufreFuerza (y (- 0.0 (/ (* (* (send ?Y8 get-kgs) (send ?Y10 get-kgs)) (- (send ?Y7 get-y) (send ?Y9 get-y))) (** (+ (** (- (send ?Y7 get-x) (send ?Y9 get-x)) 2.0) (** (- (send ?Y7 get-y) (send ?Y9 get-y)) 2.0)) (/ 3.0 2.0))))) (x (- 0.0 (/ (* (* (send ?Y8 get-kgs) (send ?Y10 get-kgs)) (- (send ?Y7 get-x) (send ?Y9 get-x))) (** (+ (** (- (send ?Y7 get-x) (send ?Y9 get-x)) 2.0) (** (- (send ?Y7 get-y) (send ?Y9 get-y)) 2.0)) (/ 3.0 2.0))))))) (time (+ ?X4 1.0))))
(defrule r5 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y11&:(eq (class ?Y11) TieneMasa)|:(subclassp (class ?Y11) TieneMasa)) (time ?X3))) (test (< ?X3 1000.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y11 get-kgs)))) (time (+ ?X3 1.0))))
(find-all-instances ((?prop Proposition) (?Y12 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y12)))
(find-all-instances ((?prop Proposition) (?Y13 TienePosicion)) (and (eq ?prop:subject [c2]) (eq ?prop:predicate ?Y13)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot y (type ?VARIABLE)) (slot x (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot mts (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot y (type ?VARIABLE)) (slot x (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot y (type ?VARIABLE)) (slot x (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot y (type ?VARIABLE)) (slot x (type ?VARIABLE)))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs 750.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs 750.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (y 0.0) (x 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (y 100.0) (x 0.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (y 0.0) (x -2.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneVelocidad (y 0.0) (x 2.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (y 0.0) (x 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (y 0.0) (x 0.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (y 0.0) (x 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (y 0.0) (x 0.0))) (time 1.0))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(eq (class ?Y2) TieneVelocidad)|:(subclassp (class ?Y2) TieneVelocidad)) (time ?X4))) (test (< ?X4 1000.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (y (+ (send ?Y1 get-y) (send ?Y2 get-y))) (x (+ (send ?Y1 get-x) (send ?Y2 get-x))))) (time (+ ?X4 1.0))))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TieneVelocidad)|:(subclassp (class ?Y3) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneAceleracion)|:(subclassp (class ?Y4) TieneAceleracion)) (time ?X4))) (test (< ?X4 1000.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (y (+ (send ?Y3 get-y) (send ?Y4 get-y))) (x (+ (send ?Y3 get-x) (send ?Y4 get-x))))) (time (+ ?X4 1.0))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) SufreFuerza)|:(subclassp (class ?Y5) SufreFuerza)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneMasa)|:(subclassp (class ?Y6) TieneMasa)) (time ?X4))) (test (< ?X4 1000.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneAceleracion (y (/ (send ?Y5 get-y) (send ?Y6 get-kgs))) (x (/ (send ?Y5 get-x) (send ?Y6 get-kgs))))) (time (+ ?X4 1.0))))
(defrule r4 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y7&:(eq (class ?Y7) TienePosicion)|:(subclassp (class ?Y7) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y8&:(eq (class ?Y8) TieneMasa)|:(subclassp (class ?Y8) TieneMasa)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X6&:(eq (class ?X6) Cuerpo)|:(subclassp (class ?X6) Cuerpo)) (predicate ?Y9&:(eq (class ?Y9) TienePosicion)|:(subclassp (class ?Y9) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X6) (predicate ?Y10&:(eq (class ?Y10) TieneMasa)|:(subclassp (class ?Y10) TieneMasa)) (time ?X4))) (test (< ?X4 1000.0)) (test (neq ?X1 ?X6)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of SufreFuerza (y (- 0.0 (/ (* (* (send ?Y8 get-kgs) (send ?Y10 get-kgs)) (- (send ?Y7 get-y) (send ?Y9 get-y))) (** (+ (** (- (send ?Y7 get-x) (send ?Y9 get-x)) 2.0) (** (- (send ?Y7 get-y) (send ?Y9 get-y)) 2.0)) (/ 3.0 2.0))))) (x (- 0.0 (/ (* (* (send ?Y8 get-kgs) (send ?Y10 get-kgs)) (- (send ?Y7 get-x) (send ?Y9 get-x))) (** (+ (** (- (send ?Y7 get-x) (send ?Y9 get-x)) 2.0) (** (- (send ?Y7 get-y) (send ?Y9 get-y)) 2.0)) (/ 3.0 2.0))))))) (time (+ ?X4 1.0))))
(defrule r5 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y11&:(eq (class ?Y11) TieneMasa)|:(subclassp (class ?Y11) TieneMasa)) (time ?X3))) (test (< ?X3 1000.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y11 get-kgs)))) (time (+ ?X3 1.0))))
(find-all-instances ((?prop Proposition) (?Y12 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y12)))
(find-all-instances ((?prop Proposition) (?Y13 TienePosicion)) (and (eq ?prop:subject [c2]) (eq ?prop:predicate ?Y13)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot y (type ?VARIABLE)) (slot x (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot mts (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot y (type ?VARIABLE)) (slot x (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot y (type ?VARIABLE)) (slot x (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot y (type ?VARIABLE)) (slot x (type ?VARIABLE)))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs 750.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs 750.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (y 0.0) (x 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (y 100.0) (x 0.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (y 0.0) (x -2.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneVelocidad (y 0.0) (x 2.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (y 0.0) (x 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (y 0.0) (x 0.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (y 0.0) (x 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (y 0.0) (x 0.0))) (time 1.0))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(eq (class ?Y2) TieneVelocidad)|:(subclassp (class ?Y2) TieneVelocidad)) (time ?X4))) (test (< ?X4 1000.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (y (+ (send ?Y1 get-y) (send ?Y2 get-y))) (x (+ (send ?Y1 get-x) (send ?Y2 get-x))))) (time (+ ?X4 1.0))))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TieneVelocidad)|:(subclassp (class ?Y3) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneAceleracion)|:(subclassp (class ?Y4) TieneAceleracion)) (time ?X4))) (test (< ?X4 1000.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (y (+ (send ?Y3 get-y) (send ?Y4 get-y))) (x (+ (send ?Y3 get-x) (send ?Y4 get-x))))) (time (+ ?X4 1.0))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) SufreFuerza)|:(subclassp (class ?Y5) SufreFuerza)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneMasa)|:(subclassp (class ?Y6) TieneMasa)) (time ?X4))) (test (< ?X4 1000.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneAceleracion (y (/ (send ?Y5 get-y) (send ?Y6 get-kgs))) (x (/ (send ?Y5 get-x) (send ?Y6 get-kgs))))) (time (+ ?X4 1.0))))
(defrule r4 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y7&:(eq (class ?Y7) TienePosicion)|:(subclassp (class ?Y7) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y8&:(eq (class ?Y8) TieneMasa)|:(subclassp (class ?Y8) TieneMasa)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X6&:(eq (class ?X6) Cuerpo)|:(subclassp (class ?X6) Cuerpo)) (predicate ?Y9&:(eq (class ?Y9) TienePosicion)|:(subclassp (class ?Y9) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X6) (predicate ?Y10&:(eq (class ?Y10) TieneMasa)|:(subclassp (class ?Y10) TieneMasa)) (time ?X4))) (test (< ?X4 1000.0)) (test (neq ?X1 ?X6)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of SufreFuerza (y (- 0.0 (/ (* (* (send ?Y8 get-kgs) (send ?Y10 get-kgs)) (- (send ?Y7 get-y) (send ?Y9 get-y))) (** (+ (** (- (send ?Y7 get-x) (send ?Y9 get-x)) 2.0) (** (- (send ?Y7 get-y) (send ?Y9 get-y)) 2.0)) (/ 3.0 2.0))))) (x (- 0.0 (/ (* (* (send ?Y8 get-kgs) (send ?Y10 get-kgs)) (- (send ?Y7 get-x) (send ?Y9 get-x))) (** (+ (** (- (send ?Y7 get-x) (send ?Y9 get-x)) 2.0) (** (- (send ?Y7 get-y) (send ?Y9 get-y)) 2.0)) (/ 3.0 2.0))))))) (time (+ ?X4 1.0))))
(defrule r5 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y11&:(eq (class ?Y11) TieneMasa)|:(subclassp (class ?Y11) TieneMasa)) (time ?X3))) (test (< ?X3 1000.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y11 get-kgs)))) (time (+ ?X3 1.0))))
(find-all-instances ((?prop Proposition) (?Y12 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y12)))
(find-all-instances ((?prop Proposition) (?Y13 TienePosicion)) (and (eq ?prop:subject [c2]) (eq ?prop:predicate ?Y13)))
(defclass Name (is-a USER))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(defclass Proposition (is-a USER) (slot subject (type INSTANCE)) (slot predicate (type INSTANCE)) (slot time (type ?VARIABLE)))
(defclass Cuerpo (is-a Thing))
(defclass TieneMasa (is-a State) (slot kgs (type ?VARIABLE)))
(defclass TienePosicion (is-a State) (slot metros (type ?VARIABLE)))
(defclass EstaADistancia (is-a State) (slot otro (type INSTANCE)) (slot metros (type ?VARIABLE)))
(defclass TieneVelocidad (is-a State) (slot mps (type ?VARIABLE)))
(defclass Anda (is-a TieneVelocidad) (slot longitud_zancada (type ?VARIABLE)))
(defclass TieneAceleracion (is-a State) (slot mps2 (type ?VARIABLE)))
(defclass SufreFuerza (is-a State) (slot newton (type ?VARIABLE)))
(defrule r1 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y1&:(eq (class ?Y1) TienePosicion)|:(subclassp (class ?Y1) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq (class ?X3) Cuerpo)|:(subclassp (class ?X3) Cuerpo)) (predicate ?Y2&:(eq (class ?Y2) TienePosicion)|:(subclassp (class ?Y2) TienePosicion)) (time ?X4))) (test (< ?X4 100.0)) (test (neq (send ?Y1 get-metros) (send ?Y2 get-metros))) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of EstaADistancia (otro ?X3) (metros (- (send ?Y1 get-metros) (send ?Y2 get-metros))))) (time ?X4)))
(defrule r2 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y3&:(eq (class ?Y3) TienePosicion)|:(subclassp (class ?Y3) TienePosicion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y4&:(eq (class ?Y4) TieneVelocidad)|:(subclassp (class ?Y4) TieneVelocidad)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TienePosicion (metros (+ (send ?Y3 get-metros) (send ?Y4 get-mps))))) (time (+ ?X4 1.0))))
(defrule r3 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y5&:(eq (class ?Y5) TieneVelocidad)|:(subclassp (class ?Y5) TieneVelocidad)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y6&:(eq (class ?Y6) TieneAceleracion)|:(subclassp (class ?Y6) TieneAceleracion)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneVelocidad (mps (+ (send ?Y5 get-mps) (send ?Y6 get-mps2))))) (time (+ ?X4 1.0))))
(defrule r4 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y7&:(eq (class ?Y7) SufreFuerza)|:(subclassp (class ?Y7) SufreFuerza)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y8&:(eq (class ?Y8) TieneAceleracion)|:(subclassp (class ?Y8) TieneAceleracion)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y9&:(eq (class ?Y9) TieneMasa)|:(subclassp (class ?Y9) TieneMasa)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneAceleracion (mps2 (+ (send ?Y8 get-mps2) (** (/ (send ?Y7 get-newton) (send ?Y9 get-kgs)) (/ 1.0 2.0)))))) (time (+ ?X4 1.0))))
(defrule r5 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y10&:(eq (class ?Y10) EstaADistancia)|:(subclassp (class ?Y10) EstaADistancia)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y11&:(eq (class ?Y11) TieneMasa)|:(subclassp (class ?Y11) TieneMasa)) (time ?X4))) (logical (object (is-a Proposition) (subject ?X3&:(eq ?X3 (send ?Y10 get-otro))) (predicate ?Y12&:(eq (class ?Y12) TieneMasa)|:(subclassp (class ?Y12) TieneMasa)) (time ?X4))) (test (< ?X4 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of SufreFuerza (newton (/ (* (send ?Y11 get-kgs) (send ?Y12 get-kgs)) (** (send ?Y10 get-metros) 2.0))))) (time (+ ?X4 1.0))))
(defrule r6 (logical (object (is-a Proposition) (subject ?X1&:(eq (class ?X1) Cuerpo)|:(subclassp (class ?X1) Cuerpo)) (predicate ?Y13&:(eq (class ?Y13) TieneMasa)|:(subclassp (class ?Y13) TieneMasa)) (time ?X3))) (test (< ?X3 100.0)) => (make-instance of Proposition (subject ?X1) (predicate (make-instance of TieneMasa (kgs (send ?Y13 get-kgs)))) (time (+ ?X3 1.0))))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneMasa (kgs 100.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneMasa (kgs 50.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TienePosicion (metros 5.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TienePosicion (metros 10.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneVelocidad (mps 1.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of Anda (longitud_zancada 2.0) (mps 1.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of TieneAceleracion (mps2 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of TieneAceleracion (mps2 0.0))) (time 1.0))
(make-instance of Proposition (subject [c1]) (predicate (make-instance of SufreFuerza (newton 0.0))) (time 1.0))
(make-instance of Proposition (subject [c2]) (predicate (make-instance of SufreFuerza (newton 0.0))) (time 1.0))
(make-instance [c1] of Cuerpo)
(make-instance [c2] of Cuerpo)
(find-all-instances ((?prop Proposition) (?Y14 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y14:metros 5.0) (eq ?prop:predicate ?Y14) (eq ?prop:time 1.0)))
(find-all-instances ((?prop Proposition) (?Y15 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y15) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y16 TienePosicion)) (and (eq ?prop:subject [c2]) (eq ?prop:predicate ?Y16) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y17 TieneVelocidad)) (and (eq ?prop:subject [c1]) (eq ?Y17:mps 1.0) (eq ?prop:predicate ?Y17) (eq ?prop:time 2.0)))
(find-all-instances ((?prop Proposition) (?Y18 TienePosicion)) (and (eq ?prop:subject [c1]) (eq ?Y18:metros 7.0) (eq ?prop:predicate ?Y18) (eq ?prop:time 3.0)))
(find-all-instances ((?prop Proposition) (?Y19 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y19:kgs 50.0) (eq ?prop:predicate ?Y19) (eq ?prop:time 9.0)))
(find-all-instances ((?prop Proposition) (?Y20 TieneMasa)) (and (eq ?prop:subject [c2]) (eq ?Y20:kgs 50.0) (eq ?prop:predicate ?Y20) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y21 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y21) (eq ?prop:time 1.0)))
(find-all-instances ((?prop Proposition) (?Y22 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y22:otro [c2]) (eq ?prop:predicate ?Y22) (eq ?prop:time 19.0)))
(find-all-instances ((?prop Proposition) (?Y23 EstaADistancia)) (and (eq ?prop:subject [c2]) (eq ?Y23:otro [c1]) (eq ?prop:predicate ?Y23) (eq ?prop:time 19.0)))
(find-all-instances ((?prop Proposition) (?Y24 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y24:otro [c2]) (eq ?prop:predicate ?Y24) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y25 SufreFuerza)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y25) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y26 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y26) (eq ?prop:time 99.0)))
(find-all-instances ((?prop Proposition) (?Y27 TieneAceleracion)) (and (eq ?prop:subject [c1]) (eq ?prop:predicate ?Y27)))
(find-all-instances ((?prop Proposition) (?Y28 EstaADistancia)) (and (eq ?prop:subject [c1]) (eq ?Y28:otro [c2]) (eq ?prop:predicate ?Y28)))
