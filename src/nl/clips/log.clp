(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-instance ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (= (+ (length$ (find-instance ((?prop Proposition) (?dur Duration))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (eq ?prop:time ?dur)
                               (= ?dur:start (send ?t get-start))
                               (= ?dur:end (send ?t get-end))
                               (eq ?prop:truth ?r))))
                      (length$ (find-instance ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (= ?prop:time ?t)
                               (eq ?prop:truth ?r)))))
                 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule cd0afc7c4d424ce09215685d92a46448 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 6c33d85acb524939bc69fd1916b8f96a (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule a8c6fcfadfd047bba9c6713872602ae4 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule eada1c6ad1014fc2b32b744564d063e7 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule f3df5ad7efc74cd5b8fd1820a993477a (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 4718d39e1a5a4a56ac259f8da064757f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 157631f381964652ab002d8ac820f7c9 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule c66eb33b52274fadb1f64da8f786bc03 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 165cda3408da42d19da3cdf3b0a7636b (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 5936366d38274f0fa7575e7d71fbc61f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 7efab25979f94ba5bf35f7fb7e833eb5 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule e176a96793d44f91abd8e6ca13e7cce3 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 26b24b5408c44ed4b660b278cf1bc5c1 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule f37d48b106834951b72c83f503128205 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 70652350f786432d80b47e567148f8c3 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 2be69b2f8ef8499398b2501e5448713b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 32---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [public]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-instance ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (= (+ (length$ (find-instance ((?prop Proposition) (?dur Duration))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (eq ?prop:time ?dur)
                               (= ?dur:start (send ?t get-start))
                               (= ?dur:end (send ?t get-end))
                               (eq ?prop:truth ?r))))
                      (length$ (find-instance ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (= ?prop:time ?t)
                               (eq ?prop:truth ?r)))))
                 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule d64ba0bd9c944f6fa66fbc15ce48710c (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 91712ffd658543f0bf7029d7b52d3fb1 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 6979965840224e0086d5dfc9d1ec38c0 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule ac0fc8eff90f4a65b7f622745837c0a3 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 75ad12c6e3ff4a64843f563899a8bf97 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 98ab990fc33849fa9e35d6801d32fc77 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule b867d5a683944b7da5f7d25654f41235 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 0432b05e7518486b9113046e698d27fc (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 307ee369ee824f60b4bf70d838f3bfd9 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 235c9d64fbeb4d43bab893bbc93cb47b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule d0f952046aeb47fda73b89277fac91c3 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 0e1038c4456a4260a43f84c210c34a33 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 99dc232438eb4753909051c2a724f521 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule d140cdfa091741f6a510e1f44572dde5 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 35920429b7354991b09f9c8bcdc1c41f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule ec9d95acd85647fca822bacf9c077af8 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 32---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [public]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-instance ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (= (+ (length$ (find-instance ((?prop Proposition) (?dur Duration))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (eq ?prop:time ?dur)
                               (= ?dur:start (send ?t get-start))
                               (= ?dur:end (send ?t get-end))
                               (eq ?prop:truth ?r))))
                      (length$ (find-instance ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (= ?prop:time ?t)
                               (eq ?prop:truth ?r)))))
                 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule c3a0f13c15144a9c9a36c2c22e48bcd0 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 0696c37a270d45318e07b0f6fecd0846 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 24e83a72db744cfc8efbca7c09973d99 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule ad331f95e1824e158e95a75f505319dc (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule fb8903f586fe4877948d262c6606f54b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 743e704f87dd4fe2a147332eacc437c4 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 992ec2d094444a6d8911c1873875c382 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 7face97ecec9407091d7150a88a123b8 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule d7ce86b32f174d10b7122aca99fb7252 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 81765cfee22c4f11a2db5eea14790199 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 1f045eee0f8646d7a720cc3dd6b9d9c5 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 20d1d69a80714e45bc05196873e8486b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 15892ea1f58d4d86a475a80412bb15d4 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 5ca255b1ab884cffb6b090d5205f669a (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 981649c9f99f4129a9d4d091dcc99c4e (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 70fb463d79b145ee9de1d5adeaf2bc78 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 32---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-instance ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (= (+ (length$ (find-instance ((?prop Proposition) (?dur Duration))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (eq ?prop:time ?dur)
                               (= ?dur:start (send ?t get-start))
                               (= ?dur:end (send ?t get-end))
                               (eq ?prop:truth ?r))))
                      (length$ (find-instance ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (= ?prop:time ?t)
                               (eq ?prop:truth ?r)))))
                 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule ac7e53cc0a434857a0f56cc007631f78 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 97b779740b514b4eb36b221b7019baf5 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 078498a7d0e9411a83f3161a44e2ecc4 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 514985c2ecf649f2878c0135d10ee38a (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule a0b9869d17164d7daea0a2e04f44e06c (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule efc30de6bbbd46b6acb651c587f4d059 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 31025e0637b94940ad5ca890c4da59db (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule bf04229cb2e041a492def31d83856716 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule f75df02b4b3d4085b26590681cb04b95 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 9c19248699d34d5f83c17492104bc373 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule eb61d1942cb4466b94a65a406b4593be (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule a75e7b99ea41463b8d4eface85920ce9 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule c31271fd92574f5e8d8e923cfb9466f7 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 59fbe772d37f41ae89c49401c7dcd744 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 0b16258d7d7b434499e7b4c4c6d131e9 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule f18e18cf97854b99a6ae888f97b35143 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 32---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
31


c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-instance ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (= (+ (length$ (find-instance ((?prop Proposition) (?dur Duration))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (eq ?prop:time ?dur)
                               (= ?dur:start (send ?t get-start))
                               (= ?dur:end (send ?t get-end))
                               (eq ?prop:truth ?r))))
                      (length$ (find-instance ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (= ?prop:time ?t)
                               (eq ?prop:truth ?r)))))
                 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule da09c0d69e104eb7b9066039549ef567 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 6a02f3865cd14d1f86551caa21c4c9cb (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 0a9ffe89573947b4993a3eab06be2dd6 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 621da6ec2eb743eb9d054c58285f4e75 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 0da2d7386d874e42bef4ccc38085c757 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 397e090cc14d4dc28a8587aecfba0af1 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 327777f01b62488491013c22d98c195a (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 04932bb756854d19a027846685d0e564 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 0b4779b542e34c85aa1639a871550d2a (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule a7bdaf8ab6834897aa2d0401807f571b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule fd525ed049c14d069f2548f71c1bb85e (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule c7bf01c33cb84834a1f3312817d8ff18 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 800fb91b33de426499980067880d31b0 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 7508749278504ae0a7d27d642dd8c5df (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 8d260cb615014aaba3b16538d93112a8 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 87c3ac98147b4658b713eb048830d67c (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 32---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
31


c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-instance ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (= (+ (length$ (find-instance ((?prop Proposition) (?dur Duration))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (eq ?prop:time ?dur)
                               (= ?dur:start (send ?t get-start))
                               (= ?dur:end (send ?t get-end))
                               (eq ?prop:truth ?r))))
                      (length$ (find-instance ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (= ?prop:time ?t)
                               (eq ?prop:truth ?r)))))
                 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 4e898f0abe31448fbf2e77def16f7e63 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule aefcb00bac52465fa4f302184dba3b21 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 49fb6b8faaa9488fa8203d99f6bea2e9 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 495ee598de984a6ea0550222a89deaff (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 5f2027976cc742889e8d3b7c92a92682 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 67533da35bc14a9eba69ed9cfdf79d44 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule d5d2a77054ed406d92470b5c7e2284a2 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule bf0caedea4df44d58391d4b756b9347b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 5234fe860f7d45d69f48569028443e6f (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 812d5fe5f6f74db9a197711bb1b1ec39 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule aeead7b2b4114859bb21ecb63e322448 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule e019e468db8b4841becb6fcbfa491b85 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 98460bf4219e4068a98c49553194c591 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 3f1326e6af70406785ee13a0492df112 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 2a15a90c35be43d7b1d45cf0ad4a5833 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 0be5c1e7154342e6aa11423be8d7976b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
----------running---------------------
----------runned: 31---------------------
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 2---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
0


no
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-instance ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (= (+ (length$ (find-instance ((?prop Proposition) (?dur Duration))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (eq ?prop:time ?dur)
                               (= ?dur:start (send ?t get-start))
                               (= ?dur:end (send ?t get-end))
                               (eq ?prop:truth ?r))))
                      (length$ (find-instance ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (= ?prop:time ?t)
                               (eq ?prop:truth ?r)))))
                 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 17e3b3344d124d82aa8a5681e7e4c85c (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 2a5211e15b154671874214b869cbe3fd (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule c379d5902a9e46b4bbb72872d0705e3d (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 8b9a5628954941819866d9ec88f13a42 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 7caa529fdb394cbb8a82ea7b1ad696f4 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 8e7dd1dc3270412695675ca016f774a3 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 66f7dedf12c146b5aebb4a68cdc3600b (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule b7088bc8385142e5a454c5ae07edf7b3 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 8599b1b8c82b4f228a2833431db6e943 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 02c300c176894d148f69d0514d0dd014 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 34e0eaa501de4d558e759e00e1cf5549 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule d803a5a60b864243bfb1d6f53f5484dc (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule f69f9ae908e848d7a4ef3c8831425fd8 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 04527a1de3d54b5f9ef26bc2f8ec2ed0 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 536bbb66afc7468dba6ff8188026f39e (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 4c4d90ffef9346a69666ed8df4048631 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 32---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
31


c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-instance ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (= (+ (length$ (find-instance ((?prop Proposition) (?dur Duration))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (eq ?prop:time ?dur)
                               (= ?dur:start (send ?t get-start))
                               (= ?dur:end (send ?t get-end))
                               (eq ?prop:truth ?r))))
                      (length$ (find-instance ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (= ?prop:time ?t)
                               (eq ?prop:truth ?r)))))
                 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 0d720c30fc414c6ea278b4c417cbb221 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 9b35678c29fd47c4a9cf0a282e1f5159 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule c849d39fca43452a83c2431d06eec1ed (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule cf9ff014661f4813b116023a739f15f7 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 96215255031b426490a1158d3d28d310 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule fb28c0f9249d4d348f984ef417df90aa (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 313a1190de7243f190eb36468d2ef94b (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule d5519fa9e7b14ab3ba39fe33bf3d6108 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 87f483595ee24a6dbe3cf87ae820b871 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 3570d3b812a942b393f5dc8c881fbc86 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule c6492e0536a34970a753d888276ad3f0 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule af5c108f27174f9eb060642ec72acde2 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule aa09cbed53d248a69fd63e6785959f8e (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 7d03cae7868648bb8b086b64db14782e (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule cb413d79565e4f76bf32c263f92f9907 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 391025ac0c4144ba86cda28ec385b17a (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 32---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
31


c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-instance ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (= (+ (length$ (find-all-instances ((?prop Proposition) (?dur Duration))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (eq ?prop:time ?dur)
                               (= ?dur:start (send ?t get-start))
                               (= ?dur:end (send ?t get-end))
                               (eq ?prop:truth ?r))))
                      (length$ (find-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (= ?prop:time ?t)
                               (eq ?prop:truth ?r)))))
                 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 4e84a6e487e04f8393b7b51938021e6e (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 47cbad87c0684638825613cfb8e5eff7 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule c2f8eddb209c48d7b26dfa4fa62ec767 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule a62b60c36eb649cd97f24f3e6e6aaca3 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule ee59dd191cfa4a06a560951955d1ac1b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 8ad54f801c954c569a7deba42965434b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 20f0319bf75d4bdf93c5d2680436bb63 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 154a7c3491f2422baae86855dc9dbd1d (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 8405206c42dd40b8baeed97255b25017 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule e67d092e96654d5aa456d5112e4c6695 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 30eca0c6b0a745219a44df1414968ab5 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 76a75afee8114564b2f434764a476a44 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 825c23fefe3c44909fa5f92cac898f14 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 97db9de0652943809fc224c0bccfca74 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule f79b501d9e8c4ff885cb9ea666580e8a (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule e07e528a45d74fc39fb4aa20fa399599 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 32---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
31


c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-instance ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (= (length$ (find-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?prop:time) Duration)
                                            (= ?prop:time:start (send ?t get-start))
                                            (= ?prop:time:end (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (eq ?prop:truth ?r))))
               0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 3a8454ce358047d78543d92f83708c0e (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 6e95cdfd82144463bad58f7999625a46 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 9c3d47aedef340888a19e65911aff69a (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 26bd216cadc44416a4e914b03462f863 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 7f5db05439294a57a1074ba84bf72221 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 19708ee89bfb477d842a66de2fea13f7 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 443086cd10284eb8a87e08b8f4a51a5f (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule a3258c6b73b1458a82793427689e91f4 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 8a3bc65a7f3f453e8161d23a1eb5932a (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule d05435f6beb44e41a5368049f5aadce9 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 09cf2335c82948509fe60f86d1243450 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 20d93ce48092481d80a5c602b1a1931f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule f3f5b3dcb1f34d9ab176b621f9d70c6d (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 5c352998362842619873ddf1ac2bb75a (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 02c9cd8529854fe39d5ef27a0b126567 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 07117c6ee65c4d07a3fcdda019ff5961 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 32---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
31


c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-instance ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (= (length$ (find-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?prop:time) Duration)
                                            (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                            (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (eq ?prop:truth ?r))))
               0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule de17105c13e641b894fbda8f4a7b0419 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule e25008fd79854184a248439d65a3ab9f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule cd6213b97f85488989619f3d26fcb331 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule f384f7bd464b450d8fa544fedb122ed3 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule d7f21a05500b420a9a1816411d4eb4cc (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 13ff531bf1ea4384b03cfa03db6eb302 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 36fe072edb194d7fa73d18eea8033ad5 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule dd24f6bff6f248d2bd12b0cf9ef87736 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 657efefce1f441da97cc84e545add2b5 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule b2a52dd91c874feca67df3459dea1a1c (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule e5878841b3ec4dd9ab61bc3221badefd (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 287b69ad816d46bf81322302fa964168 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 6feb48fe25784a1facd6bf92769953c0 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 4902ab83fc1e46d7b02690d4fd844184 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule e0238f2aa23241518f3ed60ed239fa7c (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 1a3b04e552d245ab8b1b43359787bc37 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 36---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
34


c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-instance ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (= (length$ (find-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?prop:time) Duration)
                                            (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                            (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))))
               0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule c234f51775724dfd8baafd5abbd94dcf (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 07ff5c57e85244b088c347c3ddc7be5c (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 5ab544f15a9a4d79a368531d11986bc2 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule cd169991d3434ed2b4fea5fdb2ccfe8f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 048dad8acd5a4338b2a53854276647ec (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 66ef2152ed3c4101a4d4d09bc772d0ef (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule b859a7147c35416597de392fd4c7857a (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 608efa6ac2f9413ab45b80477205d827 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule cdfa89c5e98b4cf3823c8c90d3d1cd3f (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 12126d26764543f29f458b5f75be73be (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 5e8c2c8d66bd40b9b455162a4d01a355 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 0efdd97b46c24c11a70091cdd64913a0 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule f077ff268fca407384a0f42149c620ad (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule e728106418964dfeb45b2cfb03aa3152 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 6a5b61f0cd0649828ee1f5a7b3a172db (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule ac63c639d0ac40b09ddce3a1e67c16f8 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 36---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
34


c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-instance ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (= (length$ (find-all-instances ((?prop Proposition) (?time ?))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (eq ?prop:time ?time)
                               (or (and (eq (class ?time) Duration)
                                            (= ?time:start (send ?t get-start))
                                            (= ?time:end (send ?t get-end)))
                                   (= ?time ?t))
                               (= ?prop:truth ?r))))
               0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-instance ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (= (length$ (find-all-instances ((?prop Proposition) (?time ?VARIABLE))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (eq ?prop:time ?time)
                               (or (and (eq (class ?time) Duration)
                                            (= ?time:start (send ?t get-start))
                                            (= ?time:end (send ?t get-end)))
                                   (= ?time ?t))
                               (= ?prop:truth ?r))))
               0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-instance ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (= (length$ (find-all-instances ((?prop Proposition) (?time Duration | NUMBER))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (eq ?prop:time ?time)
                               (or (and (eq (class ?time) Duration)
                                            (= ?time:start (send ?t get-start))
                                            (= ?time:end (send ?t get-end)))
                                   (= ?time ?t))
                               (= ?prop:truth ?r))))
               0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-instance ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (= (length$ (find-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (bind ?time ?prop:time)
                               (or (and (eq (class ?time) Duration)
                                            (= ?time:start (send ?t get-start))
                                            (= ?time:end (send ?t get-end)))
                                   (= ?time ?t))
                               (= ?prop:truth ?r))))
               0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-instance ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (= (length$ (find-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?prop:time) Duration)
                                            (= ?prop:time:start (send ?t get-start))
                                            (= ?prop:time:end (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))))
               0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 8eab5e9bd5b5436fb2782cd01016815b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule a57b74c66f17465b99f7ff6076321843 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 8d2dc06aab9d42a8aea9e124f26f2f2a (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule a0804122f23c4ed4a2a28767707f507e (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 79c7ff1b6c13431d980895edc487c1dc (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 4705e76d1c1140868326e5823ced9de6 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule fa36474662a1443985968980e5ac356f (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 5b2f4cb64788417cb18a442a1da3043f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule d5bdf9cb1353455db1bb1cd61449165f (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 3d29a05b790c45d08ebf3a8a15ff4a70 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule ce0e2c5589b0437e93afa3e5a245efd6 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule ec8fc4676be44f3e9b15019f13e355df (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule e99c1fe70fdb438b916784fbb79787ba (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule c2d8546e5b1a4642b5995059b6d9ed24 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule bf2d4075ca144d8c8f5de4a6c49f6f7f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 81d06b39e17e41a6a951ea8b53b20a2d (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 32---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
31


c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-instance ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (= (length$ (find-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?prop:time) Duration)
                                            (= ?prop:time:start ?t:start))
                                            (= ?prop:time:end ?t:end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))))
               0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-instance ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (= (length$ (find-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?prop:time) Duration)
                                            (= ?prop:time:start (send ?t get-start))
                                            (= ?prop:time:end (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))))
               0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule c0087a28c6934348aa869cde1b917bbf (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 3512e2ff0a564db7aa6b9ef1c7b3ac2b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 203f953e90ec436f86923f08eac3bba2 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule dccd0be328414d1ead840fefd52ead5f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule bf3b31f7ba9249e6938a43234d70f291 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 1f8e3956afcb4873a0e96b4ba38956a1 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 951910433f894fa9acff16de356d0f5b (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule c73c3eb9255143b4ab60e540b601ab12 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule f2c198ee1d13482b96119df9c327cdb4 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 2401bd34b828473b8bdca1a1ce216ce6 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule e17bc556e8dd498f8e59049fa63ae10b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule dd8d22299af14245aafa0c7f96e522d2 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 11fd9fe8d3f844a7842a9e618d444245 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 63c9fc04bc7040d8ac80888749bb7a94 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 475f9e9b269e492ea89de6dde95669b6 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 757ea2f9c14b4296a1b73f37c8552c8b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 32---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
31


c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (= (length$ (find-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?prop:time) Duration)
                                            (= ?prop:time:start (send ?t get-start))
                                            (= ?prop:time:end (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))))
               0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 9dd752e033c541f8aa2b344e04e16b6b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 92a4c7a95aea4ed5a26e02f3336c477d (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule f08f020edcb741f492a4b4c216101c8c (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule d6b25df023d84c87b14319fab9659bc3 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 709ec304cc4a4918af3f3909df199f98 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule e1fd38e39dbb42c8afd080acca783277 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule d2dc4935b6e140129c46cd14dd20b1de (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 763341f962f44399baa6b41f4dec8485 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 8467d200f03347b4bbb453cfb780f83e (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule b185c462a8f2404db8da16a4806f0250 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule d681e162bee7481bb89d64df13677903 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 51d9a6125db1455bbbad5a1980b48412 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule ad0643b2ede3480b8284040622a56e1f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 119b4d336fae44b99b1fa4a040922e68 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 8fc5976f5c6c4bf9b9c44a8ff9926ac4 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule ab3a7c483793485f907e80551b361328 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 32---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
31


c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (any-instancep ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?prop:time) Duration)
                                            (= ?prop:time:start (send ?t get-start))
                                            (= ?prop:time:end (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r)))
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule ddb95d9197b844d086c7f1ef8ec84711 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 68ab29d9f576462d8391e2d615162f8f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 4da5689c44644a5592e3a4973afb4644 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule b2d0608411ba4dffb13eac11e368bce1 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule e9c979be9f4d429eada1b6977fa7fb55 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 048a3ee97fc44fcabacd5c0bd283e224 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule f3a1c3471f0d4d8689ecea1443e2d1c9 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 2107adfa9dc146c986175d89ac5a02dc (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 779b140596054fc28c79dacb66401850 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 21d9b88154da4232ae81bab65831dbe1 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule df1506ff7cda4ed8b71110443a7a0f56 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule e847cd5da0b141efb647c1c5faa97fe3 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule eb2effe8170f4e04a716df460a298047 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 2b8f105c7f4147ee8a21d672f87c7dd3 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule b71f0cd12de645199da41bb6f76a6f20 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 9391b5b391d745a4bb868f6b9dd7fc24 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 9---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
0


no
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?prop:time) Duration)
                                            (= ?prop:time:start (send ?t get-start))
                                            (= ?prop:time:end (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (> ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 35820e1b96ac49f09c73b7dbf9170482 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule c31bc7f5554e422093d2f00e22201f6c (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 0344e1b5ab1346b88ae8ee92558a9465 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule e982538de44c4ca69dfd61be14b428bf (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule c0edf8e9572a4613ae70a6885b14dfd9 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule dd4fe2b4ea65482d9b10e7ba17a73177 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule c42836e6b5fd4709a881ef9834bdc4e8 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 5fbe29b966d5469d8bb591242cff7a26 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 9e36d1ce2e674a4598585f72bbc2d5f6 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule d3fe845480c349c29cdcc3f26d55b7d1 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule eadb1bf3c97a4bc49e8d8112b68623ae (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule b696b0f5565747279640d10f8cd3751c (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 82e56ec0bd584ccfa96ef1d148bcd6f7 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 816a9851d27442f696e268f1265a5d6a (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 3a0b5452cc2a405bbc3e28cd05cf3fb0 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 41a3e5c78e074721ae5c51e7363330d1 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 9---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
0


no
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?prop:time) Duration)
                                            (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                            (= (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (> ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?prop:time) Duration)
                                            (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                            (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (> ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 3365565cc1754e79afe08ff3ac1cdd35 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule e469e15e62444474b0ac5f4f4e140816 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule e45529c9758b4f649da9348bfd5536d2 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 7eefef2b81c64a17935aaaee8ba8d032 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule e13f073772fe4589937e5d2da775c779 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 2fb1d304991243229f06af3f89324a35 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 0075be057ebe42a2904dc217a70f95a5 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule df7ba9a6a4d24e7cb518c0dc02284166 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 596824913d8849ebaa1769a89b3ec9c8 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 59eebca8fd7249e0b18f0bbb6c790341 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule fff33e43c04c4c7884812fedf3477153 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule fdbb9f5ac5794d57b6e0e4aac9315686 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 4b0df050abf6413986e2ea23a8c1e38f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule fede8d60deef46c792c62aafcea1eb62 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 5ce71b3fd7d446efbc5a1c9c885784f6 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 959ae8a5ffc84e0a9680f590c6710910 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 9---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
0


no
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?prop:time) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 12c25f4d834944458b28aaad44237036 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 6341f15f75614054b9e4791dad36047f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 2c598e505f354d388c7be75e1d46169c (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 51082e8f31c9442589b01d9534506190 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 951e85bc5d4342db85ddf4833b157b59 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 1d05d58e4f6246fd89dfc77ede886d99 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule b1d080042f7a4fc886c6706af65eddf6 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule b4b0965eb03c44cdb3e1cdc6e475755f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule b48a2f01b6ab41eeb9bb39bd7cffc2ab (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule ccb7fa3e075041a8bb65612766856545 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule f72ded3c5dd24befa6a4012c31169a78 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 629655814fe34442b867375ae85264e3 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule f8535bd1deb3400cabd877348dcf65e8 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 36ccbd84f9644c149af61e1bb6555a04 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 886b4c4040e94c759776f90b3c192aed (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 62af90e1aac5413ba69bb3d2b8f955ae (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 36---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
34


c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?prop:time) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 8ac7c2cea9c24a51a0dfd5b77b75bb80 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 893796b3148b414688ff14cfcd26e8b9 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 1579715b99ae41a3b5ce688fc9f57069 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 27dfbc9ec8ce4b70aefe322da9b9cf9b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 4f5471d21b604005af2c1852b6fcbf4e (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule ac5926c6cf62480da06072ab3329f835 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule bcc1017dd90a48bf8b70a598bea51b4d (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 69e8f8b3bbbc4cb7883f09cdfb44b443 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule c3ef2dfeba2f479cb50dd6483f72954f (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 8c94ffcec709418abd8e82e65c7cb451 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 65c915ed4a0147b58fe12a0da96a4cba (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 0e3a4ccd8d764540bb5597be6b6e4106 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 3fe7455405154851b58f71635329b665 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 721adfb40da3453e8c09d380f887c57b (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 946d72d3325c47568292ac61754f7efb (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule e4cc4de1aa4f47ca902ac12fe7900601 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 36---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?prop:time) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 69c62da683034e17b01ecb0357b2569e (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule fb790bceb84d496d95ef5a59e25e324b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 308bfe510fca408785e8f29633428fb0 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule bed782ed08e6425aab8af89daac808ff (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 7d6abe0f7c144afb97510c0129ef7012 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 3d8c01725fe54422b9df1d6196303fbf (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 2a2782f4395843b8b06da3f04205f348 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 8d5a4a51a0a4461da1871d277e31c734 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 3b59c0b5cb0b40d0bec3d3b9c50f0e30 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 6dbaa03e54b34463bc2af6645f83b408 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 707a4d7d664f4a68abda94604c3271c5 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 9b682c17a8244582aac830d4a5a57977 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 0788aceec5d44a269f34a27851202a9e (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 6a0b1859d870457fb959f650e1cf512f (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 490e7915ff2649639dcc4cba33311164 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 4920f20d9a3c457ab147453cba2ba736 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 36---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
34


c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?prop:time) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule d469dc2d6cd449d8a7da574fea218c2d (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule d3894af222eb4602bcfbc71a3664b3b1 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 3970d6b822674098ab565e7067b6ff50 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule cba724fe45464a4fbcebf4b50fafb904 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 895a637767484779a618acfce5a3b0d9 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule dc79741d23304cb2b61a014aa99cdcb2 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule f7e2e9aeb05b4fdcbce23fb8ca2c531d (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule f8261539c9d2461ea3868711d31ae5df (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule feffee2e0e8c412b9593bb981c1273f0 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 45ff1bfaed644e7388c68b5e31ecf45b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 8d9b275b32a04e438214745b1d571db8 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 56da3640a1664d3f8aa47165d762fb4b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 98b09f4efff24586890ddaba47979408 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 100a7d88456e43288ccfe44b2f89d73c (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 4e8dec3e5a6d4e00a7c1ba62a3c126d6 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 7b032fbea7594e9cb81a7d2b86fac432 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 36---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
34


c1 has what public at from 733698.0 till 733698.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?prop:time) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 1469d084b09d4ef9aff577bd03a68f0a (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule b90b8fa3b83a45b6aabdba0a9cf3df00 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 80625b12da3c412084bc7d6e9f3f9c8a (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 72c4ee31fe7841b5928bbb1bb696d373 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 883289a606184ad6ad20375dece37859 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 0d0970beae2f43a89111862feafc935f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 6da3327360ba480aa69d385083b57997 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 6852a56a6265465da556086783c5f73f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule efb075b6f0d44394b053753636c66a51 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 784c9de097f54a00a25ad5a41975593e (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 34efaa5c04704ea397edf2917e011388 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 4e549efed10048088ee1329636de3d48 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 273862184aaf46d2a8e39d0c968f8871 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule a3e84f3f0c684c4ea24370e08b593b2a (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 9042502e93ef4d61b244648bd0a3b302 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule a1670a8a9c3f47f09fa03ada8d124b85 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 36---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
34


c1 has what public at from 733698.0 till 733698.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?prop:time) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule cbb593b01ca64238966576849b504095 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 1e8c1a9afbae4c0a96c200a55291d728 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 1789d5cec2384775816ef6dbe87da409 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule b8be019f05e64256993ecf41bfde861d (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 3521296f28e246c0818aadafdc9ba52d (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule d6bea6240de343e0b54d265d68c267fe (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 0a7c051322cf4385bb3db3078fd3ad66 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule efaf3e03a99a4a45abf359ba443b1448 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 664d6cc59b654844b0405d704e9a63db (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule b0fdaaf2c23041c5928525a08ce729e6 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule af32b3a4e7324cfba15f0ada24220a5f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 4860bbd6e33e490d852476dc9203eb30 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule d5065f61e7284de6aa3037586692555d (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule f90da8f035ab47acb52c4c750d41a322 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 7fc83717701b4d94839b434b59c286aa (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 0a141e9134a242539bd4d52608c73096 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 36---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
34


c1 has what public at from 733698.0 till 733698.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?prop:time) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 68767c8340a74131a4a8feb467fc8347 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule ffa2a8a934fe4833bc1bd6935ea68ef5 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 20b3815c2a074b11a9d3589350c34ca6 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 121e8264eec04cf59f3e64b42976b605 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 41c46876a45d45a8b4d88b846c2ce175 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 4dd0b60aa129429990000d07e4fb5044 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule ba37b1ae33c846d88b1b9b8a44aa977f (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule cabec6196aab40e9b97657030ad8330b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 04d656f195ad4c5b84002d01cabb0c86 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 22d4016a98444a1a882e4d555501e66b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule d4d45eddc4d84220aa6c75feeac204df (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule b701455c7df642fba17b27b8305b5751 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 7dcef2bcfcc0466cb5a5457dd24f4541 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 53b304b44f9043a297f1b84c09170958 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 0ed2eed9fced4850abf9126d81c9347d (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 4b49069e762e4d53b2e291d20dad44ef (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 36---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
34


c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?prop:time) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 1f5c5d21a70f4fe099d68a80ad1843c6 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule b5d445615a7748e0acd9dd7c6dab2951 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 890f0eb55e814bbcb25003ffec9efd8f (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 012232eaaa6949fc8a9791152f8399a0 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule c238c004d73a49d791c0ca1076427cd8 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 934dd45022054cecb045cdf479d46c1a (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule c29061c537254f2db407b2d1107d6ea1 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule d215ff608c564815a6f14b8f8b5ec035 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule fd0de79ac7404ada9600b1760e88439c (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule e080d8c45e0141fc9f409e2e53885e9e (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule cf3de3e17bc34b06b5fe2d207b2f6e9d (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule d289e7ae0dbd49d887da08beda4022ea (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule e0cea9bc56344272b6a6cd972a5ea1a9 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule d459b7fa390540be8d16f12a94d04421 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule e0d47244f72146b48e5c09901e4988b7 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule c8a903c5ece34200a11f007afd266309 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 36---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
34


c1 has what public at from 733698.0 till 733698.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 27e8b537dc45406faaa8baecc5e47f9a (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 73942f15607c4c4896e06ad948aa2dd0 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule cec782c01d084e72872a89bc7f4a59f2 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 014c8f8ccf4f4e428560adfe7f7814d5 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 5efcbf8c117b45c3b0cbf5b9bb07bae1 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 62e42471d8e64a6abb764491d0852cd8 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 221ad84402cd4d7bac419f6a6f07ab02 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule d144dd5fa2004eef8958f1fda91eda5d (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 454b082862754a089d8ccbe1291fbe6d (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 36614c84a5554e7d87446cf15c12b40b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule b738243ff8944073949400514efac9fe (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 3a36cc283ceb4d16b1c52159ec46f42c (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 3347f4cea9c34db1ac18749bd6163839 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule f05721a177784363ab308da3186252e6 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 630758ac0b424d708019797b4fd2eab7 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 625b98eb6a564d33808332b621c7159a (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 36---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
34


c1 has what public at from 733698.0 till 733698.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (= (lenght$ (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))))
              0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (= (lenght$ (find-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))))
              0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (= (lenght$ (find-instance ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))))
              0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (= (length$ (find-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))))
              0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 7f60a620237e4ddfbb529ca98ce408bf (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule a73a2846008c42c8afe16553420388a2 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 97664c38c1a749c09e628a2186bc6b54 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule ed99159ae6fa45f792583a104deea134 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule e6a7be0964964ef4bcb561d872b56c98 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule eb53de67d77e467f9fe7c5c226c5e4cc (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule f3e6b2ec5190416e8656fabe92f318b0 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule ddfe9d9a4fb44c84be8fce7cad3100ca (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule c55687ae02a249caaf305352b4b9db70 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 606ca14bc2644a1fb7e99f558c1dd6dd (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 2bf724cb64c0490f98a827a87dcf9c51 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 347046eb853a4816be46051133782ec5 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 2201c457e7b144ccbf73543d47c59370 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 5d31dde017784195930fa17913313571 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 0e37ff27a6fa4cf6bacc3c59528eec55 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule f693050b6c8b4dac8fee31b6b33a5d4f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 36---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
34


c1 has what public at from 733698.0 till 733698.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (= (length$ (find-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))))
              0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 9e0bde3d677a4885b57052615554eed7 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 28098ef8a9e944e386245c092cda259b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule b00d334143634379a17b2bd4459533bd (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 494b7da40703440dbcab1563527a1d21 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 89be53e82f0749c58e827c1527a0530d (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 5aa8bdce5ad645b2ad984556c4cb1413 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 72f4541c10a9430aa5dc302ed1174644 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule c36c870a894c4d9a958f0c47808a2b75 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 1204f2f2a51b43319ce5a6afec862b86 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 3acdb01acd7d4908bd3c07d66391dc80 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 61e1559c24c74a3098369da072cf8a75 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule f1195d95e64343b7a198768a20406eb3 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 3591e84c83914c6591202f2f18d631dd (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule f731a718d61d4f0d919d07e423035243 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 622c8f8159a24ec49a1d60f052e3fbd2 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 7f06c5df346848f593f66b1b393842c4 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 36---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
34


c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (any-instancep ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r)))
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule abd65e2eda9445729f514a3c2e0fd2cc (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule a68fa125329d427d86748eae40f21f50 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 89333ac856584062885f1d454e6295ee (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 29cb3597bbef4c4c8404eb0279a06b7b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 9853430689bc416492491d1c1cca0f46 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 9c7f44f071c04f13a4ab918de6d670e9 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule e57f613d92b043d59e2e5945c59a17dc (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule b654f0d992914f15b323893b06dd99b5 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule a3a7ebd5951243f68fad8e223afa401e (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 8805dcfcfbc041a6b0f18450f834a789 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 1a4605cc5609466fad047407c08600f4 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 80f8e6b81ca540e58bcf961982263ff1 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule f7282c73b82a4a25837a94a970168995 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 0e19d00d30c64204a57152901d0113ab (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 9878acd2121c48d89e6f0ef631325f5c (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 3dbb376b3bcb445fbc82341c3561e088 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 9---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
0


no
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (= (length$ (find-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))))
              0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule ff3601e70fa54a79a9fad096a84519a5 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule fbc8911f2fbe4157a6917009e98bd248 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule bdb10967d7af47a7bb84be1efc453917 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule d5f9777705bf43d8acb83566c73d646c (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule f2de4d6517f4484eb1abab0da44ef034 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 3e42838ea6fe47e68d1cd33b722d0cfc (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule b93dc72ca1d44b9ca681d76ff0688a1d (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule b3d3753ec73a476bb0e5edb887d3438d (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 21b3fc1508f040a3a17a604acfe30637 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule e2803225c1824badb6622f89e964f0ff (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule fd86f75fdda848248d91510339f69f8f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 03d8a50f8d5144ae9e3d607e9a15a8e0 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule b45fb5e2c4d34c69a9f12d0c328a425f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 104992725ad049a79328d28890e10f61 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule e10e4af893e2474f9c581d3ccee33ac1 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 0e38f5cc1fd14ac3982a6c6dcd44454e (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 36---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
34


c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (= (length$ (find-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))))
              0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 4026fdef4b8741c3b83b4aa857c889cb (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 71332ea82fc34e57be07a3ae6a8fe15a (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule fe6bb1b6e3c243d186a41c83746220d1 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule ed3db8c3c63743d5ba6f84606bf86013 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 25927ea0049a45f1976642a602578d5e (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 29ba1d70dd6d4aedb6b6350e021e26ed (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule b9efc33b73214f86b4bb0db4f7d19a17 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 3baa105907c34e9a9ec52e4b872614d8 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 4f324a1de7bd472699b6ded13916d319 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 468da45913304a5aac96ddc9b5dc125b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 97cce8742f994ec58dacae82af2856ce (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 3190a49ccd24454db52eb63433fcbef6 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 378985d18fe644f0856241fda8aed862 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule fc4be835530748ea96db1935a8a7458f (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule e08db89360024ba69d171bbdac887118 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 706973a919bc4215b6f4197721947884 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 36---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
34


c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (= (length$ (find-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))))
              0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 0c4c80576e844594a5342efa64fc4d99 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 07305da25e554b7993e2ed92a705d700 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 3bc853bdca6c484aaf5b397990f62a08 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 96e5f44ce4474bfab6106e77f5bbf508 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule ebb8520cb7e84f62a55df7a884d62737 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule f3fa14023a0f48328d7f1a25be4a6475 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 5a56fce254ec4c7fa23de7924cea798b (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 10f068b2bcfa48d4992c937087a5dc15 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 0e6563aeb5404603b90e959e70f53ddb (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule d8e365619ccb4c538904356822cd723f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 6090247183de408abfd40368d9f39ed6 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 324f775cc31f4688ba41d1067a75d533 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 29bc3b4e49d6418982bda8cfa105a302 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 3c4167f8f2e14df3868a38458985306f (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule eca3d740825f4eb282951a10865d30f2 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 57823d4ecd294d6f9e1e3fbf9eeab182 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 36---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
<Multifield []>
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
<Multifield [<InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen1'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen3'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen5'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen7'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen15'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen19'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen23'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen25'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen27'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen29'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen31'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen33'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen35'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen37'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen39'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen41'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen43'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen45'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen47'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen49'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen51'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen53'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen55'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen57'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen59'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen61'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen63'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen65'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen67'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen73'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen74'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen76'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen77'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen79'>]>
34


c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (= (length$ (find-instance ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))))
              0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 7b66b69abe4e4d8cbf6e5a7685ac86d1 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 270ef2e1be554e5cb85b3613b9d5e991 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule c77cc065d6fd4478b949a3930821bbfa (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule ab5350e6a0044c9eb8ef4051c1b9f28a (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 501265ba061841659e2d06ee1ec95b36 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule e42345c1b74d413bab5f0906153bdf6e (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule ed725218b47f479284201a1399187ff8 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule a8bd1b5e3ded446e972b3bb78b33912b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 5fb44f52685d494181784b49762b3604 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 831cf0f84fb6498091021835667d71c1 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule bc79354919794cdfa6f81cefd59b9514 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 08c83ed495b1417d957b1731681a4c44 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 48554b26edf9460dbd0665fe02965481 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 2ac5fb3e0dc5487d81cf305f0d353998 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 114f7c67a6554899b58797125daf3946 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 6603650ac37f44c987d33cd6921eb0b2 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 36---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
<Multifield []>
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
<Multifield [<InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen1'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen3'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen5'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen7'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen15'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen19'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen23'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen25'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen27'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen29'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen31'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen33'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen35'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen37'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen39'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen41'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen43'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen45'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen47'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen49'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen51'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen53'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen55'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen57'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen59'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen61'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen63'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen65'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen67'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen73'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen74'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen76'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen77'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen79'>]>
34


c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule ba96ad1b0f414a4baa97d34bab9a4a3c (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 835c813ca6114a27a0863d88fdbab3b9 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 79c3aa88e54743318be5430aab2ec721 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule b5334408079d4eed9c67e5dd775ced28 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule d3ea26609ebf44b287b3b0e42c9acdb8 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 33d842079c3d4589835c74e136e28838 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 6fa52734f96d479aafffc2e08837b0ef (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 63a081ba2bc247c4848d6023dd8f12bb (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 90643260b1c44b778892dd0fbb57d5dd (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 5158bd73934a455bb0624d52a4b20ceb (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 04f826941ccf4fd0817012bbc3ba2735 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 25c09d01c98b4df3a5ba008ea2c049ae (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule e8b154ca410b44aeb44644c188c07b05 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule dc357121a89e46df8b261f30e40b05ad (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule aa8926cbe44740ea8f749cd6cb0db5cc (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 4790fa12958f41ebbd8e6301382f8afb (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (= (length$ (find-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))))
              0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 2108f9b003d0423ca57063f41ec30e9a (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule a75a285bed7c40cabc56e5a9369bc5de (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 067b50aa7ee1458bb7f81bc8ebf2db0b (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 8d1755062f9c44eba3c9e9b708f4bb21 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule deb1dd9bd4d048899c684b15f6bd949b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 5063925b17bb4229b885d34cd241b9ce (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule ad31b683a54142b3b59e62cf2f1f8d78 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 0d1130da53624caa9a6d5313db459ff6 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule b76facc9b6144d10a5ded6e872b6744f (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 40dd2ea0f8c045129c654fec1d76f793 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 491a51aa172b4cefb643f2d8789a5877 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 93edf407ba9f4152a77fe8c319900321 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 462ded86883a4420be3112db1fbcf117 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 0c5221c1cf63485cb701fb76286d279a (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule fc230a62ef544df1944cd25b8a6d4d8d (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 8d020820db39436aaae97801eb5c4b16 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 36---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
<Multifield []>
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
<Multifield [<InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen1'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen3'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen5'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen7'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen15'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen19'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen23'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen25'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen27'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen29'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen31'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen33'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen35'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen37'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen39'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen41'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen43'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen45'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen47'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen49'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen51'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen53'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen55'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen57'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen59'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen61'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen63'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen65'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen67'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen73'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen74'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen76'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen77'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen79'>]>
34


c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (if (= (length$ (find-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))))
              0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule ff5da4802a564b9497326c4151da4f1f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule fbaf8eb950df44789b48fdde17d1aae0 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 37bac0e836c847d0ba5549b66921ad5f (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 90daadff364c44e2ba10aa8da4eeae20 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 41e02aaccaf34a9aa3d1eef1ee20ba45 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 31fa65fed3b545b3b85195947c6d10e4 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 6ab0406259434b4b9c39b04414a5c20f (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 90537a67f4284a76b767eed7f9c49c9d (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 7328a5fbde614425a64f617e0d6e8973 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule f18181f672044759878ab6c9d7555bcf (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule c2335cf275e7477bb7cb0caa2c6ef6c2 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 8be7d378917143c5900596f723f9234c (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 66420b9fe08b4b2f9bc8836afe1d6516 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule eceb59a0533c4bc2a26f268400b85148 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 1f0ebb5b41c0404b9d76cb26c2716a1f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 1311b735a7c046ef802d9f68a5c18f46 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 36---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
<Multifield []>
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
<Multifield [<InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen1'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen3'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen5'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen7'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen15'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen19'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen23'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen25'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen27'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen29'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen31'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen33'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen35'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen37'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen39'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen41'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen43'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen45'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen47'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen49'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen51'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen53'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen55'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen57'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen59'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen61'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen63'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen65'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen67'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen73'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen74'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen76'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen77'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen79'>]>
34


c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (> ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 8932594628914ec38f6d5d517958b12f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 805af1660df6475ebe2bc001792672fc (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 5c891e03868546d0ab476b484d8ca5e5 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 0b2b08e23268433b96ffa3b435f2f602 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule e5edd65731ba441589a3a9b6f99c0982 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 5f7222d1f8084a04a57491aeb623b6b8 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 923e08d3f0824ed18815f6bf7c464c6e (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 96c0aa652600458dbbb939b1da5d0f30 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule ad53f9dbe9004198a4b9f21dbe28bfe8 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 1a9530d990234045814370767a29107c (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 392d3279ba7b488f8fabc946f9214bcf (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 5e84f028c1d04be990109009c0a6fbb4 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 376bcc7dae8d4f83843a78f9eb56792e (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule f750f5690fc24297848bdfa08954ea4e (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 9f640ad794ef43c3a9bd8534eb36f18d (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 0a57c00b32ab47d38265440872c6a9a1 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 9---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
<Multifield []>
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
<Multifield []>
0


no
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 4d57e3ae2edb47a79b37e4e8f9a9f529 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule cb1c18a68de44f7b919be932a9649b95 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 341d33f5ab4f4e7d9677b6e47e6b3cac (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 1c40e2618b25476593c631ffd21402a9 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule b56f278af0f34cc5ab134ed46747bb79 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 801611a1c1d54e23a22248639e347573 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 52bac151a50044d9a27b5aad916af49a (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule bd2e46a0af074abb85faafe4e853145b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 3ce929c2c3cc43e7bb6538cbcb2d404b (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 9cbfee9667ee4926975664e1611d9b13 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 1ee347f4b3a64cbeb7476412fb2621e2 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 6b1ffa88fe3e44318f8cb42595b5af33 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 450977767045454eb5625f3ad65cf1e2 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 00b1b1fa847b4aa7bfe7246afa5190e2 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 9e01bccd1da04e86858a9d1676c11e5d (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 8eebd68154af40afb6c34e349ed133b5 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 36---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
<Multifield []>
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
<Multifield [<InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen1'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen3'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen5'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen7'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen15'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen19'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen23'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen25'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen27'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen29'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen31'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen33'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen35'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen37'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen39'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen41'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen43'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen45'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen47'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen49'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen51'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen53'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen55'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen57'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen59'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen61'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen63'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen65'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen67'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen73'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen74'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen76'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen77'>, <InstanceName 'gen71'>, <InstanceName 'Haswhatpublic'>, <InstanceName 'gen79'>]>
34


c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 9e649c9a844f497b846ffbc60728001e (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 979f92bb891d4e56901c0448999ad163 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule fd952e69800a4aa69565c5e23bca40bd (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 1183739c8e1e4b058393ceadbad7d923 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 8a78f56f21354f1db6f1907351b8c428 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule ab7f9d35f2964e9587ec3de266ca5057 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 0ec2b48b2ebb44f69729ad76616b04cc (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule db91b70d9dc24972b038a41e9874d457 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 5f42f9553ff845f5bba3779a707ef3be (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 8633f7b67a6f40df8d76b11e4d113d89 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 423b7618d45f4ca9b029489c839c0a02 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 807082f69f7a4e6085ce19a122a55828 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule d5281ed40e2a4e6a8c08bbd469af70a0 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 26b94301722b4d4380e819d1f898e4f6 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 2b98ab780e67469aba2dddb545739e0d (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule b4e7df7e6aae43ddafb7499d7f5df0ad (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 36---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 6a00fb9c7caa420a9bbc8f767d71ce96 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 51784163ea6c4894b7c095ce9a6944ed (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 881741b6a8514745a74934670d95d459 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 4b3ad165dce349808bd2d73ded5bc028 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 28827b8b59834df5b07c9bbc3a7db9af (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 248d82dabdc640719119e79db4486935 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 6ad4ae5ff2cf495b9febf5673f1825cf (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 8bc895be9c3b42e3a48b176ec4bf9e11 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 33f34d69311841e1812eb1ac2acadec0 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 5fd6ab1d61074feab077b3c1b23dff38 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule f19f09181e3c4e478ac51e27be2d0f1b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 9d7df62af66045049356464e62912704 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule a9ed3aa31088497d9cfb64ba7113b622 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 9d2327e76521420782dc34681523ac2e (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule e3b6a1eeeb4c4e37bbb95ddb42ec7883 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 457dbe3361e743ccbda060bd4f2994ee (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 36---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
34


c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 695fcad068b24537940f8571783ccd8a (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 6c28f2af47644a9c8a401bf6a958a866 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 0ca010090666475db5b314490f21c609 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule afa37c0c42cb4beea87e107e770ac897 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 74084a890cfc42a0a60b79e05ae9cab6 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule f2559c73fd1941d1ac155991f7cdc809 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule c3e08ed50c364875aa412b1ddc11f8ec (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule be684a67bc7042dcb197c85bfe7989e4 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 44204ab8688d4a96bf96386a6706f0a2 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 177881ed27684a589ba03c1aafdb2951 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 0bcfc26d79e04844a931b6cdad884b63 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule f4d8d30648c647039185bc4e0b1d3fd6 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 81303600a62c407a86407847988a93c7 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 0e6952afd89c44488523b2e58c0a9088 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule e6163d99516e42508771b1a85f058a0e (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 5a34eb34a245426c92368bcdd7b2d0ef (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) -1.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) -1.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) -1.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) -1.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) -1.0 1)
----------running---------------------
----------runned: 25---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
0


no
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 13654ee53f8243f18750f772b5cf73bb (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 52b90cfbe9c24da1b0be3a591c7b3cdc (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule e613112b332e49259e82f19b60df8e6d (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 38ac5428db5d49d4b737b81ce055cf13 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 675f643743b8431ab97d109d64194132 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule db63066d777c4fc88cec2039678ce3c9 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule f32090056cbf4af5b39d357fc0718aee (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule a3025682ac704801916aea3a4f999891 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 2c4bbd445c5e4d8ebc8e94b6639e11ed (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule ff7dd1981d564d78b8e512c3ef1f275b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 8fd4cec926a14060af42d5e638ef27f7 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 57bf212bb1e4445a98ef13e5db7be5b1 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 50e3f546a938403e96013881a332e6dd (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 7d77844a1e6b4c419f6e89bf14862989 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 81c21ab6a8a346e9b47db882221a03bf (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 853737e13399467bb430731626f2a319 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 36---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
34


c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule cb78c2f42ca248cd9a77e5af89d6b436 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 5b190f9da7244e6c850a8bced771e968 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule b751e156bb2c47618720a9bce4332309 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 0fc85c4708a44e21b24a4df2ef459b6f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule b3f7365e9c2c4c17b64a1ae38c696743 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 973e05f300014513a78135248e524b3e (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule f259660ec8e3476f9ebb3fdcd4cd7a27 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 6107885196584bda9de87cfbf0abe0a6 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 2f7848c09fda44b78a6af460fd00c4c2 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule c37834d3a2564e9db1ded9babe2e296d (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule b2732e3234c449a5820b7f2ee7b0dcf7 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 73d0dc1feaa642a586a9c31278ea80fc (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 993f2e11d04a4f4fbb7df12c9d39613e (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 00089e55daf44388a52bd13b06e5b5c7 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 9e0c630413724bb29478e6cf58dc4ed1 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule b52e44eeb3b647c09ea65650a2ef984d (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 36---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
34


c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 63868bf01a894192ace7376b02f925f3 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule cf7d39f6c99149ca83856d2664e5ce9c (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 741cfb3234ec45ebb7e4cd4422424301 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule f00dc224997443cd814bbc1a6d23e3f6 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 5683bc8d54144b1c967364c42a249976 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 6796b75777734fb097fb578bd97b5f6e (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule f5fc1c9976f6485491c36ae63690f327 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule a28df4c1897f4bf79f35a1806faea2d8 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 07e15ae200304129ae5f5fb5e289184b (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 5dde7d036bf14230944a006a86b669aa (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 207fff907ecc4941a789d64c33d37b4a (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule cc3229e5f3a14216a00619ba52c9e275 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 4dafda80ba9546ef96350cccc31797c6 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule df474a011cbf43518d8ecfc603ee3a02 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 5cc5f216c8d3412cbfbbea58fabcf29b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 7f7f8daf7c8745ac873b4197734f9588 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 36---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
34


c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
c1 has what public at from 733698.0 till 733698.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 355d85016eb04f169ae6b9f6a56afba2 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 48a7242f6def4e24ae1f16d916167d96 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 222005a8ce4a45ee8fe454ae82d04fa2 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 38299b12a6804034b863e7bc874d7717 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule a8a678d8a3a0442db978c5561b3b6719 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule ef6cb3f9c6c24586b358d87556a3d847 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule c8902a3698784c5db45f4f4ce44583bb (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 45c8885d813b44d9a254d385ff32cfe6 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 9a52a0369bd1466aa00d84f01d332b7a (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule e26b7965df7c433e978b106c46b21f09 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule d07b178688544efebac26c50227c87f1 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule b6bd8ba506994cf58a9c6540b5aa0f8d (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 4c86e3378e7d49629db91f881d482b00 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 98689acfcf6d4ba2add1882b3dda40f8 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule bf7914813bbe4b3680e3ea5e15f08be4 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule c231b7bc207941b98a840a662e4d5cf8 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 36---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
34


c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
c1 has what public at from 733698.0 till -1.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 379fe2d9483c4821bb44f93447fc1f9b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 14d80f53e2254958b817dd704f7e81f6 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 94b6a2730b6c4145b89c6cc58077a501 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 72df6d91002549889c4f95e7d7abee24 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule d19beb35f8db42b7977efbac572e1a95 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 700fd55e01054b1192679d86b827a284 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 2bf723916b754d278bf6c0d3066784b1 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 0a63f5d5050643d180fd18082fe5677e (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 48de824a66fd45fd96e8c38a35ddfbf6 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 850a2926318344578a8df9dbb87f8dd5 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 0fd88b0811164786baca5724ec7569dc (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 549481cd181247a2a5a8fcf8081e119d (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule c6bffdf95a5141d0b79c5ec97e3d9966 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 8a16ed37b2ec4875bcebe1f0de573ddb (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule fc9290e784f04d7a9f41a9c4468c3ae2 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 4fec49ef71d247c3bec0220c5cc5122d (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 36---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
34


c1 has what public at from 733698.0 till -1.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 0c17d79678f2431baf45a7ffc4e400cf (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule ddadd9444a6748f2a9435e304909fa55 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule a86374932beb4fffb7f9cc1f3ebd7061 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 0072eddaec37499f919d74e0a25f0fe4 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 64c918a4edd042ba9eb2cdef03fb68c5 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 9c9ed2cb829f48949111eef5553a9701 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 581f4de688294d1d9d2e0dcdaf9e56bc (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule dcc3f6d567f14036a8711e51a9703ad5 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule caa0721a98734fd09d4f53b4095a8c45 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule b2a3b3a8a32f49458d9c6f0ddc5d05c4 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 6dfd8747437d4e79a00e6f7e8f5e1c76 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 89b7d7c8eddd4267bf06c5f1e6855be7 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 03af7eade2cc4f0db081159718bbdd65 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 3762da444fd8425f81bfba7d368124fe (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 56e0e3a17fd64b1c87bb3f7621186c32 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule d1cb86318db9496dbca8bba60088a0ac (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
----------running---------------------
----------runned: 33---------------------
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 10---------------------
(find-all-instances ((?prop Proposition) (?Y40 Has) (?Y41 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y40:what [private]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y42 Has) (?Y43 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y42:what [public]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
41


c1 has what public at from 733698.0 till -1.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule e9d72d1750274f8c8c9c51542ede0389 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule ec0e79d5677a4afbb9f1f53bbd5eed2c (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 1f63a97e0eed4f73a02d0019d31527a7 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 27ccbb9a8c734df4b538888ff02a0982 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule b61d76ca18184f4d9d235245d1519946 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule d8ac9612d3a84abdb5ea525f601ef9bb (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 0316932aa2e042e9bfbf2857b11d1108 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 4326135b942244f095ded3c645affff6 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 6372a2f35c2d49e8ba8d76a644cfa552 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule a78ac0651b034fd78795af9c1a0a7a4d (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule cb373d28db2b43d8ae1c8c756c8683c9 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 38c2da56d5324d82be976a4fdf01ad5b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 8bfb96c8607640128475e01b7f1ee328 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 6c735f0fffef4f37a31fc1fa5b89ea1d (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule e664a1d1ed9d44829155847828913292 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule bacaf8db86814d54986db43567d3d406 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 8e05397b4a934915987eef388650fe44 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 1defa7661d044b0fa574aab372665e8f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule d8c748656e0249068175520252f3d34c (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 8dc7980dea2b480bb85ff42062b775e3 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 61e0452def4d4609b51148c5c6476cae (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 4f1f41758d7f423ab9a3df53c0dc1065 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 539a10a2758649979b396e4b18781f1d (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule daae52f731124b68a0d9a11a01947649 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule d44fcb2555944dc39668c17fbbb0e064 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 681ecf36a8634bd68c68a28173a39a74 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 4d7e34558b7d4efc9c9e1549b529ddb7 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 9c2079c5c11e4810a7e1912e75d13eca (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 42e2e8b3fd144dbeb5311807ee89aea0 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 646464b1301b4a8ea956a51601fa17f9 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 3320cfc5ed40467eae6284a8705fbf7c (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 5a46e2b053f44d32bf8afff9ff063496 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule f9c9bd03665d474c9bcf587d50cc35fb (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 2306b7bff1ac4b2fa241bc217f9fb3a0 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 564de84941bc4749bff621f0f33f5a80 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule bad4b829f20f4265877c64b9c40e315b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 363b727638624c638c0146509e17c06c (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 55b7f964dad44ab99be8da44ada00d59 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule c98d76ed143140ab9e6373b32b79969e (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 2cb8ef8802234eb3aacfc7ecb942e87e (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule a4be943d0285457ebb7f6e30577f5cdc (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 41721e1490dd4a7a84f1afbf9f25e44e (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule de9742c2cfa14003a617f6c49051bc6a (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 379b5eb82c1840f9b270f20138c0d0cd (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule c58f831603214ae7be5892a6da1cc8c2 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 4bda178a1bc84868a8b90e1cea3306ac (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 88b974ff85864554aeb3b9e4fad8c985 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 7e2dff9a1d654773988e4c97b9c1eb4a (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 9f2f9852ef8c40948687cd91dbe245e6 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule ffb80fd5de504fbb86dd69b64c4913df (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule ccb0e783578349a5bbec9b2980ad24ef (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule d51e51f067114486bb5b4d8e055d2175 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 305fe7c319184e52807c313f438b4d5e (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 8d97f2fc39014f76977a0f49cf2222f4 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 3b8b1906836d4a9fac228708ecfb246d (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 50d4c5b9132e4c1dada3c543c27fcfa8 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule b29085565237488fa7342d4cd1412b9c (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule cdcda72b30c04dbb8340f66d9b6a4166 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 3d738c596f834b10970a9ab322371ae9 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 77d712a06cdf4c57b5d244b582850347 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 979a6d44fcb045fda287422c9f5e6f03 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule bd5dbacca87e4f2dbeb9c70311fbd57a (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 2415740dc1d84152b71db0f09f36b628 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 9d6a98e390e74cb6b5560a0a836d65d1 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(find-all-instances ((?prop Proposition) (?Y40 IsOwner)) (and (eq ?prop:subject [jane]) (eq ?Y40:of [c1]) (eq ?prop:predicate ?Y40) (eq ?prop:time 733698.0) (eq ?prop:truth 1)))
0


no
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
----------running---------------------
----------runned: 33---------------------
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 10---------------------
(find-all-instances ((?prop Proposition) (?Y41 Has) (?Y42 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y41:what [private]) (eq ?prop:predicate ?Y41) (= ?Y42:start 733698.0) (= ?Y42:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y43 Has) (?Y44 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y43:what [public]) (eq ?prop:predicate ?Y43) (= ?Y44:start 733698.0) (= ?Y44:end -1.0) (eq ?prop:truth 1)))
41


c1 has what public at from 733698.0 till -1.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 5dee8b379fe04637984c740a74b0ce32 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 1e0c35a9d4404b93a053776ead31d519 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 8dbfb1df88bc4cfbaab1f0b54e5cf54d (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 3dcee21ccb814e4eac1ba54ce02f03b4 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 14900053817647ceac3d116a9b056382 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 80666183dbfb41cbbe422db53da613ba (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 58bcdbf59e254325a0505b7af3138983 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule ed0e9c1e7d1d4e0dba93038be3666177 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 19ad3bf1fc644a019a6cfdb1aaa0f6f4 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule cbe32844e4cb405a908be3c56252bf27 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 62653babc724451cb55aaebe9fe39d9a (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 335eca38d4ff456e8079b9dc062d9690 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 7c9ec0b0ea4442c8be680897ad171233 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule ba9cc236bc294212a0cb80c5e38c4567 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 7544d10d857d4cb68a272c1740ad40a2 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 16199544f875446280ecf11501ec4a39 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(find-all-instances ((?prop Proposition) (?Y40 IsOwner)) (and (eq ?prop:subject [jane]) (eq ?Y40:of [c1]) (eq ?prop:predicate ?Y40) (eq ?prop:time 733698.0) (eq ?prop:truth 1)))
0


no
----------running---------------------
----------runned: 33---------------------
(find-all-instances ((?prop Proposition) (?Y41 IsOwner)) (and (eq ?prop:subject [jane]) (eq ?Y41:of [c1]) (eq ?prop:predicate ?Y41) (eq ?prop:time 733698.0) (eq ?prop:truth 1)))
0


no
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 05b1188814cb45618f48ec8f1c5883c2 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 9cf658eb199b4327950d877e676ec961 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule e42af8d6ac7d452f9e50daeb9b03fce2 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 639416e8237f4e8683d0b5e493d49242 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule c68c557ec8b740479f005481e5b1c75a (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule ff9e912ef47847cc98ef423ecdb23f9f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule c2fa8b7f030b432b80321a97b200e780 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule c9db4985ad394b0aaacd8a104f15ab5f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 07e653a7bb2e4cb38dd959e498b4a0a9 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule c574434da02040dc84e94f5e59582295 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule adc4caf0d85a42a88af6687319ed050d (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule d09106f51b3e42a99c8ce0438471d68f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule f1ad3013356a45d2b1f2335d5cf78fcd (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 8e682c489ac742ea858a21f6798866dd (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule a8ad1f10882c4b63acff119a63c49084 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 2b27680f2cd84a6cbd84a3c35df72c8f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(find-all-instances ((?prop Proposition) (?Y40 IsOwner)) (and (eq ?prop:subject [jane]) (eq ?Y40:of [c1]) (eq ?prop:predicate ?Y40) (eq ?prop:time 733698.0) (eq ?prop:truth 1)))
0


no
----------running---------------------
----------runned: 33---------------------
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 9647a6e65c1447c4a370fb6c06782288 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 8437c1434dcc4e53b4e3197233aafb10 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule d0b547b67b484cb5b196bb46347619b4 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 0a75b105da8e4d348202dfb3fc305e38 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 5a96bf0c20dc4f8794976e48bc9c816f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 7eb62dcfb82f45399901d8830f8ea402 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule b6950fc4731841b5995ea15ec1b7239a (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule d92c0218056a4d308bd919fe52d4f6dd (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 4f551fac32194b96a4333bd236b5a65f (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule a438efb85857488dabcb12ed83175c57 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 7adb8bc87c2c4c9c80f1f9a59b0db75e (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 325e0729d7104fb28856d1f4de935df9 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule a543d6e31b774ef798618f719f56c15a (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 29fd215f700041ff8f3a219795c632fe (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 4db1ee50e1e44078bb0a23916d8e643d (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 56ae06ae5b7e47a89dcaa9aa5357df4a (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(find-all-instances ((?prop Proposition) (?Y40 IsOwner)) (and (eq ?prop:subject [jane]) (eq ?Y40:of [c1]) (eq ?prop:predicate ?Y40) (eq ?prop:time 733698.0) (eq ?prop:truth 1)))
0


no
----------running---------------------
----------runned: 33---------------------
(find-all-instances ((?prop Proposition) (?Y41 IsOwner) (?Y42 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y41:of [c1]) (eq ?prop:predicate ?Y41) (= ?Y42:start 733698.0) (= ?Y42:end -1.0) (eq ?prop:truth 1)))
35


jane isowner of c1 at from 733698.0 till -1.0
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
----------running---------------------
----------runned: 0---------------------
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 10---------------------
(find-all-instances ((?prop Proposition) (?Y43 Has) (?Y44 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y43:what [private]) (eq ?prop:predicate ?Y43) (= ?Y44:start 733698.0) (= ?Y44:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y45 Has) (?Y46 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y45:what [public]) (eq ?prop:predicate ?Y45) (= ?Y46:start 733698.0) (= ?Y46:end -1.0) (eq ?prop:truth 1)))
41


c1 has what public at from 733698.0 till -1.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 27d5e9fc8f8640e9a8568b200c3e565d (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 20cf6dbccba14cfcac26642466d193bb (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 9fea6ac8c92d4798bc8bd04af854c249 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 50851295549c491a86f6927a73189b6b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule e0e022c4bf1041498df7668410d09544 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 65205cb0018e4b858e04cd2e611eebb3 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule f9ad67a984d9431fbf32e5773421e5a6 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 2561a1f7e94d407d895ed13dba07dccd (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule dda7a96c7fb64f48b7c049aeb69d8265 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule ebc111adcd08411d82a15918d28826da (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 20e4b9ae033243d0bdf284eaac5daca5 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 8f9d789125ad494bafe2210efa304136 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 141e097043df449c8e612b76c2368d86 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule eba4b4bf938b42bc9e1eb77f4136499f (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 0fadc4d470f140f6b2f254823196e60e (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule d5ad6c53884541bcbb494aae8ef8b209 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(find-all-instances ((?prop Proposition) (?Y40 IsOwner) (?Y41 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y40:of [c1]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
----------running---------------------
----------runned: 33---------------------
(find-all-instances ((?prop Proposition) (?Y42 IsOwner) (?Y43 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y42:of [c1]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
35


jane isowner of c1 at from 733698.0 till -1.0
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
----------running---------------------
----------runned: 0---------------------
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 10---------------------
(find-all-instances ((?prop Proposition) (?Y44 Has) (?Y45 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y44:what [private]) (eq ?prop:predicate ?Y44) (= ?Y45:start 733698.0) (= ?Y45:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y46 Has) (?Y47 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y46:what [public]) (eq ?prop:predicate ?Y46) (= ?Y47:start 733698.0) (= ?Y47:end -1.0) (eq ?prop:truth 1)))
41


c1 has what public at from 733698.0 till -1.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 6a671eec5a484132a84414db46fb58cb (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 8f058f0c1f2a463ba77406f385a359d7 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 6749e125aa534971bccc5bb92b425f8c (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 5463f322f2cd49d2976ddeb0f8d214fb (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule fb1af86c1bb04f87a6b342d8593eadfb (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 57fa64a5f5ef4a2dadc220169072e67b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule a72b89d8b2614a0da2691c6da9a4df09 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule c8adf8a89d294b1facdbaebcc7a5a96c (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 2e5d9ca11b114c1182ed0fbad8b74179 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 530fd8dd98184c20b3401624143d452a (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 2f6fed8df4474ed8861addf80e4139ab (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 7cf1f58d2729476fa3d93945ce47a296 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 73f79547b3864500abd8b686069438f4 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule e2c3c87203b64e6aa243784d3754f770 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 91c89a816fff42598eb86a08665d8300 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule da51d67f248b4ff1af62f261d581bb3e (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(find-all-instances ((?prop Proposition) (?Y40 IsOwner) (?Y41 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y40:of [c1]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
----------running---------------------
----------runned: 33---------------------
(find-all-instances ((?prop Proposition) (?Y42 IsOwner) (?Y43 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y42:of [c1]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
35


jane isowner of c1 at from 733698.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y44 Has) (?Y45 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y44:what [private]) (eq ?prop:predicate ?Y44) (= ?Y45:start 733698.0) (= ?Y45:end -1.0) (eq ?prop:truth 1)))
35


c1 has what private at from 733698.0 till -1.0
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
----------running---------------------
----------runned: 0---------------------
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 10---------------------
(find-all-instances ((?prop Proposition) (?Y46 Has) (?Y47 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y46:what [private]) (eq ?prop:predicate ?Y46) (= ?Y47:start 733698.0) (= ?Y47:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y48 Has) (?Y49 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y48:what [public]) (eq ?prop:predicate ?Y48) (= ?Y49:start 733698.0) (= ?Y49:end -1.0) (eq ?prop:truth 1)))
41


c1 has what public at from 733698.0 till -1.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 6716dcddaedc41e3bc9c5c1e0e61786b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 95e60c9767f54348a99683a0f97e1c1f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 6d406ad98b724f74a0cab5414de727d5 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule ef88a679ac524037ac6401f28a568821 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 292556b184ff4355a43e12aa5d656d94 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 7c79479f43b04e7bab2afd9262924dfa (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 0f67f57cfd6b40d8a0fb7c8eb0737e02 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 7dc25b4890b946faa4dcbf3c8d59994a (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 62c9d945ed5240a6b5f1f8263b462456 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 55d9b47cd0b546f8a71f0502e5401487 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule f234a02453814d99942ade4e8e721378 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 7f6b408bf9604e7399e6c24cfaf56098 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 2410597203ae4b14953a875c7b561a24 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 46d0f51e806849d7ad4f2bd73af956e2 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 89453b744a254e44884a726bba417fa3 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 6886586cdfd14dfaae68f475f06779b2 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(find-all-instances ((?prop Proposition) (?Y40 IsOwner) (?Y41 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y40:of [c1]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
----------running---------------------
----------runned: 33---------------------
(find-all-instances ((?prop Proposition) (?Y42 IsOwner) (?Y43 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y42:of [c1]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
35


jane isowner of c1 at from 733698.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y44 Has) (?Y45 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y44:what [private]) (eq ?prop:predicate ?Y44) (= ?Y45:start 733698.0) (= ?Y45:end -1.0) (eq ?prop:truth 1)))
35


c1 has what private at from 733698.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y46 IsOwner) (?Y47 Duration)) (and (eq ?prop:subject [pete]) (eq ?Y46:of [c2]) (eq ?prop:predicate ?Y46) (= ?Y47:start 733698.0) (= ?Y47:end -1.0) (eq ?prop:truth 1)))
0


no
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
----------running---------------------
----------runned: 0---------------------
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 10---------------------
(find-all-instances ((?prop Proposition) (?Y48 Has) (?Y49 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y48:what [private]) (eq ?prop:predicate ?Y48) (= ?Y49:start 733698.0) (= ?Y49:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y50 Has) (?Y51 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y50:what [public]) (eq ?prop:predicate ?Y50) (= ?Y51:start 733698.0) (= ?Y51:end -1.0) (eq ?prop:truth 1)))
41


c1 has what public at from 733698.0 till -1.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule cb1dadc8178949e79ee46a46fc5d97ac (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 9e293d463bcd45b29108ca2063e727fe (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 22c2769934dd483eb688e667f4e50a3c (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 394a56b7e40b49ada6f99ba61835095b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 2dc396917cbb4941b0270af5e9f79eaa (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 4aebd54148c747b4b6e5aacdb8d73715 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule d08f1048bbbc42beaf932bd985e6ef9d (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule b34bc8bc79dd464a8704741a7ff602ad (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule e5f983d76b10409baf37ebb173d0314a (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule eabc963fa8074a73a36aabc33db2022c (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 8f119ebbca0c4680a231f042a3120558 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule eac9a1578a7b4e1b97c9c65f9b2bdbb4 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 1aa8a66f4a3145dfb4b89e9473c23156 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 0f9239b69fe746dcb106ca339fefd946 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 33209fa7f0124fd0b62b398dd9f6439e (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 44b6107ecfe644b195020b9d0731488c (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(find-all-instances ((?prop Proposition) (?Y40 IsOwner) (?Y41 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y40:of [c1]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
----------running---------------------
----------runned: 33---------------------
(find-all-instances ((?prop Proposition) (?Y42 IsOwner) (?Y43 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y42:of [c1]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
35


jane isowner of c1 at from 733698.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y44 Has) (?Y45 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y44:what [private]) (eq ?prop:predicate ?Y44) (= ?Y45:start 733698.0) (= ?Y45:end -1.0) (eq ?prop:truth 1)))
35


c1 has what private at from 733698.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y46 IsOwner) (?Y47 Duration)) (and (eq ?prop:subject [pete]) (eq ?Y46:of [c2]) (eq ?prop:predicate ?Y46) (= ?Y47:start 733698.0) (= ?Y47:end -1.0) (eq ?prop:truth 1)))
0


no
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
----------running---------------------
----------runned: 0---------------------
(find-all-instances ((?prop Proposition) (?Y48 Has) (?Y49 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y48:what [public]) (eq ?prop:predicate ?Y48) (= ?Y49:start 733698.0) (= ?Y49:end -1.0) (eq ?prop:truth 1)))
0


no
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 10---------------------
(find-all-instances ((?prop Proposition) (?Y50 Has) (?Y51 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y50:what [private]) (eq ?prop:predicate ?Y50) (= ?Y51:start 733698.0) (= ?Y51:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y52 Has) (?Y53 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y52:what [public]) (eq ?prop:predicate ?Y52) (= ?Y53:start 733698.0) (= ?Y53:end -1.0) (eq ?prop:truth 1)))
41


c1 has what public at from 733698.0 till -1.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule e0d65317c5f84656a3f2ed5047c5b68a (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 32db586221c144cd80de1609c337388a (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule a546f7d53d4a48b185a6a227078f6bd4 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 13799e99f8de4a2a8ea59a3bc42f8ed8 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 392b2dffafa1455b9252261f121bc105 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 82bebe0aa5604012966d09d0e304600f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule ffc0c49ab4c44ceab7a203f631a83b0e (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 686deb596128490fa7ab8bc72355adcd (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 1063b141163640d28f751b99031f3e3a (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 384af53387ce4a25993f93b1e104d409 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule e075f84919b74e61bf097ca1628f1868 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 1fc43a569bd14f5c92fc34bb1cd37786 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 2da47cc9af244234918bf0a9b90fc79e (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule fc23f764a3f9472ea0b325afe7c24a77 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule b36d9060f91c4ab380b31fef431764ee (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 729a4e43686c47a8bb96a38b624b744e (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(find-all-instances ((?prop Proposition) (?Y40 IsOwner) (?Y41 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y40:of [c1]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
----------running---------------------
----------runned: 33---------------------
(find-all-instances ((?prop Proposition) (?Y42 IsOwner) (?Y43 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y42:of [c1]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
35


jane isowner of c1 at from 733698.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y44 Has) (?Y45 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y44:what [private]) (eq ?prop:predicate ?Y44) (= ?Y45:start 733698.0) (= ?Y45:end -1.0) (eq ?prop:truth 1)))
35


c1 has what private at from 733698.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y46 IsOwner) (?Y47 Duration)) (and (eq ?prop:subject [pete]) (eq ?Y46:of [c2]) (eq ?prop:predicate ?Y46) (= ?Y47:start 733698.0) (= ?Y47:end -1.0) (eq ?prop:truth 1)))
0


no
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
----------running---------------------
----------runned: 0---------------------
(find-all-instances ((?prop Proposition) (?Y48 Has) (?Y49 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y48:what [public]) (eq ?prop:predicate ?Y48) (= ?Y49:start 733698.0) (= ?Y49:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y50 Has) (?Y51 Duration)) (and (eq ?prop:subject [c2]) (eq ?Y50:what [public]) (eq ?prop:predicate ?Y50) (= ?Y51:start 733698.0) (= ?Y51:end -1.0) (eq ?prop:truth 1)))
0


no
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 10---------------------
(find-all-instances ((?prop Proposition) (?Y52 Has) (?Y53 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y52:what [private]) (eq ?prop:predicate ?Y52) (= ?Y53:start 733698.0) (= ?Y53:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y54 Has) (?Y55 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y54:what [public]) (eq ?prop:predicate ?Y54) (= ?Y55:start 733698.0) (= ?Y55:end -1.0) (eq ?prop:truth 1)))
41


c1 has what public at from 733698.0 till -1.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 6f9053f7ba4744638455f5b4f08466e4 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 2473e7d740564f1d80d97c5562c7abc1 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule c381dc1a3ebf43c8a031264a8760ddf3 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule a9ac7699d9634493a98580065443a871 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule b7d565a130b047e6a55ee5007b0810ae (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 8aa6cb183b304f16b510e3809b6e22bd (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule f0baf9a8274f4a259037c64877ed1616 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule ddec56ae3fea476b8dd591fbe062119b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule c615f0925f584b64bf989699ff9568a1 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 8a9542ad3e83409988b442541e34c473 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule fb3fc2da84f149d7b97aadcb65f3c221 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule ffc8b797d9e947ec82ba5b4f549013b3 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 86bf78c3877b4432bd56ec92402f71cb (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 7dbabde711ba4731bbfaa7c8de0f8672 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 45094cb8372e41f099b69dd9ec24cb3b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule b6916b5ce0f34a73ba39bacda4fef691 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(find-all-instances ((?prop Proposition) (?Y40 IsOwner) (?Y41 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y40:of [c1]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
----------running---------------------
----------runned: 33---------------------
(find-all-instances ((?prop Proposition) (?Y42 IsOwner) (?Y43 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y42:of [c1]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
35


jane isowner of c1 at from 733698.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y44 Has) (?Y45 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y44:what [private]) (eq ?prop:predicate ?Y44) (= ?Y45:start 733698.0) (= ?Y45:end -1.0) (eq ?prop:truth 1)))
35


c1 has what private at from 733698.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y46 IsOwner) (?Y47 Duration)) (and (eq ?prop:subject [pete]) (eq ?Y46:of [c2]) (eq ?prop:predicate ?Y46) (= ?Y47:start 733698.0) (= ?Y47:end -1.0) (eq ?prop:truth 1)))
0


no
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
----------running---------------------
----------runned: 0---------------------
(find-all-instances ((?prop Proposition) (?Y48 Has) (?Y49 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y48:what [public]) (eq ?prop:predicate ?Y48) (= ?Y49:start 733698.0) (= ?Y49:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y50 Has) (?Y51 Duration)) (and (eq ?prop:subject [c2]) (eq ?Y50:what [public]) (eq ?prop:predicate ?Y50) (= ?Y51:start 733698.0) (= ?Y51:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y52 Can) (?Y53 View) (?Y54 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y53:what [c1]) (eq ?Y52:what ?Y53) (eq ?prop:predicate ?Y52) (= ?Y54:start 733698.0) (= ?Y54:end -1.0) (eq ?prop:truth 1)))
35


jane can what view what c1 at from 733698.0 till -1.0
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 10---------------------
(find-all-instances ((?prop Proposition) (?Y55 Has) (?Y56 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y55:what [private]) (eq ?prop:predicate ?Y55) (= ?Y56:start 733698.0) (= ?Y56:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y57 Has) (?Y58 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y57:what [public]) (eq ?prop:predicate ?Y57) (= ?Y58:start 733698.0) (= ?Y58:end -1.0) (eq ?prop:truth 1)))
41


c1 has what public at from 733698.0 till -1.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 9a167be44f804f1ebc5c4972c270013a (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule c714a977b1da465390540e92e03915ac (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 68b355cfd28a43939b447878a88557df (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 1f65d0cf11314dc5b9811161f4c7a9ac (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule eda10077276d488189c49999afad26a7 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule a6a281ae98ff46a4bd46e8a421e92ce0 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule f156830ab278440ebae27bd5af571cce (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 83030170e6a040e78a365acf942adc01 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 1c18004fa3444b8b929ead373d779a15 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 507b076a54cc4229a92c76c33fa78c12 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule dade9bf3e3e34bd4a9575687724c1161 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule aaf266a39bd249f7aeb49e7edef53239 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule a70e0748b7754a31a587fdc527c632d7 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 111db635011c4b06ab3e1fa00359e081 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule c01e21f21a744feebdd75adaf42f8757 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 2af25b5ef27b4d32b5c2a9beeb7780f9 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(find-all-instances ((?prop Proposition) (?Y40 IsOwner) (?Y41 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y40:of [c1]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
----------running---------------------
----------runned: 33---------------------
(find-all-instances ((?prop Proposition) (?Y42 IsOwner) (?Y43 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y42:of [c1]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
35


jane isowner of c1 at from 733698.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y44 Has) (?Y45 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y44:what [private]) (eq ?prop:predicate ?Y44) (= ?Y45:start 733698.0) (= ?Y45:end -1.0) (eq ?prop:truth 1)))
35


c1 has what private at from 733698.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y46 IsOwner) (?Y47 Duration)) (and (eq ?prop:subject [pete]) (eq ?Y46:of [c2]) (eq ?prop:predicate ?Y46) (= ?Y47:start 733698.0) (= ?Y47:end -1.0) (eq ?prop:truth 1)))
0


no
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
----------running---------------------
----------runned: 0---------------------
(find-all-instances ((?prop Proposition) (?Y48 Has) (?Y49 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y48:what [public]) (eq ?prop:predicate ?Y48) (= ?Y49:start 733698.0) (= ?Y49:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y50 Has) (?Y51 Duration)) (and (eq ?prop:subject [c2]) (eq ?Y50:what [public]) (eq ?prop:predicate ?Y50) (= ?Y51:start 733698.0) (= ?Y51:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y52 Can) (?Y53 View) (?Y54 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y53:what [c1]) (eq ?Y52:what ?Y53) (eq ?prop:predicate ?Y52) (= ?Y54:start 733698.0) (= ?Y54:end -1.0) (eq ?prop:truth 1)))
35


jane can what view what c1 at from 733698.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y55 Can) (?Y56 View) (?Y57 Duration)) (and (eq ?prop:subject [pete]) (eq ?Y56:what [c1]) (eq ?Y55:what ?Y56) (eq ?prop:predicate ?Y55) (= ?Y57:start 733698.0) (= ?Y57:end -1.0) (eq ?prop:truth 1)))
0


no
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 10---------------------
(find-all-instances ((?prop Proposition) (?Y58 Has) (?Y59 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y58:what [private]) (eq ?prop:predicate ?Y58) (= ?Y59:start 733698.0) (= ?Y59:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y60 Has) (?Y61 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y60:what [public]) (eq ?prop:predicate ?Y60) (= ?Y61:start 733698.0) (= ?Y61:end -1.0) (eq ?prop:truth 1)))
41


c1 has what public at from 733698.0 till -1.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule f9724ac7b5fa42229fc1e7f892a1aab4 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 39dfd6c0817a4a199ba4a1823d8a63f9 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule c81cc9db883b421baf6ee47b454700c3 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule d42387fcd1974c02b6759529880af566 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 85338d86386d4717969019bf18529289 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule e6688aaaf0a943a8b74d985f8c4270c0 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 8052d93ff13b4479bfe2f5ff8c247a26 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule b57e27d2ba6d4bdbad7d2e1e1a2daafc (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 950ed12811b54b2cb414da3284c99dc0 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule a70efd0ea3324f0886d06eb1ac22db67 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 43ddbf9a494b401ba8058bc73c31b00c (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule e8560f3cc5c541e09ec2b1c72418fe55 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule ccbdd9888757429cad835ef5f485dcda (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 3daa7ae614e741fd85b8a5646e86c758 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 45066c5b773c4ba683d895261606ed89 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 6a88868ab47746b88f676044cd992bc4 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(find-all-instances ((?prop Proposition) (?Y40 IsOwner) (?Y41 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y40:of [c1]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
----------running---------------------
----------runned: 33---------------------
(find-all-instances ((?prop Proposition) (?Y42 IsOwner) (?Y43 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y42:of [c1]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
35


jane isowner of c1 at from 733698.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y44 Has) (?Y45 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y44:what [private]) (eq ?prop:predicate ?Y44) (= ?Y45:start 733698.0) (= ?Y45:end -1.0) (eq ?prop:truth 1)))
35


c1 has what private at from 733698.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y46 IsOwner) (?Y47 Duration)) (and (eq ?prop:subject [pete]) (eq ?Y46:of [c2]) (eq ?prop:predicate ?Y46) (= ?Y47:start 733698.0) (= ?Y47:end -1.0) (eq ?prop:truth 1)))
0


no
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
----------running---------------------
----------runned: 0---------------------
(find-all-instances ((?prop Proposition) (?Y48 Has) (?Y49 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y48:what [public]) (eq ?prop:predicate ?Y48) (= ?Y49:start 733698.0) (= ?Y49:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y50 Has) (?Y51 Duration)) (and (eq ?prop:subject [c2]) (eq ?Y50:what [public]) (eq ?prop:predicate ?Y50) (= ?Y51:start 733698.0) (= ?Y51:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y52 Can) (?Y53 View) (?Y54 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y53:what [c1]) (eq ?Y52:what ?Y53) (eq ?prop:predicate ?Y52) (= ?Y54:start 733698.0) (= ?Y54:end -1.0) (eq ?prop:truth 1)))
35


jane can what view what c1 at from 733698.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y55 Can) (?Y56 View) (?Y57 Duration)) (and (eq ?prop:subject [pete]) (eq ?Y56:what [c1]) (eq ?Y55:what ?Y56) (eq ?prop:predicate ?Y55) (= ?Y57:start 733698.0) (= ?Y57:end -1.0) (eq ?prop:truth 1)))
0


no
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 10---------------------
(find-all-instances ((?prop Proposition) (?Y58 Has) (?Y59 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y58:what [private]) (eq ?prop:predicate ?Y58) (= ?Y59:start 733698.0) (= ?Y59:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y60 Has) (?Y61 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y60:what [private]) (eq ?prop:predicate ?Y60) (= ?Y61:start 733698.0) (= ?Y61:end -1.0) (eq ?prop:truth 1)))
41


c1 has what private at from 733698.0 till -1.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule 22fddefe2d7c4fb588410cda32bcba5c (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 4450d772aea74293a52e050644de7167 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 69c973b873da425e9c5c6cf4e5ec222f (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 71c5db2910ac4267a9abeeee757d0cf0 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule d2749ef0dabd4e03b6cddc272d173f3a (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 5d23fcdf9ebf4b45bb2d516b9c453f09 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule fb48d9e61e8a4488aa4488d40d80a5ee (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 23c13ceaaef44355b7049db40e219edf (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 3e7b236657ae4bccb22f46a14f8869bf (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 6a4153731ab84625bc3816618a91e375 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 5023642cbe784bbb8946360e199ec2aa (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 34e2483a529d49d1ae403a35257a9e5a (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 013dedc61ad644e88dc17a45204f6836 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule d31baa0ebf32400289c7541996ccf03b (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 52a6b34c8d2a4edab7ce63fdcc22c6da (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 8aa63de4cfa74d49b0b581248e2d6791 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(find-all-instances ((?prop Proposition) (?Y40 IsOwner) (?Y41 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y40:of [c1]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
----------running---------------------
----------runned: 33---------------------
(find-all-instances ((?prop Proposition) (?Y42 IsOwner) (?Y43 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y42:of [c1]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
35


jane isowner of c1 at from 733698.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y44 Has) (?Y45 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y44:what [private]) (eq ?prop:predicate ?Y44) (= ?Y45:start 733698.0) (= ?Y45:end -1.0) (eq ?prop:truth 1)))
35


c1 has what private at from 733698.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y46 IsOwner) (?Y47 Duration)) (and (eq ?prop:subject [pete]) (eq ?Y46:of [c2]) (eq ?prop:predicate ?Y46) (= ?Y47:start 733698.0) (= ?Y47:end -1.0) (eq ?prop:truth 1)))
0


no
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
----------running---------------------
----------runned: 0---------------------
(find-all-instances ((?prop Proposition) (?Y48 Has) (?Y49 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y48:what [public]) (eq ?prop:predicate ?Y48) (= ?Y49:start 733698.0) (= ?Y49:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y50 Has) (?Y51 Duration)) (and (eq ?prop:subject [c2]) (eq ?Y50:what [public]) (eq ?prop:predicate ?Y50) (= ?Y51:start 733698.0) (= ?Y51:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y52 Can) (?Y53 View) (?Y54 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y53:what [c1]) (eq ?Y52:what ?Y53) (eq ?prop:predicate ?Y52) (= ?Y54:start 733698.0) (= ?Y54:end -1.0) (eq ?prop:truth 1)))
35


jane can what view what c1 at from 733698.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y55 Can) (?Y56 View) (?Y57 Duration)) (and (eq ?prop:subject [pete]) (eq ?Y56:what [c1]) (eq ?Y55:what ?Y56) (eq ?prop:predicate ?Y55) (= ?Y57:start 733698.0) (= ?Y57:end -1.0) (eq ?prop:truth 1)))
0


no
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 10---------------------
(find-all-instances ((?prop Proposition) (?Y58 Has) (?Y59 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y58:what [private]) (eq ?prop:predicate ?Y58) (= ?Y59:start 733698.0) (= ?Y59:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y60 Has) (?Y61 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y60:what [public]) (eq ?prop:predicate ?Y60) (= ?Y61:start 733698.0) (= ?Y61:end -1.0) (eq ?prop:truth 1)))
41


c1 has what public at from 733698.0 till -1.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule e4f18ca576b34b75934aad58e2891e92 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 7da22d5709bb41c1a583b6b5e321450f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 9085ef89c2294b8793667a5f03238806 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 06b8292679be4a2b9b7ce17af6a51eb5 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 4422f76a51d24a36b00807fe4583d0e4 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 31759a36060b4119a983bc00f42b7909 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule a7f9b7cd32b840d1a81ae2b096e60244 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule ed93271e46854328a06aef9d926fde8b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 343f2d36f65541dcb3e0c34e651efe75 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 3b983670853e4442b3f1f42ac499ca2a (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 7563cc5c94414a8da010a616314e15bf (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule ecb85f33a859483ab45ed027c8b54e1e (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 4e7698e6c7e445e09ca15945694b9084 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 424c506823f349f5a9c9fe7aaa36150e (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 4e1999f1a0264ab690dd1a1dbe9aa26c (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 7d0317e2a45e4147a5b387afe65ed294 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(find-all-instances ((?prop Proposition) (?Y40 IsOwner) (?Y41 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y40:of [c1]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
----------running---------------------
----------runned: 33---------------------
(find-all-instances ((?prop Proposition) (?Y42 IsOwner) (?Y43 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y42:of [c1]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
35


jane isowner of c1 at from 733698.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y44 Has) (?Y45 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y44:what [private]) (eq ?prop:predicate ?Y44) (= ?Y45:start 733698.0) (= ?Y45:end -1.0) (eq ?prop:truth 1)))
35


c1 has what private at from 733698.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y46 IsOwner) (?Y47 Duration)) (and (eq ?prop:subject [pete]) (eq ?Y46:of [c2]) (eq ?prop:predicate ?Y46) (= ?Y47:start 733698.0) (= ?Y47:end -1.0) (eq ?prop:truth 1)))
0


no
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
----------running---------------------
----------runned: 0---------------------
(find-all-instances ((?prop Proposition) (?Y48 Has) (?Y49 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y48:what [public]) (eq ?prop:predicate ?Y48) (= ?Y49:start 733698.0) (= ?Y49:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y50 Has) (?Y51 Duration)) (and (eq ?prop:subject [c2]) (eq ?Y50:what [public]) (eq ?prop:predicate ?Y50) (= ?Y51:start 733698.0) (= ?Y51:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y52 Can) (?Y53 View) (?Y54 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y53:what [c1]) (eq ?Y52:what ?Y53) (eq ?prop:predicate ?Y52) (= ?Y54:start 733698.0) (= ?Y54:end -1.0) (eq ?prop:truth 1)))
35


jane can what view what c1 at from 733698.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y55 Can) (?Y56 View) (?Y57 Duration)) (and (eq ?prop:subject [pete]) (eq ?Y56:what [c1]) (eq ?Y55:what ?Y56) (eq ?prop:predicate ?Y55) (= ?Y57:start 733698.0) (= ?Y57:end -1.0) (eq ?prop:truth 1)))
0


no
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 10---------------------
(find-all-instances ((?prop Proposition) (?Y58 Has) (?Y59 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y58:what [private]) (eq ?prop:predicate ?Y58) (= ?Y59:start 733698.0) (= ?Y59:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y60 Has) (?Y61 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y60:what [private]) (eq ?prop:predicate ?Y60) (= ?Y61:start 733698.0) (= ?Y61:end -1.0) (eq ?prop:truth 1)))
41


c1 has what private at from 733698.0 till -1.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule aa6dfd794b4d4919855cdfb080e6ce60 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 638a00ebebd44ce9a0479c50fa0132fb (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule eb503a11f1bc479f94329f5df6cceb91 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 3deaa2329ed640e385097cb6d95b64b6 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 6e7a710d4c8e4171ba9ce4e0eb7b2f1b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 0d45c9f571af4662a569b8e9c47945b6 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 3361053c1f8443b2bed334e850cea2d1 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 2f523a01e40748ec89fea9798718c4b5 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 09863ee70c3e4b0bb3aa8418b24554de (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 16f3d3331a9048ccbfe2802cf20591ba (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 5599839428f148849b14d1e98d202246 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 57ceebd7bd0c417d889fd82ec8aa884a (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 2f0fc47816e5427b97344bf7c97d5dfc (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule f83cd083722f4051a7783c411139272b (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 1f27bfb91296439ea06042303a1ada63 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 055df6321e8f4fdcab7359a217f82923 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(find-all-instances ((?prop Proposition) (?Y40 IsOwner) (?Y41 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y40:of [c1]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
----------running---------------------
----------runned: 33---------------------
(find-all-instances ((?prop Proposition) (?Y42 IsOwner) (?Y43 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y42:of [c1]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
35


jane isowner of c1 at from 733698.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y44 Has) (?Y45 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y44:what [private]) (eq ?prop:predicate ?Y44) (= ?Y45:start 733698.0) (= ?Y45:end -1.0) (eq ?prop:truth 1)))
35


c1 has what private at from 733698.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y46 IsOwner) (?Y47 Duration)) (and (eq ?prop:subject [pete]) (eq ?Y46:of [c2]) (eq ?prop:predicate ?Y46) (= ?Y47:start 733698.0) (= ?Y47:end -1.0) (eq ?prop:truth 1)))
0


no
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
----------running---------------------
----------runned: 0---------------------
(find-all-instances ((?prop Proposition) (?Y48 Has) (?Y49 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y48:what [public]) (eq ?prop:predicate ?Y48) (= ?Y49:start 733698.0) (= ?Y49:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y50 Has) (?Y51 Duration)) (and (eq ?prop:subject [c2]) (eq ?Y50:what [public]) (eq ?prop:predicate ?Y50) (= ?Y51:start 733698.0) (= ?Y51:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y52 Can) (?Y53 View) (?Y54 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y53:what [c1]) (eq ?Y52:what ?Y53) (eq ?prop:predicate ?Y52) (= ?Y54:start 733698.0) (= ?Y54:end -1.0) (eq ?prop:truth 1)))
35


jane can what view what c1 at from 733698.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y55 Can) (?Y56 View) (?Y57 Duration)) (and (eq ?prop:subject [pete]) (eq ?Y56:what [c1]) (eq ?Y55:what ?Y56) (eq ?prop:predicate ?Y55) (= ?Y57:start 733698.0) (= ?Y57:end -1.0) (eq ?prop:truth 1)))
0


no
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 10---------------------
(find-all-instances ((?prop Proposition) (?Y58 Has) (?Y59 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y58:what [private]) (eq ?prop:predicate ?Y58) (= ?Y59:start 733698.0) (= ?Y59:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y60 Has) (?Y61 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y60:what [private]) (eq ?prop:predicate ?Y60) (= ?Y61:start 733698.0) (= ?Y61:end -1.0) (eq ?prop:truth 1)))
41


c1 has what private at from 733698.0 till -1.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule cfea5a811d32425799f9932390b59bcc (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 46c919f677ab4739aa22f64823bebe02 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 01a1b13c0d484e01bc67c1be72703f7e (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 0497925b93f54bb8ba5796778e36e053 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule e4b4fa3137174663b1f2b14847a7f8d8 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 542a9cf01ff441a4a414887426750f3a (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule d00843354f5746e5991d0ca2ca24811e (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 4f345a9adcf1486ebb1306dafe6c57ad (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 43ca582313364582ad66d0b1222eff65 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule ecfccae5ad984b4c8c347ec99385aded (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 1ff31e77b72c4b6197ba7afb94ab2290 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 9e6555df43a04a37bd50bbe8cef7c2bd (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 0332038efbf74c5282583fbe9a010e43 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 0656635adcea42309ed7f1d8cd46ea41 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule b250079c6ff949be90fa23361eef220f (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 45a39790566542c287f6d3cd6c27a144 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(find-all-instances ((?prop Proposition) (?Y40 IsOwner) (?Y41 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y40:of [c1]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
----------running---------------------
----------runned: 33---------------------
(find-all-instances ((?prop Proposition) (?Y42 IsOwner) (?Y43 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y42:of [c1]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
35


jane isowner of c1 at from 733698.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y44 Has) (?Y45 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y44:what [private]) (eq ?prop:predicate ?Y44) (= ?Y45:start 733698.0) (= ?Y45:end -1.0) (eq ?prop:truth 1)))
35


c1 has what private at from 733698.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y46 IsOwner) (?Y47 Duration)) (and (eq ?prop:subject [pete]) (eq ?Y46:of [c2]) (eq ?prop:predicate ?Y46) (= ?Y47:start 733698.0) (= ?Y47:end -1.0) (eq ?prop:truth 1)))
0


no
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
----------running---------------------
----------runned: 0---------------------
(find-all-instances ((?prop Proposition) (?Y48 Has) (?Y49 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y48:what [public]) (eq ?prop:predicate ?Y48) (= ?Y49:start 733698.0) (= ?Y49:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y50 Has) (?Y51 Duration)) (and (eq ?prop:subject [c2]) (eq ?Y50:what [public]) (eq ?prop:predicate ?Y50) (= ?Y51:start 733698.0) (= ?Y51:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y52 Can) (?Y53 View) (?Y54 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y53:what [c1]) (eq ?Y52:what ?Y53) (eq ?prop:predicate ?Y52) (= ?Y54:start 733698.0) (= ?Y54:end -1.0) (eq ?prop:truth 1)))
35


jane can what view what c1 at from 733698.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y55 Can) (?Y56 View) (?Y57 Duration)) (and (eq ?prop:subject [pete]) (eq ?Y56:what [c1]) (eq ?Y55:what ?Y56) (eq ?prop:predicate ?Y55) (= ?Y57:start 733698.0) (= ?Y57:end -1.0) (eq ?prop:truth 1)))
0


no
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 10---------------------
(find-all-instances ((?prop Proposition) (?Y58 Has) (?Y59 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y58:what [private]) (eq ?prop:predicate ?Y58) (= ?Y59:start 733698.0) (= ?Y59:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y60 Has) (?Y61 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y60:what [public]) (eq ?prop:predicate ?Y60) (= ?Y61:start 733698.0) (= ?Y61:end -1.0) (eq ?prop:truth 1)))
41


c1 has what public at from 733698.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y62 Can) (?Y63 View) (?Y64 Duration)) (and (eq ?prop:subject [pete]) (eq ?Y63:what [c1]) (eq ?Y62:what ?Y63) (eq ?prop:predicate ?Y62) (= ?Y64:start 733698.0) (= ?Y64:end -1.0) (eq ?prop:truth 1)))
41


pete can what view what c1 at from 733698.0 till -1.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(defrule aa2ad14be75f4eeba4b2f5dfc98121eb (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule 36804b006a714ec8919784f0541a7c07 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule d6f534960e0a4cbab1f1434fc13633a3 (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 2144bda6e8f2460caedc1bb86ddb80c8 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 46e3ae23d5be4815934c734b4b8efbff (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 720a56fd19a443c5adf72a76f539512a (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule dad8eba0f17745f3ab2f1eef76abc391 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule 81d83a46800a463784c0c471daffc18b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 3eb40d9a8a1b49eb948d353e026f46c1 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule b9966455ae8d4c6a98399e6964322b0b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 28c630c7710c4c46ada475cd6a144e25 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule de780f87fffd4caca3dc44213e768786 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule 4019b14ac8234540970684bfa4f9e87c (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule dcadc0c0af234026a1451dbb8989a809 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733698.0) (end -1.0)) 1))
(defrule e91448bce6cc45fc9ff9b4bdabfd96f3 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733698) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 80ecdc0cbed84c9f8f1be880d11c5c1d (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733698.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733698.0 1)
(find-all-instances ((?prop Proposition) (?Y40 IsOwner) (?Y41 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y40:of [c1]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733698.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
----------running---------------------
----------runned: 33---------------------
(find-all-instances ((?prop Proposition) (?Y42 IsOwner) (?Y43 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y42:of [c1]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733698.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
35


jane isowner of c1 at from 733698.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y44 Has) (?Y45 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y44:what [private]) (eq ?prop:predicate ?Y44) (= ?Y45:start 733698.0) (= ?Y45:end -1.0) (eq ?prop:truth 1)))
35


c1 has what private at from 733698.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y46 IsOwner) (?Y47 Duration)) (and (eq ?prop:subject [pete]) (eq ?Y46:of [c2]) (eq ?prop:predicate ?Y46) (= ?Y47:start 733698.0) (= ?Y47:end -1.0) (eq ?prop:truth 1)))
0


no
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733698.0 1)
----------running---------------------
----------runned: 0---------------------
(find-all-instances ((?prop Proposition) (?Y48 Has) (?Y49 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y48:what [public]) (eq ?prop:predicate ?Y48) (= ?Y49:start 733698.0) (= ?Y49:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y50 Has) (?Y51 Duration)) (and (eq ?prop:subject [c2]) (eq ?Y50:what [public]) (eq ?prop:predicate ?Y50) (= ?Y51:start 733698.0) (= ?Y51:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y52 Can) (?Y53 View) (?Y54 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y53:what [c1]) (eq ?Y52:what ?Y53) (eq ?prop:predicate ?Y52) (= ?Y54:start 733698.0) (= ?Y54:end -1.0) (eq ?prop:truth 1)))
35


jane can what view what c1 at from 733698.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y55 Can) (?Y56 View) (?Y57 Duration)) (and (eq ?prop:subject [pete]) (eq ?Y56:what [c1]) (eq ?Y55:what ?Y56) (eq ?prop:predicate ?Y55) (= ?Y57:start 733698.0) (= ?Y57:end -1.0) (eq ?prop:truth 1)))
0


no
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733698.0 1)
----------running---------------------
----------runned: 10---------------------
(find-all-instances ((?prop Proposition) (?Y58 Has) (?Y59 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y58:what [private]) (eq ?prop:predicate ?Y58) (= ?Y59:start 733698.0) (= ?Y59:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y60 Has) (?Y61 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y60:what [public]) (eq ?prop:predicate ?Y60) (= ?Y61:start 733698.0) (= ?Y61:end -1.0) (eq ?prop:truth 1)))
41


c1 has what public at from 733698.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y62 Can) (?Y63 View) (?Y64 Duration)) (and (eq ?prop:subject [pete]) (eq ?Y63:what [c1]) (eq ?Y62:what ?Y63) (eq ?prop:predicate ?Y62) (= ?Y64:start 733698.0) (= ?Y64:end -1.0) (eq ?prop:truth 1)))
41


pete can what view what c1 at from 733698.0 till -1.0
(defclass Name (is-a USER))

(deffunction reduce-class (?instance ?class)
    (if (eq (length$
                (find-all-instances ((?a ?class))(eq (instance-name ?a) ?instance)))
             0)
    then (make-instance ?instance of ?class)
    else (return TRUE)))
(defclass Thing (is-a Name))
(defclass Verb (is-a USER))
(defclass State (is-a Verb) )
(set-sequence-operator-recognition TRUE)
(defmessage-handler State set-slots primary ($?slots)
        (while (> (length$ ?slots) 0) do
            (bind ?slot (first$ ?slots))
            (bind ?vslots (rest$ ?slots))
            (bind ?value (first$ ?vslots))
            (bind ?slots (rest$ ?vslots))
            (dynamic-put $?slot $?value))
        (return (instance-name ?self)))


(deffunction add-pred (?class $?slots)
        (bind ?key (str-cat ?class $?slots))
        (bind ?pos (str-index "." ?key))
        (while ?pos do
            (bind ?key (str-cat (sub-string 1 (- ?pos 1) ?key)
                                "_"
                                (sub-string (+ ?pos 1) (str-length ?key) ?key)))
            (bind ?pos (str-index "." ?key)))
        (bind ?key (sym-cat ?key))
        (if (instance-existp ?key) then
            (return (instance-name ?key))
         else
            (make-instance ?key of ?class)
            (return (send (instance-name ?key) set-slots $?slots))))

(defclass Duration (is-a Name) (slot start (type NUMBER) (pattern-match reactive)) (slot end (type NUMBER) (pattern-match reactive)))


(deffunction mincomstart (?dur1 ?dur2)
    (return (max (send ?dur1 get-start) (send ?dur2 get-start)))
)



(deffunction maxcomend (?dur1 ?dur2)
    (bind ?e1 (send ?dur1 get-end))
    (bind ?e2 (send ?dur2 get-end))
    (if (= ?e1 ?e2) then (return ?e1))
    (if (= ?e2 -1) then
        (return ?e1)
    )
    (if (= ?e1 -1) then
        (return ?e2)
    )
    (return (min ?e1 ?e2))
)

(defclass Proposition (is-a Name) (slot truth (type INTEGER) (default 1) (pattern-match reactive)) (slot subject (type INSTANCE) (pattern-match reactive)) (slot predicate (type INSTANCE) (pattern-match reactive)) (slot time (type ?VARIABLE) (pattern-match reactive)))

(deffunction add-prop (?s ?p ?t ?r)
       (bind ?count 0)
       (do-for-all-instances ((?prop Proposition))
                          (and (eq ?prop:subject ?s)
                               (eq ?prop:predicate ?p)
                               (or (and (eq (class ?t) Duration)
                                        (= (send (send ?prop get-time) get-start) (send ?t get-start))
                                        (= (send (send ?prop get-time) get-end) (send ?t get-end)))
                                   (= ?prop:time ?t))
                               (= ?prop:truth ?r))
               (bind ?count (+ ?count 1)))
        (if (= ?count 0)
        then (make-instance of Proposition (subject ?s)
                                           (predicate ?p)
                                           (time ?t)
                                           (truth ?r))
        else (return TRUE)))
(defclass Person (is-a Thing))
(defclass Can (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Wants (is-a State) (slot to (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Has (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsNeeded (is-a State) (slot for_action (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsIn (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Group (is-a Thing))
(defclass Permission (is-a Thing))
(defclass Role (is-a Thing))
(defclass Content (is-a Thing))
(defclass Create (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass IsOwner (is-a State) (slot of (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Status (is-a Thing))
(defclass View (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Publish (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(defclass Hide (is-a State) (slot what (type INSTANCE) (visibility public) (pattern-match reactive)))
(reduce-class [admin] Person)
(reduce-class [member] Role)
(reduce-class [manager] Role)
(reduce-class [basic_perm] Permission)
(reduce-class [manage_perm] Permission)
(reduce-class [create_perm] Permission)
(reduce-class [public] Status)
(reduce-class [private] Status)
(add-prop [admin] (add-pred Has what [manager]) (make-instance of Duration (start 733699.0) (end -1.0)) 1)
(add-prop [member] (add-pred Has what [basic_perm]) (make-instance of Duration (start 733699.0) (end -1.0)) 1)
(defrule 7e30e55f5b804b2d8836fe87b2762834 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y1&:(or (eq (class ?Y1) Wants) (subclassp (class ?Y1) Wants))&:(or (eq (class (send ?Y1 get-to)) Create) (subclassp (class (send ?Y1 get-to)) Create))&:(or (eq (class (send (send ?Y1 get-to) get-what)) Thing) (subclassp (class (send (send ?Y1 get-to) get-what)) Thing))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y2&:(or (eq (class ?Y2) Has) (subclassp (class ?Y2) Has))&:(eq (send ?Y2 get-what) [create_perm])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (add-pred Create what (send (send ?Y1 get-to) get-what)) ?X2 1))
(defrule f68169e82ea14e4f9770e2b608838f4c (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y4&:(or (eq (class ?Y4) Wants) (subclassp (class ?Y4) Wants))) (time ?X2) (truth 1))) (logical (object (is-a Proposition) (subject ?X1) (predicate ?Y5&:(or (eq (class ?Y5) Can) (subclassp (class ?Y5) Can))&:(eq (send ?Y4 get-to) (send ?Y5 get-what))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (test (and (<= (send ?X3 get-start) ?X2) (or (= (send ?X3 get-end) -1) (>= (send ?X3 get-end) ?X2)))) => (add-prop ?X1 (send ?Y4 get-to) ?X2 1))
(defrule 61fbb7332c054e5dbb4840d67d5d1a6e (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Thing) (subclassp (class ?X2) Thing))) (predicate ?Y7&:(or (eq (class ?Y7) IsNeeded) (subclassp (class ?Y7) IsNeeded))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y9&:(or (eq (class ?Y9) Has) (subclassp (class ?Y9) Has))&:(eq (send ?Y9 get-what) ?X2)) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Can what (send ?Y7 get-for_action)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule c965a4a926dc41beab2f3c708d5e54b1 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Thing) (subclassp (class ?X1) Thing))) (predicate ?Y11&:(or (eq (class ?Y11) IsIn) (subclassp (class ?Y11) IsIn))&:(or (eq (class (send ?Y11 get-what)) Thing) (subclassp (class (send ?Y11 get-what)) Thing))) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y11 get-what))) (predicate ?Y13&:(or (eq (class ?Y13) IsIn) (subclassp (class ?Y13) IsIn))&:(or (eq (class (send ?Y13 get-what)) Thing) (subclassp (class (send ?Y13 get-what)) Thing))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))) (and (>= (send ?X4 get-start) (send ?X4 get-start)) (or (<= (send ?X4 get-start) (send ?X4 get-end)) (= (send ?X4 get-end) -1))))) => (add-prop ?X1 (add-pred IsIn what (send ?Y13 get-what)) (make-instance of Duration (start (mincomstart ?X4 ?X5)) (end (maxcomend ?X4 ?X5))) 1))
(defrule 84cd50b232f84ed5a4dad473c5f36862 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y15&:(or (eq (class ?Y15) IsIn) (subclassp (class ?Y15) IsIn))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Group) (subclassp (class ?X2) Group))) (predicate ?Y17&:(or (eq (class ?Y17) Has) (subclassp (class ?Y17) Has))&:(or (eq (class (send ?Y17 get-what)) Permission) (subclassp (class (send ?Y17 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y17 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule 9d42eaf6ad7941fd91ba9cdbeeca0e70 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y19&:(or (eq (class ?Y19) Has) (subclassp (class ?Y19) Has))&:(or (eq (class (send ?Y19 get-what)) Role) (subclassp (class (send ?Y19 get-what)) Role))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y19 get-what))) (predicate ?Y21&:(or (eq (class ?Y21) Has) (subclassp (class ?Y21) Has))&:(or (eq (class (send ?Y21 get-what)) Permission) (subclassp (class (send ?Y21 get-what)) Permission))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X1 (add-pred Has what (send ?Y21 get-what)) (make-instance of Duration (start (mincomstart ?X3 ?X5)) (end (maxcomend ?X3 ?X5))) 1))
(defrule f304f0ffe728410580f55e3b604799e3 (logical (object (is-a Person) (name ?X1))) => (add-prop ?X1 (add-pred Has what [member]) (make-instance of Duration (start 733699.0) (end -1.0)) 1))
(defrule 71f0ae79c3734fd5a9240efd2daa4627 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y23&:(or (eq (class ?Y23) Create) (subclassp (class ?Y23) Create))&:(or (eq (class (send ?Y23 get-what)) Content) (subclassp (class (send ?Y23 get-what)) Content))) (time ?X3) (truth 1))) => (reduce-class (send ?Y23 get-what) Content) (add-prop ?X1 (add-pred IsOwner of (send ?Y23 get-what)) (make-instance of Duration (start ?X3) (end -1.0)) 1) (add-prop (send ?Y23 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule c503895768b249769d76653c29e00eb1 (logical (object (is-a Permission) (name ?X2))) => (add-prop [manager] (add-pred Has what ?X2) (make-instance of Duration (start 733699.0) (end -1.0)) 1))
(defrule f48505c975e0431faba58d8cdb8c2946 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y24&:(or (eq (class ?Y24) Has) (subclassp (class ?Y24) Has))&:(eq (send ?Y24 get-what) [public])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [basic_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 0399735c3a6c402da6c272c43f2e5428 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y26&:(or (eq (class ?Y26) Has) (subclassp (class ?Y26) Has))&:(eq (send ?Y26 get-what) [private])) (time ?X2&:(or (eq (class ?X2) Duration) (subclassp (class ?X2) Duration))) (truth 1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred View what ?X1)) ?X2 1))
(defrule 9cbb698408104bc488cb4d7b07a03c39 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Content) (subclassp (class ?X1) Content))) (predicate ?Y28&:(or (eq (class ?Y28) Has) (subclassp (class ?Y28) Has))&:(eq (send ?Y28 get-what) [private])) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(or (eq (class ?X2) Person) (subclassp (class ?X2) Person))) (predicate ?Y30&:(or (eq (class ?Y30) IsOwner) (subclassp (class ?Y30) IsOwner))&:(eq (send ?Y30 get-of) ?X1)) (time ?X4&:(or (eq (class ?X4) Duration) (subclassp (class ?X4) Duration))) (truth 1))) (test (or (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))) (and (>= (send ?X3 get-start) (send ?X3 get-start)) (or (<= (send ?X3 get-start) (send ?X3 get-end)) (= (send ?X3 get-end) -1))))) => (add-prop ?X2 (add-pred Can what (add-pred View what ?X1)) (make-instance of Duration (start (mincomstart ?X3 ?X4)) (end (maxcomend ?X3 ?X4))) 1))
(defrule b5a575b13d6e45c3a3a3829546761056 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y32&:(or (eq (class ?Y32) Publish) (subclassp (class ?Y32) Publish))&:(or (eq (class (send ?Y32 get-what)) Content) (subclassp (class (send ?Y32 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y32 get-what))) (predicate ?Y33&:(or (eq (class ?Y33) Has) (subclassp (class ?Y33) Has))&:(or (eq (class (send ?Y33 get-what)) Status) (subclassp (class (send ?Y33 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733699) (add-prop (send ?Y32 get-what) (add-pred Has what [public]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule 4f46b6c671bc4bbf90a42f3e0c9c5892 (logical (object (is-a Content) (name ?X1))) => (add-prop [manage_perm] (add-pred IsNeeded for_action (add-pred Publish what ?X1)) (make-instance of Duration (start 733699.0) (end -1.0)) 1))
(defrule fc1367a605f64e709e26a5be9df8ca40 (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y35&:(or (eq (class ?Y35) Hide) (subclassp (class ?Y35) Hide))&:(or (eq (class (send ?Y35 get-what)) Content) (subclassp (class (send ?Y35 get-what)) Content))) (time ?X3) (truth 1))) (logical (object (is-a Proposition) (subject ?X2&:(eq ?X2 (send ?Y35 get-what))) (predicate ?Y36&:(or (eq (class ?Y36) Has) (subclassp (class ?Y36) Has))&:(or (eq (class (send ?Y36 get-what)) Status) (subclassp (class (send ?Y36 get-what)) Status))) (time ?X5&:(or (eq (class ?X5) Duration) (subclassp (class ?X5) Duration))) (truth 1))) => (send ?X5 put-end 733699) (add-prop (send ?Y35 get-what) (add-pred Has what [private]) (make-instance of Duration (start ?X3) (end -1.0)) 1))
(defrule efa08f03d93c4c449974104fb778513b (logical (object (is-a Proposition) (subject ?X1&:(or (eq (class ?X1) Person) (subclassp (class ?X1) Person))) (predicate ?Y38&:(or (eq (class ?Y38) IsOwner) (subclassp (class ?Y38) IsOwner))&:(or (eq (class (send ?Y38 get-of)) Content) (subclassp (class (send ?Y38 get-of)) Content))) (time ?X3&:(or (eq (class ?X3) Duration) (subclassp (class ?X3) Duration))) (truth 1))) => (add-prop ?X1 (add-pred Can what (add-pred Hide what (send ?Y38 get-of))) ?X3 1))
(reduce-class [john] Person)
(reduce-class [pete] Person)
(reduce-class [jane] Person)
(reduce-class [c1] Content)
(reduce-class [c2] Content)
(add-prop [john] (add-pred Has what [manager]) (make-instance of Duration (start 733699.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Has what [create_perm]) (make-instance of Duration (start 733699.0) (end -1.0)) 1)
(add-prop [jane] (add-pred Wants to (add-pred Create what [c1])) 733699.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Create what [c2])) 733699.0 1)
(find-all-instances ((?prop Proposition) (?Y40 IsOwner) (?Y41 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y40:of [c1]) (eq ?prop:predicate ?Y40) (= ?Y41:start 733699.0) (= ?Y41:end -1.0) (eq ?prop:truth 1)))
0


no
----------running---------------------
----------runned: 33---------------------
(find-all-instances ((?prop Proposition) (?Y42 IsOwner) (?Y43 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y42:of [c1]) (eq ?prop:predicate ?Y42) (= ?Y43:start 733699.0) (= ?Y43:end -1.0) (eq ?prop:truth 1)))
35


jane isowner of c1 at from 733699.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y44 Has) (?Y45 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y44:what [private]) (eq ?prop:predicate ?Y44) (= ?Y45:start 733699.0) (= ?Y45:end -1.0) (eq ?prop:truth 1)))
35


c1 has what private at from 733699.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y46 IsOwner) (?Y47 Duration)) (and (eq ?prop:subject [pete]) (eq ?Y46:of [c2]) (eq ?prop:predicate ?Y46) (= ?Y47:start 733699.0) (= ?Y47:end -1.0) (eq ?prop:truth 1)))
0


no
(add-prop [jane] (add-pred Wants to (add-pred Publish what [c1])) 733699.0 1)
(add-prop [pete] (add-pred Wants to (add-pred Publish what [c2])) 733699.0 1)
----------running---------------------
----------runned: 0---------------------
(find-all-instances ((?prop Proposition) (?Y48 Has) (?Y49 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y48:what [public]) (eq ?prop:predicate ?Y48) (= ?Y49:start 733699.0) (= ?Y49:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y50 Has) (?Y51 Duration)) (and (eq ?prop:subject [c2]) (eq ?Y50:what [public]) (eq ?prop:predicate ?Y50) (= ?Y51:start 733699.0) (= ?Y51:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y52 Can) (?Y53 View) (?Y54 Duration)) (and (eq ?prop:subject [jane]) (eq ?Y53:what [c1]) (eq ?Y52:what ?Y53) (eq ?prop:predicate ?Y52) (= ?Y54:start 733699.0) (= ?Y54:end -1.0) (eq ?prop:truth 1)))
35


jane can what view what c1 at from 733699.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y55 Can) (?Y56 View) (?Y57 Duration)) (and (eq ?prop:subject [pete]) (eq ?Y56:what [c1]) (eq ?Y55:what ?Y56) (eq ?prop:predicate ?Y55) (= ?Y57:start 733699.0) (= ?Y57:end -1.0) (eq ?prop:truth 1)))
0


no
(add-prop [john] (add-pred Wants to (add-pred Publish what [c1])) 733699.0 1)
----------running---------------------
----------runned: 10---------------------
(find-all-instances ((?prop Proposition) (?Y58 Has) (?Y59 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y58:what [private]) (eq ?prop:predicate ?Y58) (= ?Y59:start 733699.0) (= ?Y59:end -1.0) (eq ?prop:truth 1)))
0


no
(find-all-instances ((?prop Proposition) (?Y60 Has) (?Y61 Duration)) (and (eq ?prop:subject [c1]) (eq ?Y60:what [public]) (eq ?prop:predicate ?Y60) (= ?Y61:start 733699.0) (= ?Y61:end -1.0) (eq ?prop:truth 1)))
41


c1 has what public at from 733699.0 till -1.0
(find-all-instances ((?prop Proposition) (?Y62 Can) (?Y63 View) (?Y64 Duration)) (and (eq ?prop:subject [pete]) (eq ?Y63:what [c1]) (eq ?Y62:what ?Y63) (eq ?prop:predicate ?Y62) (= ?Y64:start 733699.0) (= ?Y64:end -1.0) (eq ?prop:truth 1)))
41


pete can what view what c1 at from 733699.0 till -1.0
